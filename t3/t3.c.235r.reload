
;; Function init (init, funcdef_no=2, decl_uid=4419, cgraph_uid=2, symbol_order=2)

      Creating newreg=137
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=138
Removing SCRATCH in insn #92 (nop 3)
rescanning insn with uid = 92.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r137
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 11:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=139 from oldreg=120, assigning class GENERAL_REGS to r139
   37: {r139:DI=r139:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  102: r139:DI=r118:DI
    Inserting insn reload after:
  103: r120:DI=r139:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 56:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            3 Small class reload: reject+=3
            4 Small class reload: reject+=3
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 58:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=140 from oldreg=124, assigning class DIREG to r140
      Creating newreg=141 from oldreg=125, assigning class SIREG to r141
   58: {r126:DI=0;r140:DI=r126:DI<<0x3+r140:DI;r141:DI=r126:DI<<0x3+r141:DI;[r140:DI]=[r141:DI];use r126:DI;}
      REG_UNUSED r126:DI
      REG_UNUSED r125:DI
      REG_UNUSED r124:DI
    Inserting insn reload before:
  104: r140:DI=r124:DI
  105: r141:DI=r125:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            2 Small class reload: reject+=3
            2 Non input pseudo reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 64:  (0) =D  (1) =S  (2) =c  (3) 0  (4) 1  (5) 2 {*rep_movdi_rex64}
      Creating newreg=142 from oldreg=129, assigning class SIREG to r142
      Creating newreg=143 from oldreg=130, assigning class CREG to r143
   64: {r143:DI=0;r128:DI=r143:DI<<0x3+r128:DI;r142:DI=r143:DI<<0x3+r142:DI;[r128:DI]=[r142:DI];use r143:DI;}
      REG_UNUSED r130:DI
      REG_UNUSED r129:DI
      REG_UNUSED r128:DI
    Inserting insn reload before:
  106: r142:DI=r129:DI
  107: r143:DI=r130:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 70:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 71:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 89:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 90:  (0) m  (1) qn {*movqi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r138
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 94: point = 0
  BB 4
  BB 2
   Insn 93: point = 0
   Insn 92: point = 0
   Insn 100: point = 1
   Insn 90: point = 1
   Insn 89: point = 2
   Insn 88: point = 4
   Insn 87: point = 6
   Insn 86: point = 8
   Insn 85: point = 9
   Insn 84: point = 11
   Insn 83: point = 12
   Insn 82: point = 12
   Insn 81: point = 13
   Insn 80: point = 13
   Insn 79: point = 13
   Insn 78: point = 15
   Insn 77: point = 17
   Insn 76: point = 19
   Insn 75: point = 20
   Insn 74: point = 21
   Insn 73: point = 23
   Insn 72: point = 25
   Insn 71: point = 26
   Insn 70: point = 27
   Insn 69: point = 29
   Insn 68: point = 31
   Insn 67: point = 33
   Insn 66: point = 34
   Insn 65: point = 36
   Insn 64: point = 37
   Insn 107: point = 38
	Hard reg 1 is preferable by r143 with profit 1
   Insn 106: point = 40
	Hard reg 0 is preferable by r142 with profit 1
   Insn 63: point = 42
   Insn 62: point = 43
   Insn 61: point = 44
   Insn 60: point = 46
   Insn 59: point = 48
   Insn 58: point = 49
   Insn 105: point = 50
	Hard reg 1 is preferable by r141 with profit 1
   Insn 104: point = 52
	Hard reg 0 is preferable by r140 with profit 1
   Insn 57: point = 54
   Insn 56: point = 55
   Insn 55: point = 56
   Insn 54: point = 57
   Insn 53: point = 57
   Insn 52: point = 57
   Insn 51: point = 57
   Insn 50: point = 57
   Insn 49: point = 57
   Insn 48: point = 57
   Insn 47: point = 57
   Insn 46: point = 57
   Insn 45: point = 58
   Insn 44: point = 59
   Insn 43: point = 60
   Insn 42: point = 61
   Insn 41: point = 63
   Insn 40: point = 64
   Insn 39: point = 64
   Insn 38: point = 65
   Insn 103: point = 67
	Hard reg 1 is preferable by r139 with profit 1
   Insn 37: point = 69
   Insn 102: point = 69
   Insn 36: point = 70
   Insn 35: point = 72
   Insn 34: point = 74
   Insn 33: point = 76
   Insn 32: point = 78
   Insn 31: point = 79
   Insn 30: point = 79
   Insn 29: point = 80
   Insn 28: point = 80
   Insn 27: point = 81
   Insn 26: point = 82
   Insn 25: point = 84
   Insn 24: point = 85
   Insn 23: point = 86
   Insn 22: point = 87
   Insn 21: point = 89
   Insn 20: point = 90
   Insn 19: point = 90
   Insn 18: point = 91
   Insn 17: point = 92
   Insn 16: point = 93
   Insn 15: point = 95
   Insn 14: point = 97
   Insn 13: point = 99
   Insn 12: point = 100
   Insn 11: point = 100
   Insn 10: point = 101
   Insn 9: point = 103
   Insn 6: point = 104
   Insn 4: point = 106
   Insn 3: point = 106
   Insn 2: point = 106
 r87: [94..95]
 r88: [85..87]
 r89: [79..82]
 r90: [75..76]
 r91: [64..65]
 r92: [59..61]
 r93: [45..46]
 r94: [26..34]
 r95: [30..31]
 r96: [28..29]
 r97: [26..27]
 r98: [22..23]
 r99: [20..21]
 r100: [16..17]
 r101: [14..15]
 r102: [12..13]
 r103: [1..9]
 r104: [5..6]
 r105: [3..4]
 r106: [1..2]
 r107: [102..103]
 r108: [98..101]
 r109: [99..100]
 r110: [96..97]
 r111: [92..93]
 r112: [90..91]
 r113: [88..89]
 r114: [85..86]
 r115: [83..84]
 r116: [80..81]
 r117: [77..78]
 r118: [73..74] [66..70]
 r119: [71..72]
 r120: [66..67]
 r121: [62..63]
 r122: [59..60]
 r123: [57..58]
 r124: [53..56]
 r125: [51..55]
 r126: [49..54]
 r127: [47..48]
 r128: [37..44]
 r129: [41..43]
 r130: [39..42]
 r131: [35..36]
 r132: [32..33]
 r133: [24..25]
 r134: [18..19]
 r135: [10..11]
 r136: [7..8]
 r137: [104..105]
 r138: [0..0]
 r139: [68..69]
 r140: [49..52]
 r141: [49..50]
 r142: [37..40]
 r143: [37..38]
Compressing live ranges: from 106 to 93 - 87%
Ranges after the compression:
 r87: [83..84]
 r88: [75..76]
 r89: [71..72]
 r90: [67..68]
 r91: [57..58]
 r92: [53..54]
 r93: [41..42]
 r94: [25..32]
 r95: [29..30]
 r96: [27..28]
 r97: [25..26]
 r98: [21..22]
 r99: [19..20]
 r100: [15..16]
 r101: [13..14]
 r102: [11..12]
 r103: [1..8]
 r104: [5..6]
 r105: [3..4]
 r106: [1..2]
 r107: [89..90]
 r108: [87..88]
 r109: [87..88]
 r110: [85..86]
 r111: [81..82]
 r112: [79..80]
 r113: [77..78]
 r114: [75..76]
 r115: [73..74]
 r116: [71..72]
 r117: [69..70]
 r118: [65..66] [59..62]
 r119: [63..64]
 r120: [59..60]
 r121: [55..56]
 r122: [53..54]
 r123: [51..52]
 r124: [49..50]
 r125: [47..50]
 r126: [45..50]
 r127: [43..44]
 r128: [35..40]
 r129: [39..40]
 r130: [37..40]
 r131: [33..34]
 r132: [31..32]
 r133: [23..24]
 r134: [17..18]
 r135: [9..10]
 r136: [7..8]
 r137: [91..92]
 r138: [0..0]
 r139: [61..62]
 r140: [45..48]
 r141: [45..46]
 r142: [35..38]
 r143: [35..36]

********** Assignment #1: **********

	 Assigning to 140 (cl=DIREG, orig=124, freq=2, tfirst=140, tfreq=2)...
	   Assign 5 to reload r140 (freq=2)
	 Assigning to 141 (cl=SIREG, orig=125, freq=2, tfirst=141, tfreq=2)...
	   Assign 4 to reload r141 (freq=2)
	 Assigning to 142 (cl=SIREG, orig=129, freq=2, tfirst=142, tfreq=2)...
	   Assign 4 to reload r142 (freq=2)
	 Assigning to 143 (cl=CREG, orig=130, freq=2, tfirst=143, tfreq=2)...
	   Assign 2 to reload r143 (freq=2)
	 Assigning to 139 (cl=GENERAL_REGS, orig=120, freq=3, tfirst=139, tfreq=3)...
	   Assign 1 to reload r139 (freq=3)
	 Assigning to 137 (cl=INDEX_REGS, orig=137, freq=1, tfirst=137, tfreq=1)...
	   Assign 0 to reload r137 (freq=1)
	 Assigning to 138 (cl=INDEX_REGS, orig=138, freq=1, tfirst=138, tfreq=1)...
	   Assign 0 to reload r138 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=512, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=496, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 44
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 71
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 82
changing reg in insn 85
changing reg in insn 90
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 10
changing reg in insn 14
changing reg in insn 13
changing reg in insn 12
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 38
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 61
changing reg in insn 64
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 6
changing reg in insn 92
deleting insn with uid = 10.
deleting insn with uid = 15.
deleting insn with uid = 21.
deleting insn with uid = 28.
deleting insn with uid = 34.
deleting insn with uid = 36.
deleting insn with uid = 103.
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 94.


init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={37d,34u} r1={23d,18u} r2={10d,6u} r4={12d,7u} r5={14d,9u} r6={1d,36u} r7={1d,9u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={22d,2u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 583{461d,122u,0e} in 88{83 regular + 5 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:8 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:8 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -484 [0xfffffffffffffe1c])) [0 num_of_blocks+0 S4 A32])
        (reg:SI 1 dx [ num_of_blocks ])) t3.c:8 90 {*movsi_internal}
     (nil))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.4955+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [137])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) t3.c:8 986 {stack_tls_protect_set_di}
     (nil))
(insn 9 6 11 2 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -484 [0xfffffffffffffe1c])) [0 num_of_blocks+0 S4 A32])) t3.c:9 90 {*movsi_internal}
     (nil))
(insn 11 9 12 2 (parallel [
            (set (reg:SI 1 dx [109])
                (plus:SI (reg:SI 0 ax [108])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:9 217 {*addsi_1}
     (nil))
(insn 12 11 13 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [108])
            (const_int 0 [0]))) t3.c:9 3 {*cmpsi_ccno_1}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [108])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [109])
            (reg:SI 0 ax [108]))) t3.c:9 953 {*movsicc_noc}
     (nil))
(insn 14 13 16 2 (parallel [
            (set (reg:SI 0 ax [110])
                (ashiftrt:SI (reg:SI 0 ax [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:9 545 {*ashrsi3_1}
     (nil))
(insn 16 14 17 2 (set (reg:DI 0 ax [111])
        (sign_extend:DI (reg:SI 0 ax [orig:87 D.4948 ] [87]))) t3.c:9 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 bitvector_size+0 S8 A64])
        (reg:DI 0 ax [111])) t3.c:9 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [112])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 bitvector_size+0 S8 A64])) t3.c:10 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) t3.c:10 89 {*movdi_internal}
     (nil))
(call_insn 20 19 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd505153360 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) t3.c:10 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 20 23 2 (set (reg/f:DI 1 dx [orig:88 D.4949 ] [88])
        (reg/f:DI 0 ax [113])) t3.c:10 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:10 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/f:DI (reg/f:DI 0 ax [114]) [0 *bitvector_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:88 D.4949 ] [88])) t3.c:10 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:11 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [orig:89 D.4950 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [115]) [0 *bitvector_7(D)+0 S8 A64])) t3.c:11 89 {*movdi_internal}
     (nil))
(insn 27 26 29 2 (set (reg:DI 1 dx [116])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -456 [0xfffffffffffffe38])) [0 bitvector_size+0 S8 A64])) t3.c:11 89 {*movdi_internal}
     (nil))
(insn 29 27 30 2 (set (reg:SI 4 si)
        (const_int 0 [0])) t3.c:11 90 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 D.4950 ] [89])) t3.c:11 89 {*movdi_internal}
     (nil))
(call_insn 31 30 32 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fd50512a438 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) t3.c:11 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 32 31 33 2 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -484 [0xfffffffffffffe1c])) [0 num_of_blocks+0 S4 A32])) t3.c:13 90 {*movsi_internal}
     (nil))
(insn 33 32 35 2 (set (reg:DI 0 ax [orig:90 D.4951 ] [90])
        (sign_extend:DI (reg:SI 0 ax [117]))) t3.c:13 142 {*extendsidi2_rex64}
     (nil))
(insn 35 33 102 2 (parallel [
            (set (reg:DI 0 ax [119])
                (ashift:DI (reg:DI 0 ax [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:13 512 {*ashldi3_1}
     (nil))
(insn 102 35 37 2 (set (reg:DI 1 dx [120])
        (reg:DI 0 ax [118])) t3.c:13 89 {*movdi_internal}
     (nil))
(insn 37 102 38 2 (parallel [
            (set (reg:DI 1 dx [120])
                (ashift:DI (reg:DI 1 dx [120])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:13 512 {*ashldi3_1}
     (nil))
(insn 38 37 39 2 (parallel [
            (set (reg:DI 0 ax [orig:91 D.4951 ] [91])
                (plus:DI (reg:DI 0 ax [118])
                    (reg:DI 1 dx [120])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:13 218 {*adddi_1}
     (nil))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:91 D.4951 ] [91])) t3.c:13 89 {*movdi_internal}
     (nil))
(call_insn 40 39 42 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd505153360 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) t3.c:13 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 42 40 43 2 (set (reg/f:DI 1 dx [orig:92 D.4949 ] [92])
        (reg/f:DI 0 ax [121])) t3.c:13 89 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 memory+0 S8 A64])) t3.c:13 89 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (mem/f:DI (reg/f:DI 0 ax [122]) [0 *memory_15(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:92 D.4949 ] [92])) t3.c:13 89 {*movdi_internal}
     (nil))
(insn 45 44 46 2 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -448 [0xfffffffffffffe40])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:15 218 {*adddi_1}
     (nil))
(insn 46 45 47 2 (set (mem/c:HI (reg:DI 0 ax [123]) [0 MEM[(void *)&fd]+0 S2 A64])
        (const_int 47 [0x2f])) t3.c:15 92 {*movhi_internal}
     (nil))
(insn 47 46 48 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -320 [0xfffffffffffffec0])) [0 fd.creat_t+0 S8 A64])
        (const_int 0 [0])) t3.c:16 89 {*movdi_internal}
     (nil))
(insn 48 47 49 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -312 [0xfffffffffffffec8])) [0 fd.access_t+0 S8 A64])
        (const_int 0 [0])) t3.c:17 89 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -304 [0xfffffffffffffed0])) [0 fd.mod_t+0 S8 A64])
        (const_int 0 [0])) t3.c:18 89 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [0 fd.access+0 S4 A64])
        (const_int 0 [0])) t3.c:19 90 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -292 [0xfffffffffffffedc])) [0 fd.owner+0 S2 A32])
        (const_int 0 [0])) t3.c:20 92 {*movhi_internal}
     (nil))
(insn 52 51 53 2 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -290 [0xfffffffffffffede])) [0 fd.size+0 S2 A16])
        (const_int 0 [0])) t3.c:21 92 {*movhi_internal}
     (nil))
(insn 53 52 54 2 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [0 fd.block_ref+0 S2 A64])
        (const_int 1 [0x1])) t3.c:22 92 {*movhi_internal}
     (nil))
(insn 54 53 55 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [0 superblock.type+0 S4 A64])
        (const_int 0 [0])) t3.c:25 90 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (parallel [
            (set (reg/f:DI 0 ax [124])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -264 [0xfffffffffffffef8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:26 218 {*adddi_1}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg/f:DI 1 dx [125])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -448 [0xfffffffffffffe40])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:26 218 {*adddi_1}
     (nil))
(insn 57 56 104 2 (set (reg:DI 2 cx [126])
        (const_int 21 [0x15])) t3.c:26 89 {*movdi_internal}
     (nil))
(insn 104 57 105 2 (set (reg/f:DI 5 di [124])
        (reg/f:DI 0 ax [124])) t3.c:26 89 {*movdi_internal}
     (nil))
(insn 105 104 58 2 (set (reg/f:DI 4 si [125])
        (reg/f:DI 1 dx [125])) t3.c:26 89 {*movdi_internal}
     (nil))
(insn 58 105 59 2 (parallel [
            (set (reg:DI 2 cx [126])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [124])
                (plus:DI (ashift:DI (reg:DI 2 cx [126])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [124])))
            (set (reg/f:DI 4 si [125])
                (plus:DI (ashift:DI (reg:DI 2 cx [126])
                        (const_int 3 [0x3]))
                    (reg/f:DI 4 si [125])))
            (set (mem/j/c:BLK (reg/f:DI 5 di [124]) [0 superblock.content.fd+0 S168 A64])
                (mem/c:BLK (reg/f:DI 4 si [125]) [0 fd+0 S168 A64]))
            (use (reg:DI 2 cx [126]))
        ]) t3.c:26 921 {*rep_movdi_rex64}
     (nil))
(insn 59 58 60 2 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 memory+0 S8 A64])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 60 59 61 2 (set (reg/f:DI 0 ax [orig:93 D.4952 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [127]) [0 *memory_15(D)+0 S8 A64])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg/f:DI 5 di [128])
        (reg/f:DI 0 ax [orig:93 D.4952 ] [93])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 62 61 63 2 (parallel [
            (set (reg/f:DI 0 ax [129])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:27 218 {*adddi_1}
     (nil))
(insn 63 62 106 2 (set (reg:DI 1 dx [130])
        (const_int 33 [0x21])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 106 63 107 2 (set (reg/f:DI 4 si [129])
        (reg/f:DI 0 ax [129])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 107 106 64 2 (set (reg:DI 2 cx [130])
        (reg:DI 1 dx [130])) t3.c:27 89 {*movdi_internal}
     (nil))
(insn 64 107 65 2 (parallel [
            (set (reg:DI 2 cx [130])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [128])
                (plus:DI (ashift:DI (reg:DI 2 cx [130])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [128])))
            (set (reg/f:DI 4 si [129])
                (plus:DI (ashift:DI (reg:DI 2 cx [130])
                        (const_int 3 [0x3]))
                    (reg/f:DI 4 si [129])))
            (set (mem:BLK (reg/f:DI 5 di [128]) [0 *_27+0 S264 A64])
                (mem/c:BLK (reg/f:DI 4 si [129]) [0 superblock+0 S264 A64]))
            (use (reg:DI 2 cx [130]))
        ]) t3.c:27 921 {*rep_movdi_rex64}
     (nil))
(insn 65 64 66 2 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:28 89 {*movdi_internal}
     (nil))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [orig:94 D.4950 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [131]) [0 *bitvector_7(D)+0 S8 A64])) t3.c:28 89 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (set (reg/f:DI 1 dx [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:28 89 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg/f:DI 1 dx [orig:95 D.4950 ] [95])
        (mem/f:DI (reg/f:DI 1 dx [132]) [0 *bitvector_7(D)+0 S8 A64])) t3.c:28 89 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:QI 1 dx [orig:96 D.4953 ] [96])
        (mem:QI (reg/f:DI 1 dx [orig:95 D.4950 ] [95]) [0 *_30+0 S1 A8])) t3.c:28 93 {*movqi_internal}
     (nil))
(insn 70 69 71 2 (parallel [
            (set (reg:QI 1 dx [orig:97 D.4953 ] [97])
                (ior:QI (reg:QI 1 dx [orig:96 D.4953 ] [96])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:28 405 {*iorqi_1}
     (nil))
(insn 71 70 72 2 (set (mem:QI (reg/f:DI 0 ax [orig:94 D.4950 ] [94]) [0 *_29+0 S1 A8])
        (reg:QI 1 dx [orig:97 D.4953 ] [97])) t3.c:28 93 {*movqi_internal}
     (nil))
(insn 72 71 73 2 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 memory+0 S8 A64])) t3.c:30 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (set (reg/f:DI 0 ax [orig:98 D.4952 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [133]) [0 *memory_15(D)+0 S8 A64])) t3.c:30 89 {*movdi_internal}
     (nil))
(insn 74 73 75 2 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.4952 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 D.4952 ] [98])
                    (const_int 264 [0x108])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:30 218 {*adddi_1}
     (nil))
(insn 75 74 76 2 (set (mem/j:SI (reg/f:DI 0 ax [orig:99 D.4952 ] [99]) [0 _35->type+0 S4 A64])
        (const_int 2 [0x2])) t3.c:30 90 {*movsi_internal}
     (nil))
(insn 76 75 77 2 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -472 [0xfffffffffffffe28])) [0 memory+0 S8 A64])) t3.c:31 89 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (set (reg/f:DI 0 ax [orig:100 D.4952 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [134]) [0 *memory_15(D)+0 S8 A64])) t3.c:31 89 {*movdi_internal}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.4952 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.4952 ] [100])
                    (const_int 264 [0x108])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:31 218 {*adddi_1}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.4954 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 D.4952 ] [101])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:31 218 {*adddi_1}
     (nil))
(insn 80 79 81 2 (set (reg:DI 1 dx)
        (const_int 126 [0x7e])) t3.c:31 89 {*movdi_internal}
     (nil))
(insn 81 80 82 2 (set (reg:SI 4 si)
        (const_int 0 [0])) t3.c:31 90 {*movsi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 D.4954 ] [102])) t3.c:31 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fd50512a438 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) t3.c:31 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 84 83 85 2 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:32 89 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg/f:DI 0 ax [orig:103 D.4950 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [135]) [0 *bitvector_7(D)+0 S8 A64])) t3.c:32 89 {*movdi_internal}
     (nil))
(insn 86 85 87 2 (set (reg/f:DI 1 dx [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -480 [0xfffffffffffffe20])) [0 bitvector+0 S8 A64])) t3.c:32 89 {*movdi_internal}
     (nil))
(insn 87 86 88 2 (set (reg/f:DI 1 dx [orig:104 D.4950 ] [104])
        (mem/f:DI (reg/f:DI 1 dx [136]) [0 *bitvector_7(D)+0 S8 A64])) t3.c:32 89 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:QI 1 dx [orig:105 D.4953 ] [105])
        (mem:QI (reg/f:DI 1 dx [orig:104 D.4950 ] [104]) [0 *_42+0 S1 A8])) t3.c:32 93 {*movqi_internal}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:QI 1 dx [orig:106 D.4953 ] [106])
                (ior:QI (reg:QI 1 dx [orig:105 D.4953 ] [105])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:32 405 {*iorqi_1}
     (nil))
(insn 90 89 100 2 (set (mem:QI (reg/f:DI 0 ax [orig:103 D.4950 ] [103]) [0 *_41+0 S1 A8])
        (reg:QI 1 dx [orig:106 D.4953 ] [106])) t3.c:32 93 {*movqi_internal}
     (nil))
(insn 100 90 92 2 (const_int 0 [0]) t3.c:33 684 {nop}
     (nil))
(insn 92 100 93 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.4955+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [138]))
        ]) t3.c:33 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 93 92 98 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) t3.c:33 612 {*jcc_1}
     (nil)
 -> 96)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 98 93 94 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 94 98 95 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd504fa9288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) t3.c:33 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 95 94 96)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 96 95 99 4 2 "" [1 uses])
(note 99 96 101 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 101 99 0 NOTE_INSN_DELETED)

;; Function find_zero_bit (find_zero_bit, funcdef_no=3, decl_uid=4429, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=122 from oldreg=113, assigning class GENERAL_REGS to r122
   56: {r122:SI=r122:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  101: r122:SI=r98:SI
    Inserting insn reload after:
  102: r113:SI=r122:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 64:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 76:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 92: point = 0
   Insn 91: point = 0
   Insn 87: point = 1
  BB 8
   Insn 98: point = 4
   Insn 49: point = 4
  BB 13
   Insn 84: point = 5
  BB 12
   Insn 82: point = 6
   Insn 81: point = 6
   Insn 80: point = 7
  BB 4
   Insn 94: point = 8
   Insn 22: point = 8
   Insn 21: point = 9
  BB 3
   Insn 18: point = 10
  BB 2
   Insn 16: point = 10
   Insn 15: point = 10
   Insn 14: point = 11
   Insn 13: point = 12
   Insn 12: point = 13
   Insn 11: point = 14
   Insn 10: point = 15
   Insn 6: point = 16
   Insn 5: point = 16
   Insn 4: point = 16
   Insn 3: point = 16
   Insn 2: point = 16
  BB 11
   Insn 76: point = 16
  BB 10
   Insn 73: point = 16
   Insn 72: point = 16
   Insn 70: point = 17
   Insn 69: point = 19
  BB 6
   Insn 96: point = 20
  BB 9
   Insn 66: point = 20
   Insn 65: point = 21
   Insn 64: point = 22
   Insn 63: point = 24
   Insn 62: point = 26
   Insn 61: point = 27
   Insn 60: point = 28
   Insn 59: point = 29
   Insn 58: point = 31
   Insn 57: point = 33
   Insn 102: point = 35
	Hard reg 1 is preferable by r122 with profit 1
   Insn 56: point = 37
   Insn 101: point = 37
   Insn 55: point = 38
   Insn 54: point = 40
  BB 7
   Insn 47: point = 41
   Insn 46: point = 41
   Insn 45: point = 42
   Insn 44: point = 44
   Insn 43: point = 46
   Insn 42: point = 47
   Insn 41: point = 49
   Insn 40: point = 51
   Insn 39: point = 53
   Insn 38: point = 54
   Insn 37: point = 56
  BB 5
   Insn 32: point = 57
   Insn 31: point = 57
   Insn 30: point = 58
   Insn 29: point = 60
   Insn 28: point = 62
   Insn 27: point = 63
   Insn 26: point = 65
 r87: [2..5]
 r88: [61..63]
 r89: [59..60]
 r90: [57..58]
 r91: [16..17]
 r92: [52..54]
 r93: [50..51]
 r94: [48..49]
 r95: [43..47]
 r96: [43..44]
 r97: [41..42]
 r98: [34..38]
 r99: [27..29]
 r100: [23..24]
 r101: [20..22]
 r102: [0..1]
 r103: [14..15]
 r104: [12..13]
 r105: [10..11]
 r106: [8..9]
 r107: [64..65]
 r108: [61..62]
 r109: [55..56]
 r110: [52..53]
 r111: [45..46]
 r112: [39..40]
 r113: [34..35]
 r114: [32..33]
 r115: [30..31]
 r116: [27..28]
 r117: [25..26]
 r118: [20..21]
 r119: [18..19]
 r120: [6..7]
 r122: [36..37]
Compressing live ranges: from 66 to 58 - 87%
Ranges after the compression:
 r87: [2..3]
 r88: [54..55]
 r89: [52..53]
 r90: [50..51]
 r91: [14..15]
 r92: [46..47]
 r93: [44..45]
 r94: [42..43]
 r95: [38..41]
 r96: [38..39]
 r97: [36..37]
 r98: [30..33]
 r99: [24..25]
 r100: [20..21]
 r101: [18..19]
 r102: [0..1]
 r103: [12..13]
 r104: [10..11]
 r105: [8..9]
 r106: [6..7]
 r107: [56..57]
 r108: [54..55]
 r109: [48..49]
 r110: [46..47]
 r111: [40..41]
 r112: [34..35]
 r113: [30..31]
 r114: [28..29]
 r115: [26..27]
 r116: [24..25]
 r117: [22..23]
 r118: [18..19]
 r119: [16..17]
 r120: [4..5]
 r122: [32..33]

********** Assignment #1: **********

	 Assigning to 122 (cl=GENERAL_REGS, orig=113, freq=3, tfirst=122, tfreq=3)...
	   Assign 1 to reload r122 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 84
changing reg in insn 49
changing reg in insn 87
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 70
changing reg in insn 72
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 55
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 87
changing reg in insn 91
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 80
changing reg in insn 81
deleting insn with uid = 102.
starting the processing of deferred insns
ending the processing of deferred insns


find_zero_bit

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8]
;;  ref usage 	r0={31d,31u} r1={8d,8u,2e} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,41u} r7={1d,14u} r17={13d,5u} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} 
;;    total ref usage 176{68d,104u,4e} in 63{63 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 103 104 105
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])
        (reg:DI 5 di [ bitvector ])) t3.c:36 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 bitvector_len+0 S4 A32])
        (reg:SI 4 si [ bitvector_len ])) t3.c:36 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 start_index+0 S4 A32])
        (reg:SI 1 dx [ start_index ])) t3.c:36 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 offset+0 S8 A64])
        (reg:DI 2 cx [ offset ])) t3.c:36 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])
        (reg:DI 37 r8 [ mask ])) t3.c:36 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])) t3.c:38 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem:SI (reg/f:DI 0 ax [103]) [0 *mask_9(D)+0 S4 A32])
        (const_int 128 [0x80])) t3.c:38 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 offset+0 S8 A64])) t3.c:39 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem:SI (reg/f:DI 0 ax [104]) [0 *offset_11(D)+0 S4 A32])
        (const_int 0 [0])) t3.c:39 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 start_index+0 S4 A32])) t3.c:40 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [105])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 bitvector_len+0 S4 A32]))) t3.c:40 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) t3.c:40 612 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 start_index+0 S4 A32])
        (const_int 0 [0])) t3.c:41 90 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 106
(code_label 19 18 20 4 4 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 start_index+0 S4 A32])) t3.c:42 90 {*movsi_internal}
     (nil))
(insn 22 21 94 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (reg:SI 0 ax [106])) t3.c:42 90 {*movsi_internal}
     (nil))
(jump_insn 94 22 95 4 (set (pc)
        (label_ref 77)) t3.c:42 654 {jump}
     (nil)
 -> 77)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 95 94 79)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 107 108
(code_label 79 95 25 5 11 "" [1 uses])
(note 25 79 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) t3.c:43 90 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 1 dx [orig:88 D.4959 ] [88])
        (sign_extend:DI (reg:SI 0 ax [107]))) t3.c:43 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:43 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.4960 ] [89])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:88 D.4959 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:43 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.4959 ] [88]))
        (nil)))
(insn 30 29 31 5 (set (reg:QI 0 ax [orig:90 D.4961 ] [90])
        (mem:QI (reg/f:DI 0 ax [orig:89 D.4960 ] [89]) [0 *_19+0 S1 A8])) t3.c:43 93 {*movqi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 D.4961 ] [90])
            (const_int -1 [0xffffffffffffffff]))) t3.c:43 5 {*cmpqi_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) t3.c:43 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 33 32 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 96 33 97 6 (set (pc)
        (label_ref 67)) t3.c:45 654 {jump}
     (nil)
 -> 67)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 71)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 96 97 109 110 111
(code_label 71 97 36 7 10 "" [1 uses])
(note 36 71 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) t3.c:46 90 {*movsi_internal}
     (nil))
(insn 38 37 39 7 (set (reg:DI 1 dx [orig:92 D.4959 ] [92])
        (sign_extend:DI (reg:SI 0 ax [109]))) t3.c:46 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 7 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:46 89 {*movdi_internal}
     (nil))
(insn 40 39 41 7 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.4960 ] [93])
                (plus:DI (reg/f:DI 0 ax [110])
                    (reg:DI 1 dx [orig:92 D.4959 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.4959 ] [92]))
        (nil)))
(insn 41 40 42 7 (set (reg:QI 0 ax [orig:94 D.4961 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 D.4960 ] [93]) [0 *_24+0 S1 A8])) t3.c:46 93 {*movqi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:SI 1 dx [orig:95 D.4958 ] [95])
        (zero_extend:SI (reg:QI 0 ax [orig:94 D.4961 ] [94]))) t3.c:46 138 {*zero_extendqisi2}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])) t3.c:46 89 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:SI 0 ax [orig:96 D.4958 ] [96])
        (mem:SI (reg/f:DI 0 ax [111]) [0 *mask_9(D)+0 S4 A32])) t3.c:46 90 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg:SI 0 ax [orig:97 D.4958 ] [97])
                (and:SI (reg:SI 0 ax [orig:96 D.4958 ] [96])
                    (reg:SI 1 dx [orig:95 D.4958 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:46 381 {*andsi_1}
     (nil))
(insn 46 45 47 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.4958 ] [97])
            (const_int 0 [0]))) t3.c:46 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) t3.c:46 612 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 98 8 (set (reg:SI 0 ax [orig:87 D.4958 ] [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) t3.c:47 90 {*movsi_internal}
     (nil))
(jump_insn 98 49 99 8 (set (pc)
        (label_ref 85)) t3.c:47 654 {jump}
     (nil)
 -> 85)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 99 98 52)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 112 113 114 115 116 117 118
(code_label 52 99 53 9 8 "" [1 uses])
(note 53 52 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])) t3.c:49 89 {*movdi_internal}
     (nil))
(insn 55 54 101 9 (set (reg:SI 0 ax [orig:98 D.4958 ] [98])
        (mem:SI (reg/f:DI 0 ax [112]) [0 *mask_9(D)+0 S4 A32])) t3.c:49 90 {*movsi_internal}
     (nil))
(insn 101 55 56 9 (set (reg:SI 1 dx [113])
        (reg:SI 0 ax [orig:98 D.4958 ] [98])) t3.c:49 90 {*movsi_internal}
     (nil))
(insn 56 101 57 9 (parallel [
            (set (reg:SI 1 dx [113])
                (lshiftrt:SI (reg:SI 1 dx [113])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:49 544 {*lshrsi3_1}
     (nil))
(insn 57 56 58 9 (parallel [
            (set (reg:SI 0 ax [114])
                (plus:SI (reg:SI 0 ax [orig:98 D.4958 ] [98])
                    (reg:SI 1 dx [113])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:49 217 {*addsi_1}
     (nil))
(insn 58 57 59 9 (parallel [
            (set (reg:SI 0 ax [115])
                (ashiftrt:SI (reg:SI 0 ax [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:49 545 {*ashrsi3_1}
     (nil))
(insn 59 58 60 9 (set (reg:SI 1 dx [orig:99 D.4958 ] [99])
        (reg:SI 0 ax [115])) t3.c:49 90 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])) t3.c:49 89 {*movdi_internal}
     (nil))
(insn 61 60 62 9 (set (mem:SI (reg/f:DI 0 ax [116]) [0 *mask_9(D)+0 S4 A32])
        (reg:SI 1 dx [orig:99 D.4958 ] [99])) t3.c:49 90 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 offset+0 S8 A64])) t3.c:50 89 {*movdi_internal}
     (nil))
(insn 63 62 64 9 (set (reg:SI 0 ax [orig:100 D.4958 ] [100])
        (mem:SI (reg/f:DI 0 ax [117]) [0 *offset_11(D)+0 S4 A32])) t3.c:50 90 {*movsi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg:SI 1 dx [orig:101 D.4958 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 D.4958 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:50 217 {*addsi_1}
     (nil))
(insn 65 64 66 9 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 offset+0 S8 A64])) t3.c:50 89 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (mem:SI (reg/f:DI 0 ax [118]) [0 *offset_11(D)+0 S4 A32])
        (reg:SI 1 dx [orig:101 D.4958 ] [101])) t3.c:50 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 119
(code_label 67 66 68 10 7 "" [1 uses])
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 mask+0 S8 A64])) t3.c:45 89 {*movdi_internal}
     (nil))
(insn 70 69 72 10 (set (reg:SI 0 ax [orig:91 D.4958 ] [91])
        (mem:SI (reg/f:DI 0 ax [119]) [0 *mask_9(D)+0 S4 A32])) t3.c:45 90 {*movsi_internal}
     (nil))
(insn 72 70 73 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.4958 ] [91])
            (const_int 0 [0]))) t3.c:45 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) t3.c:45 612 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       7
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 74 73 75 11 6 "" [1 uses])
(note 75 74 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:42 217 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120
(code_label 77 76 78 12 5 "" [1 uses])
(note 78 77 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 80 78 81 12 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) t3.c:42 90 {*movsi_internal}
     (nil))
(insn 81 80 82 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [120])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 bitvector_len+0 S4 A32]))) t3.c:42 7 {*cmpsi_1}
     (nil))
(jump_insn 82 81 83 12 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) t3.c:42 612 {*jcc_1}
     (nil)
 -> 79)
;;  succ:       5
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 83 82 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 13 (set (reg:SI 0 ax [orig:87 D.4958 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:54 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              8 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 102
(code_label 85 84 86 14 9 "" [1 uses])
(note 86 85 87 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 91 14 (set (reg:SI 0 ax [orig:102 <retval> ] [102])
        (reg:SI 0 ax [orig:87 D.4958 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 91 87 92 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:102 <retval> ] [102])) t3.c:55 90 {*movsi_internal}
     (nil))
(insn 92 91 100 14 (use (reg/i:SI 0 ax)) t3.c:55 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 100 92 0 NOTE_INSN_DELETED)

;; Function convert_index_to_block_number (convert_index_to_block_number, funcdef_no=4, decl_uid=4441, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 29: point = 1
  BB 3
   Insn 36: point = 4
   Insn 21: point = 4
  BB 4
   Insn 26: point = 5
  BB 2
   Insn 19: point = 6
   Insn 18: point = 6
   Insn 17: point = 7
   Insn 16: point = 9
   Insn 15: point = 10
   Insn 14: point = 11
   Insn 13: point = 13
   Insn 9: point = 14
   Insn 8: point = 16
   Insn 4: point = 17
   Insn 3: point = 17
   Insn 2: point = 17
 r87: [2..5]
 r88: [12..14]
 r89: [6..7]
 r90: [0..1]
 r91: [15..16]
 r94: [10..11]
 r95: [12..13]
 r96: [8..9]
Compressing live ranges: from 17 to 14 - 82%
Ranges after the compression:
 r87: [2..3]
 r88: [10..11]
 r89: [4..5]
 r90: [0..1]
 r91: [12..13]
 r94: [8..9]
 r95: [10..11]
 r96: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 21
changing reg in insn 29
changing reg in insn 9
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 29
changing reg in insn 33
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns


convert_index_to_block_number

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={10d,9u} r1={2d,2u,1e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,14u} r7={1d,5u} r17={4d,1u} r20={1d,1u,3e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 70{32d,34u,4e} in 18{18 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 91 94 95 96
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 bitvector_len+0 S4 A32])
        (reg:SI 5 di [ bitvector_len ])) t3.c:57 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector_index+0 S4 A32])
        (reg:SI 4 si [ bitvector_index ])) t3.c:57 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_offset+0 S4 A32])
        (reg:SI 1 dx [ index_offset ])) t3.c:57 90 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector_index+0 S4 A32])) t3.c:58 90 {*movsi_internal}
     (nil))
(insn 9 8 13 2 (parallel [
            (set (reg:SI 1 dx [orig:88 D.4962 ] [88])
                (ashift:SI (reg:SI 0 ax [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:58 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 bitvector_index+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 13 9 14 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_offset+0 S4 A32])) t3.c:58 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [94])
                (plus:SI (reg:SI 0 ax [95])
                    (reg:SI 1 dx [orig:88 D.4962 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:58 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:88 D.4962 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 index_offset+0 S4 A32]))
        (nil)))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 blockNumber+0 S4 A32])
        (reg:SI 0 ax [94])) t3.c:58 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 bitvector_len+0 S4 A32])) t3.c:59 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 0 ax [orig:89 D.4962 ] [89])
                (ashift:SI (reg:SI 0 ax [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:59 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 bitvector_len+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 18 17 19 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.4962 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 blockNumber+0 S4 A32]))) t3.c:59 7 {*cmpsi_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) t3.c:59 612 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 36 3 (set (reg:SI 0 ax [orig:87 D.4962 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:60 90 {*movsi_internal}
     (nil))
(jump_insn 36 21 37 3 (set (pc)
        (label_ref 27)) t3.c:60 654 {jump}
     (nil)
 -> 27)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 37 36 24)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 24 37 25 4 13 "" [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:87 D.4962 ] [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 blockNumber+0 S4 A32])) t3.c:62 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 90
(code_label 27 26 28 5 14 "" [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 33 5 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:87 D.4962 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 33 29 34 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) t3.c:63 90 {*movsi_internal}
     (nil))
(insn 34 33 38 5 (use (reg/i:SI 0 ax)) t3.c:63 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 38 34 0 NOTE_INSN_DELETED)

;; Function convert_block_number_to_index (convert_block_number_to_index, funcdef_no=5, decl_uid=4447, cgraph_uid=5, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=111 from oldreg=105, assigning class GENERAL_REGS to r111
   30: {r111:SI=r111:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   57: r111:SI=r87:SI
    Inserting insn reload after:
   58: r105:SI=r111:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 52: point = 0
   Insn 51: point = 0
   Insn 47: point = 1
   Insn 44: point = 3
  BB 4
   Insn 42: point = 4
   Insn 41: point = 4
   Insn 40: point = 5
  BB 2
   Insn 54: point = 6
   Insn 24: point = 6
   Insn 23: point = 6
   Insn 22: point = 7
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 11
   Insn 18: point = 13
   Insn 17: point = 15
   Insn 16: point = 17
   Insn 15: point = 18
   Insn 14: point = 19
   Insn 13: point = 20
   Insn 12: point = 22
   Insn 11: point = 23
   Insn 10: point = 23
   Insn 9: point = 24
   Insn 8: point = 26
   Insn 4: point = 27
   Insn 3: point = 27
   Insn 2: point = 27
  BB 3
   Insn 36: point = 27
   Insn 35: point = 27
   Insn 34: point = 28
   Insn 33: point = 29
   Insn 32: point = 31
   Insn 31: point = 33
   Insn 58: point = 35
	Hard reg 1 is preferable by r111 with profit 1
   Insn 30: point = 37
   Insn 57: point = 37
   Insn 29: point = 38
   Insn 28: point = 40
 r87: [34..38]
 r88: [27..29]
 r89: [2..3]
 r90: [0..1]
 r92: [25..26]
 r93: [21..24]
 r94: [22..23]
 r95: [19..20]
 r97: [14..18]
 r98: [16..17]
 r99: [10..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [6..7]
 r104: [39..40]
 r105: [34..35]
 r106: [32..33]
 r107: [30..31]
 r108: [27..28]
 r109: [4..5]
 r111: [36..37]
Compressing live ranges: from 41 to 36 - 87%
Ranges after the compression:
 r87: [30..33]
 r88: [24..25]
 r89: [2..3]
 r90: [0..1]
 r92: [22..23]
 r93: [20..21]
 r94: [20..21]
 r95: [18..19]
 r97: [14..17]
 r98: [16..17]
 r99: [10..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [6..7]
 r104: [34..35]
 r105: [30..31]
 r106: [28..29]
 r107: [26..27]
 r108: [24..25]
 r109: [4..5]
 r111: [32..33]

********** Assignment #1: **********

	 Assigning to 111 (cl=GENERAL_REGS, orig=105, freq=3, tfirst=111, tfreq=3)...
	   Assign 1 to reload r111 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 33
changing reg in insn 35
changing reg in insn 44
changing reg in insn 47
changing reg in insn 47
changing reg in insn 51
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 9
changing reg in insn 13
changing reg in insn 12
changing reg in insn 11
changing reg in insn 10
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 40
changing reg in insn 41
deleting insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns


convert_block_number_to_index

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={19d,23u} r1={7d,8u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,21u} r7={1d,5u} r17={13d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 117{55d,62u,0e} in 38{38 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 95 97 98 99 100 101 102 103
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 bitvector_len+0 S4 A32])
        (reg:SI 5 di [ bitvector_len ])) t3.c:65 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 blockNumber+0 S4 A32])
        (reg:SI 4 si [ blockNumber ])) t3.c:65 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S8 A64])
        (reg:DI 1 dx [ mask ])) t3.c:65 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 blockNumber+0 S4 A32])) t3.c:66 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [93])
        (reg:SI 0 ax [92])) t3.c:66 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 1 dx [94])
                (plus:SI (reg:SI 0 ax [93])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:66 217 {*addsi_1}
     (nil))
(insn 11 10 12 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [93])
            (const_int 0 [0]))) t3.c:66 3 {*cmpsi_ccno_1}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [93])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [94])
            (reg:SI 0 ax [93]))) t3.c:66 953 {*movsicc_noc}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [95])
                (ashiftrt:SI (reg:SI 0 ax [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:66 545 {*ashrsi3_1}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 bitvector_index+0 S4 A32])
        (reg:SI 0 ax [95])) t3.c:66 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 blockNumber+0 S4 A32])) t3.c:67 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 1 dx [98])
                (ashiftrt:SI (reg:SI 0 ax [97])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:67 538 {ashrsi3_cvt}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 1 dx [99])
                (lshiftrt:SI (reg:SI 1 dx [98])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:67 544 {*lshrsi3_1}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 0 ax [100])
                (plus:SI (reg:SI 0 ax [97])
                    (reg:SI 1 dx [99])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:67 217 {*addsi_1}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [101])
                (and:SI (reg:SI 0 ax [100])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:67 381 {*andsi_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [102])
                (minus:SI (reg:SI 0 ax [101])
                    (reg:SI 1 dx [99])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:67 260 {*subsi_1}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 bitvector_offset+0 S4 A32])
        (reg:SI 0 ax [102])) t3.c:67 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S8 A64])) t3.c:68 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (mem:SI (reg/f:DI 0 ax [103]) [0 *mask_7(D)+0 S4 A32])
        (const_int 128 [0x80])) t3.c:68 90 {*movsi_internal}
     (nil))
(insn 24 23 54 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) t3.c:70 90 {*movsi_internal}
     (nil))
(jump_insn 54 24 55 2 (set (pc)
        (label_ref 37)) t3.c:70 654 {jump}
     (nil)
 -> 37)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 55 54 39)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 104 105 106 107 108
(code_label 39 55 27 3 17 "" [1 uses])
(note 27 39 28 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 3 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S8 A64])) t3.c:71 89 {*movdi_internal}
     (nil))
(insn 29 28 57 3 (set (reg:SI 0 ax [orig:87 D.4963 ] [87])
        (mem:SI (reg/f:DI 0 ax [104]) [0 *mask_7(D)+0 S4 A32])) t3.c:71 90 {*movsi_internal}
     (nil))
(insn 57 29 30 3 (set (reg:SI 1 dx [105])
        (reg:SI 0 ax [orig:87 D.4963 ] [87])) t3.c:71 90 {*movsi_internal}
     (nil))
(insn 30 57 31 3 (parallel [
            (set (reg:SI 1 dx [105])
                (lshiftrt:SI (reg:SI 1 dx [105])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:71 544 {*lshrsi3_1}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 0 ax [106])
                (plus:SI (reg:SI 0 ax [orig:87 D.4963 ] [87])
                    (reg:SI 1 dx [105])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:71 217 {*addsi_1}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:SI 0 ax [107])
                (ashiftrt:SI (reg:SI 0 ax [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:71 545 {*ashrsi3_1}
     (nil))
(insn 33 32 34 3 (set (reg:SI 1 dx [orig:88 D.4963 ] [88])
        (reg:SI 0 ax [107])) t3.c:71 90 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S8 A64])) t3.c:71 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (mem:SI (reg/f:DI 0 ax [108]) [0 *mask_7(D)+0 S4 A32])
        (reg:SI 1 dx [orig:88 D.4963 ] [88])) t3.c:71 90 {*movsi_internal}
     (nil))
(insn 36 35 37 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:70 217 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109
(code_label 37 36 38 4 16 "" [1 uses])
(note 38 37 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 41 4 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) t3.c:70 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 bitvector_offset+0 S4 A32]))) t3.c:70 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) t3.c:70 612 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 89 90
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 47 5 (set (reg:SI 0 ax [orig:89 D.4963 ] [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 bitvector_index+0 S4 A32])) t3.c:73 90 {*movsi_internal}
     (nil))
(insn 47 44 51 5 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:89 D.4963 ] [89])) t3.c:73 90 {*movsi_internal}
     (nil))
(insn 51 47 52 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) t3.c:74 90 {*movsi_internal}
     (nil))
(insn 52 51 56 5 (use (reg/i:SI 0 ax)) t3.c:74 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 56 52 0 NOTE_INSN_DELETED)

;; Function flip_bit (flip_bit, funcdef_no=6, decl_uid=4457, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*iorsi_1}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0
   Insn 15: point = 0
   Insn 11: point = 1
   Insn 8: point = 3
   Insn 7: point = 5
   Insn 3: point = 6
   Insn 2: point = 6
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns


flip_bit

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r17={1d} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 41{23d,16u,2e} in 7{7 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 byte+0 S4 A32])
        (reg:SI 5 di [ byte ])) t3.c:76 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 mask+0 S4 A32])
        (reg:SI 4 si [ mask ])) t3.c:76 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 byte+0 S4 A32])) t3.c:77 90 {*movsi_internal}
     (nil))
(insn 8 7 11 2 (parallel [
            (set (reg:SI 0 ax [orig:87 D.4964 ] [87])
                (ior:SI (reg:SI 0 ax [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 mask+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:77 399 {*iorsi_1}
     (expr_list:REG_EQUAL (ior:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 byte+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 mask+0 S4 A32]))
        (nil)))
(insn 11 8 15 2 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:87 D.4964 ] [87])) t3.c:77 90 {*movsi_internal}
     (nil))
(insn 15 11 16 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) t3.c:78 90 {*movsi_internal}
     (nil))
(insn 16 15 18 2 (use (reg/i:SI 0 ax)) t3.c:78 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 16 0 NOTE_INSN_DELETED)

;; Function create_file (create_file, funcdef_no=7, decl_uid=4464, cgraph_uid=7, symbol_order=7)

      Creating newreg=219
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=220
Removing SCRATCH in insn #245 (nop 3)
rescanning insn with uid = 245.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r219
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 53:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=221 from oldreg=153, assigning class GENERAL_REGS to r221
   64: {r221:DI=r221:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  261: r221:DI=r151:DI
    Inserting insn reload after:
  262: r153:DI=r221:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=222 from oldreg=158, assigning class GENERAL_REGS to r222
   74: {r222:DI=r222:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  263: r222:DI=r156:DI
    Inserting insn reload after:
  264: r158:DI=r222:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 78:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=223 from oldreg=164, assigning class GENERAL_REGS to r223
   88: {r223:DI=r223:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  265: r223:DI=r162:DI
    Inserting insn reload after:
  266: r164:DI=r223:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 95:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=224 from oldreg=169, assigning class GENERAL_REGS to r224
  101: {r224:DI=r224:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  267: r224:DI=r167:DI
    Inserting insn reload after:
  268: r169:DI=r224:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 102
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=225 from oldreg=174, assigning class GENERAL_REGS to r225
  114: {r225:DI=r225:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  269: r225:DI=r172:DI
    Inserting insn reload after:
  270: r174:DI=r225:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 121:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=226 from oldreg=179, assigning class GENERAL_REGS to r226
  130: {r226:DI=r226:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  271: r226:DI=r177:DI
    Inserting insn reload after:
  272: r179:DI=r226:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=227 from oldreg=184, assigning class GENERAL_REGS to r227
  144: {r227:DI=r227:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  273: r227:DI=r182:DI
    Inserting insn reload after:
  274: r184:DI=r227:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=228 from oldreg=189, assigning class GENERAL_REGS to r228
  156: {r228:DI=r228:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  275: r228:DI=r187:DI
    Inserting insn reload after:
  276: r189:DI=r228:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 165:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 167:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 207:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=229 from oldreg=206, assigning class GENERAL_REGS to r229
  207: {r229:DI=r229:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  277: r229:DI=r204:DI
    Inserting insn reload after:
  278: r206:DI=r229:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 208
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=230 from oldreg=211, assigning class GENERAL_REGS to r230
  217: {r230:DI=r230:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  279: r230:DI=r209:DI
    Inserting insn reload after:
  280: r211:DI=r230:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r220
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 11
   Insn 247: point = 0
  BB 12
   Insn 250: point = 0
  BB 10
   Insn 246: point = 0
   Insn 245: point = 0
   Insn 244: point = 1
   Insn 240: point = 2
  BB 8
   Insn 258: point = 5
   Insn 197: point = 5
   Insn 196: point = 6
   Insn 195: point = 6
   Insn 194: point = 6
   Insn 193: point = 6
   Insn 192: point = 7
  BB 3
   Insn 254: point = 8
   Insn 32: point = 8
   Insn 31: point = 9
   Insn 30: point = 9
  BB 9
   Insn 235: point = 9
   Insn 234: point = 10
   Insn 233: point = 10
   Insn 232: point = 10
   Insn 231: point = 10
   Insn 230: point = 11
   Insn 229: point = 12
   Insn 228: point = 13
   Insn 227: point = 14
   Insn 226: point = 15
   Insn 225: point = 16
   Insn 224: point = 17
   Insn 223: point = 18
   Insn 222: point = 19
   Insn 221: point = 21
   Insn 220: point = 22
   Insn 219: point = 24
   Insn 218: point = 25
   Insn 280: point = 27
	Hard reg 1 is preferable by r230 with profit 1
   Insn 217: point = 29
   Insn 279: point = 29
   Insn 216: point = 30
   Insn 215: point = 32
   Insn 214: point = 34
   Insn 213: point = 36
   Insn 212: point = 38
   Insn 211: point = 39
   Insn 210: point = 40
   Insn 209: point = 42
   Insn 208: point = 43
   Insn 278: point = 45
	Hard reg 1 is preferable by r229 with profit 1
   Insn 207: point = 47
   Insn 277: point = 47
   Insn 206: point = 48
   Insn 205: point = 50
   Insn 204: point = 52
   Insn 203: point = 54
   Insn 202: point = 56
  BB 7
   Insn 190: point = 57
   Insn 189: point = 57
   Insn 188: point = 57
   Insn 187: point = 58
   Insn 186: point = 59
   Insn 185: point = 59
   Insn 184: point = 60
   Insn 183: point = 61
   Insn 182: point = 62
   Insn 181: point = 63
   Insn 180: point = 64
   Insn 179: point = 65
   Insn 178: point = 66
   Insn 177: point = 67
   Insn 176: point = 67
   Insn 175: point = 68
   Insn 174: point = 69
   Insn 173: point = 70
   Insn 172: point = 71
   Insn 171: point = 72
   Insn 170: point = 73
   Insn 169: point = 74
   Insn 168: point = 75
   Insn 167: point = 76
   Insn 166: point = 77
   Insn 165: point = 77
   Insn 164: point = 78
   Insn 163: point = 80
   Insn 162: point = 81
   Insn 161: point = 83
   Insn 160: point = 84
   Insn 159: point = 85
   Insn 158: point = 87
   Insn 157: point = 88
   Insn 276: point = 90
	Hard reg 1 is preferable by r228 with profit 1
   Insn 156: point = 92
   Insn 275: point = 92
   Insn 155: point = 93
   Insn 154: point = 95
   Insn 153: point = 97
   Insn 152: point = 99
   Insn 151: point = 101
  BB 5
   Insn 256: point = 102
   Insn 134: point = 102
   Insn 133: point = 103
   Insn 132: point = 105
   Insn 131: point = 106
   Insn 272: point = 108
	Hard reg 1 is preferable by r226 with profit 1
   Insn 130: point = 110
   Insn 271: point = 110
   Insn 129: point = 111
   Insn 128: point = 113
   Insn 127: point = 115
   Insn 126: point = 117
   Insn 125: point = 119
  BB 6
   Insn 148: point = 120
   Insn 147: point = 121
   Insn 146: point = 123
   Insn 145: point = 124
   Insn 274: point = 126
	Hard reg 1 is preferable by r227 with profit 1
   Insn 144: point = 128
   Insn 273: point = 128
   Insn 143: point = 129
   Insn 142: point = 131
   Insn 141: point = 133
   Insn 140: point = 135
   Insn 139: point = 137
  BB 4
   Insn 123: point = 138
   Insn 122: point = 138
   Insn 121: point = 138
   Insn 120: point = 139
   Insn 119: point = 140
   Insn 118: point = 140
   Insn 117: point = 140
   Insn 116: point = 142
   Insn 115: point = 143
   Insn 270: point = 145
	Hard reg 1 is preferable by r225 with profit 1
   Insn 114: point = 147
   Insn 269: point = 147
   Insn 113: point = 148
   Insn 112: point = 150
   Insn 111: point = 152
   Insn 110: point = 154
   Insn 109: point = 156
   Insn 108: point = 157
   Insn 107: point = 158
   Insn 106: point = 159
   Insn 105: point = 159
   Insn 104: point = 159
   Insn 103: point = 161
   Insn 102: point = 162
   Insn 268: point = 164
	Hard reg 1 is preferable by r224 with profit 1
   Insn 101: point = 166
   Insn 267: point = 166
   Insn 100: point = 167
   Insn 99: point = 169
   Insn 98: point = 171
   Insn 97: point = 173
   Insn 96: point = 175
   Insn 95: point = 176
   Insn 94: point = 177
   Insn 93: point = 178
   Insn 92: point = 178
   Insn 91: point = 178
   Insn 90: point = 180
   Insn 89: point = 181
   Insn 266: point = 183
	Hard reg 1 is preferable by r223 with profit 1
   Insn 88: point = 185
   Insn 265: point = 185
   Insn 87: point = 186
   Insn 86: point = 188
   Insn 85: point = 190
   Insn 84: point = 192
   Insn 83: point = 194
   Insn 82: point = 195
   Insn 81: point = 195
   Insn 80: point = 196
   Insn 79: point = 197
   Insn 78: point = 198
   Insn 77: point = 200
   Insn 76: point = 202
   Insn 75: point = 203
   Insn 264: point = 205
	Hard reg 1 is preferable by r222 with profit 1
   Insn 74: point = 207
   Insn 263: point = 207
   Insn 73: point = 208
   Insn 72: point = 210
   Insn 71: point = 212
   Insn 70: point = 214
   Insn 69: point = 216
   Insn 68: point = 217
   Insn 67: point = 218
   Insn 66: point = 220
   Insn 65: point = 221
   Insn 262: point = 223
	Hard reg 1 is preferable by r221 with profit 1
   Insn 64: point = 225
   Insn 261: point = 225
   Insn 63: point = 226
   Insn 62: point = 228
   Insn 61: point = 230
   Insn 60: point = 232
   Insn 59: point = 234
   Insn 58: point = 235
   Insn 57: point = 236
   Insn 56: point = 238
   Insn 55: point = 239
   Insn 54: point = 241
   Insn 53: point = 242
   Insn 52: point = 243
   Insn 51: point = 245
   Insn 50: point = 246
   Insn 49: point = 246
   Insn 48: point = 247
   Insn 47: point = 248
   Insn 46: point = 250
   Insn 45: point = 252
   Insn 44: point = 254
   Insn 43: point = 255
   Insn 42: point = 257
   Insn 41: point = 258
   Insn 40: point = 259
   Insn 39: point = 261
   Insn 38: point = 262
   Insn 37: point = 264
  BB 2
   Insn 28: point = 265
   Insn 27: point = 265
   Insn 26: point = 265
   Insn 25: point = 266
   Insn 24: point = 267
   Insn 23: point = 268
   Insn 22: point = 269
   Insn 21: point = 269
   Insn 20: point = 270
   Insn 19: point = 271
   Insn 18: point = 271
   Insn 17: point = 272
   Insn 16: point = 273
   Insn 15: point = 274
   Insn 14: point = 275
   Insn 13: point = 276
   Insn 12: point = 277
   Insn 11: point = 277
   Insn 8: point = 277
   Insn 6: point = 279
   Insn 5: point = 279
   Insn 4: point = 279
   Insn 3: point = 279
   Insn 2: point = 279
 r87: [8..9] [3..5]
 r88: [260..262]
 r89: [242..259]
 r90: [247..258]
 r91: [253..255]
 r92: [251..252]
 r93: [249..250]
 r94: [246..248]
 r95: [244..245]
 r96: [242..243]
 r97: [237..239]
 r98: [237..238]
 r99: [231..232]
 r100: [219..221]
 r101: [217..218]
 r102: [213..214]
 r103: [201..203]
 r104: [199..200]
 r105: [195..198]
 r106: [191..192]
 r107: [179..181]
 r108: [176..178]
 r109: [176..177]
 r110: [172..173]
 r111: [160..162]
 r112: [157..159]
 r113: [157..158]
 r114: [153..154]
 r115: [141..143]
 r116: [138..140]
 r117: [138..139]
 r118: [116..117]
 r119: [104..106]
 r120: [102..103]
 r121: [134..135]
 r122: [122..124]
 r123: [120..121]
 r124: [98..99]
 r125: [86..88]
 r126: [84..85]
 r127: [79..81]
 r128: [77..78]
 r129: [61..64]
 r130: [53..54]
 r131: [41..43]
 r132: [39..40]
 r133: [35..36]
 r134: [23..25]
 r135: [18..22]
 r136: [18..19]
 r137: [1..2]
 r138: [272..276]
 r139: [271..275]
 r140: [270..274]
 r141: [269..273]
 r142: [267..268]
 r143: [265..266]
 r144: [263..264]
 r145: [260..261]
 r146: [256..257]
 r147: [253..254]
 r148: [240..241]
 r149: [235..236]
 r150: [233..234]
 r151: [229..230] [222..226]
 r152: [227..228]
 r153: [222..223]
 r154: [219..220]
 r155: [215..216]
 r156: [211..212] [204..208]
 r157: [209..210]
 r158: [204..205]
 r159: [201..202]
 r160: [196..197]
 r161: [193..194]
 r162: [189..190] [182..186]
 r163: [187..188]
 r164: [182..183]
 r165: [179..180]
 r166: [174..175]
 r167: [170..171] [163..167]
 r168: [168..169]
 r169: [163..164]
 r170: [160..161]
 r171: [155..156]
 r172: [151..152] [144..148]
 r173: [149..150]
 r174: [144..145]
 r175: [141..142]
 r176: [118..119]
 r177: [114..115] [107..111]
 r178: [112..113]
 r179: [107..108]
 r180: [104..105]
 r181: [136..137]
 r182: [132..133] [125..129]
 r183: [130..131]
 r184: [125..126]
 r185: [122..123]
 r186: [100..101]
 r187: [96..97] [89..93]
 r188: [94..95]
 r189: [89..90]
 r190: [86..87]
 r191: [82..83]
 r192: [79..80]
 r193: [71..76]
 r194: [70..75]
 r195: [69..74]
 r196: [68..73]
 r197: [67..72]
 r198: [65..66]
 r199: [60..63]
 r200: [59..62]
 r201: [57..58]
 r202: [6..7]
 r203: [55..56]
 r204: [51..52] [44..48]
 r205: [49..50]
 r206: [44..45]
 r207: [41..42]
 r208: [37..38]
 r209: [33..34] [26..30]
 r210: [31..32]
 r211: [26..27]
 r212: [23..24]
 r213: [20..21]
 r214: [13..17]
 r215: [12..16]
 r216: [11..15]
 r217: [10..14]
 r219: [277..278]
 r220: [0..0]
 r221: [224..225]
 r222: [206..207]
 r223: [184..185]
 r224: [165..166]
 r225: [146..147]
 r226: [109..110]
 r227: [127..128]
 r228: [91..92]
 r229: [46..47]
 r230: [28..29]
Compressing live ranges: from 279 to 221 - 79%
Ranges after the compression:
 r87: [7..8] [3..4]
 r88: [209..210]
 r89: [195..208]
 r90: [199..208]
 r91: [205..206]
 r92: [203..204]
 r93: [201..202]
 r94: [199..200]
 r95: [197..198]
 r96: [195..196]
 r97: [191..192]
 r98: [191..192]
 r99: [185..186]
 r100: [175..176]
 r101: [173..174]
 r102: [169..170]
 r103: [159..160]
 r104: [157..158]
 r105: [155..156]
 r106: [151..152]
 r107: [141..142]
 r108: [139..140]
 r109: [139..140]
 r110: [135..136]
 r111: [125..126]
 r112: [123..124]
 r113: [123..124]
 r114: [119..120]
 r115: [109..110]
 r116: [107..108]
 r117: [107..108]
 r118: [87..88]
 r119: [77..78]
 r120: [75..76]
 r121: [103..104]
 r122: [93..94]
 r123: [91..92]
 r124: [71..72]
 r125: [61..62]
 r126: [59..60]
 r127: [55..56]
 r128: [53..54]
 r129: [47..48]
 r130: [41..42]
 r131: [31..32]
 r132: [29..30]
 r133: [25..26]
 r134: [15..16]
 r135: [11..14]
 r136: [11..12]
 r137: [1..2]
 r138: [217..218]
 r139: [217..218]
 r140: [217..218]
 r141: [217..218]
 r142: [215..216]
 r143: [213..214]
 r144: [211..212]
 r145: [209..210]
 r146: [207..208]
 r147: [205..206]
 r148: [193..194]
 r149: [189..190]
 r150: [187..188]
 r151: [183..184] [177..180]
 r152: [181..182]
 r153: [177..178]
 r154: [175..176]
 r155: [171..172]
 r156: [167..168] [161..164]
 r157: [165..166]
 r158: [161..162]
 r159: [159..160]
 r160: [155..156]
 r161: [153..154]
 r162: [149..150] [143..146]
 r163: [147..148]
 r164: [143..144]
 r165: [141..142]
 r166: [137..138]
 r167: [133..134] [127..130]
 r168: [131..132]
 r169: [127..128]
 r170: [125..126]
 r171: [121..122]
 r172: [117..118] [111..114]
 r173: [115..116]
 r174: [111..112]
 r175: [109..110]
 r176: [89..90]
 r177: [85..86] [79..82]
 r178: [83..84]
 r179: [79..80]
 r180: [77..78]
 r181: [105..106]
 r182: [101..102] [95..98]
 r183: [99..100]
 r184: [95..96]
 r185: [93..94]
 r186: [73..74]
 r187: [69..70] [63..66]
 r188: [67..68]
 r189: [63..64]
 r190: [61..62]
 r191: [57..58]
 r192: [55..56]
 r193: [51..52]
 r194: [51..52]
 r195: [51..52]
 r196: [51..52]
 r197: [51..52]
 r198: [49..50]
 r199: [47..48]
 r200: [47..48]
 r201: [45..46]
 r202: [5..6]
 r203: [43..44]
 r204: [39..40] [33..36]
 r205: [37..38]
 r206: [33..34]
 r207: [31..32]
 r208: [27..28]
 r209: [23..24] [17..20]
 r210: [21..22]
 r211: [17..18]
 r212: [15..16]
 r213: [13..14]
 r214: [9..10]
 r215: [9..10]
 r216: [9..10]
 r217: [9..10]
 r219: [219..220]
 r220: [0..0]
 r221: [179..180]
 r222: [163..164]
 r223: [145..146]
 r224: [129..130]
 r225: [113..114]
 r226: [81..82]
 r227: [97..98]
 r228: [65..66]
 r229: [35..36]
 r230: [19..20]

********** Assignment #1: **********

	 Assigning to 221 (cl=GENERAL_REGS, orig=153, freq=3, tfirst=221, tfreq=3)...
	   Assign 1 to reload r221 (freq=3)
	 Assigning to 222 (cl=GENERAL_REGS, orig=158, freq=3, tfirst=222, tfreq=3)...
	   Assign 1 to reload r222 (freq=3)
	 Assigning to 223 (cl=GENERAL_REGS, orig=164, freq=3, tfirst=223, tfreq=3)...
	   Assign 1 to reload r223 (freq=3)
	 Assigning to 224 (cl=GENERAL_REGS, orig=169, freq=3, tfirst=224, tfreq=3)...
	   Assign 1 to reload r224 (freq=3)
	 Assigning to 225 (cl=GENERAL_REGS, orig=174, freq=3, tfirst=225, tfreq=3)...
	   Assign 1 to reload r225 (freq=3)
	 Assigning to 226 (cl=GENERAL_REGS, orig=179, freq=3, tfirst=226, tfreq=3)...
	   Assign 1 to reload r226 (freq=3)
	 Assigning to 227 (cl=GENERAL_REGS, orig=184, freq=3, tfirst=227, tfreq=3)...
	   Assign 1 to reload r227 (freq=3)
	 Assigning to 228 (cl=GENERAL_REGS, orig=189, freq=3, tfirst=228, tfreq=3)...
	   Assign 1 to reload r228 (freq=3)
	 Assigning to 229 (cl=GENERAL_REGS, orig=206, freq=3, tfirst=229, tfreq=3)...
	   Assign 1 to reload r229 (freq=3)
	 Assigning to 230 (cl=GENERAL_REGS, orig=211, freq=3, tfirst=230, tfreq=3)...
	   Assign 1 to reload r230 (freq=3)
	 Assigning to 219 (cl=INDEX_REGS, orig=219, freq=1, tfirst=219, tfreq=1)...
	   Assign 0 to reload r219 (freq=1)
	 Assigning to 220 (cl=INDEX_REGS, orig=220, freq=1, tfirst=220, tfreq=1)...
	   Assign 3 to reload r220 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 235
changing reg in insn 197
changing reg in insn 32
changing reg in insn 240
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 40
changing reg in insn 53
changing reg in insn 41
changing reg in insn 48
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 108
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 117
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 127
changing reg in insn 131
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 152
changing reg in insn 153
changing reg in insn 157
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 180
changing reg in insn 183
changing reg in insn 203
changing reg in insn 204
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 218
changing reg in insn 220
changing reg in insn 220
changing reg in insn 223
changing reg in insn 222
changing reg in insn 223
changing reg in insn 240
changing reg in insn 244
changing reg in insn 13
changing reg in insn 17
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 20
changing reg in insn 16
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 172
changing reg in insn 168
changing reg in insn 173
changing reg in insn 169
changing reg in insn 174
changing reg in insn 170
changing reg in insn 175
changing reg in insn 171
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 181
changing reg in insn 184
changing reg in insn 182
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 192
changing reg in insn 193
changing reg in insn 202
changing reg in insn 203
changing reg in insn 206
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 216
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 221
changing reg in insn 224
changing reg in insn 228
changing reg in insn 225
changing reg in insn 229
changing reg in insn 226
changing reg in insn 230
changing reg in insn 227
changing reg in insn 231
changing reg in insn 8
changing reg in insn 245
deleting insn with uid = 20.
deleting insn with uid = 262.
deleting insn with uid = 264.
deleting insn with uid = 266.
deleting insn with uid = 268.
deleting insn with uid = 270.
deleting insn with uid = 272.
deleting insn with uid = 274.
deleting insn with uid = 276.
deleting insn with uid = 173.
deleting insn with uid = 174.
deleting insn with uid = 175.
deleting insn with uid = 183.
deleting insn with uid = 278.
deleting insn with uid = 280.
deleting insn with uid = 229.
deleting insn with uid = 230.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 247.


create_file

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={116d,118u} r1={55d,43u,12e} r2={19d,7u,1e} r3={5d,4u} r4={21d,9u} r5={25d,13u} r6={1d,80u} r7={1d,24u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={67d,4u} r18={12d} r19={12d} r20={1d,1u,14e} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={16d,4u} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} 
;;    total ref usage 1450{1116d,307u,27e} in 226{214 regular + 12 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 138 139 140 141 142 143
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:80 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:80 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])
        (reg:SI 1 dx [ bitvector_len ])) t3.c:80 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])
        (reg:DI 2 cx [ name ])) t3.c:80 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 access+0 S4 A32])
        (reg:SI 37 r8 [ access ])) t3.c:80 90 {*movsi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.4974+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [219])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) t3.c:80 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])
        (const_int 0 [0])) t3.c:82 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])
        (const_int 0 [0])) t3.c:83 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 2 cx [138])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:84 218 {*adddi_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 1 dx [139])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:84 218 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg:SI 4 si [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:84 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:84 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 37 r8)
        (reg:DI 2 cx [138])) t3.c:84 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [139])) t3.c:84 89 {*movdi_internal}
     (nil))
(insn 19 18 21 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) t3.c:84 90 {*movsi_internal}
     (nil))
(insn 21 19 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) t3.c:84 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_zero_bit") [flags 0x3]  <function_decl 0x7fd504f2d360 find_zero_bit>) [0 find_zero_bit S1 A8])
            (const_int 0 [0]))) t3.c:84 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 23 22 24 2 (set (reg:SI 0 ax [142])
        (reg:SI 0 ax)) t3.c:84 90 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])
        (reg:SI 0 ax [142])) t3.c:84 90 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:85 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 file_offset+0 S4 A32])
        (reg:SI 0 ax [143])) t3.c:85 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) t3.c:86 7 {*cmpsi_1}
     (nil))
(jump_insn 28 27 29 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) t3.c:86 612 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 29 28 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd504fc82d0 *.LC0>)) t3.c:87 89 {*movdi_internal}
     (nil))
(call_insn 31 30 32 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:87 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 31 254 3 (set (reg:SI 0 ax [orig:87 D.4965 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:88 90 {*movsi_internal}
     (nil))
(jump_insn 254 32 255 3 (set (pc)
        (label_ref 238)) t3.c:88 654 {jump}
     (nil)
 -> 238)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 255 254 35)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175
(code_label 35 255 36 4 22 "" [1 uses])
(note 36 35 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 4 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:91 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 1 dx [orig:88 D.4966 ] [88])
        (sign_extend:DI (reg:SI 0 ax [144]))) t3.c:91 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:91 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 3 bx [orig:89 D.4967 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 D.4966 ] [88])
                    (reg/f:DI 0 ax [145])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.4966 ] [88]))
        (nil)))
(insn 41 40 42 4 (set (reg:SI 1 dx [orig:90 D.4965 ] [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])) t3.c:91 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:SI 0 ax [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:91 90 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 2 cx [orig:91 D.4966 ] [91])
        (sign_extend:DI (reg:SI 0 ax [146]))) t3.c:91 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:91 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.4967 ] [92])
                (plus:DI (reg/f:DI 0 ax [147])
                    (reg:DI 2 cx [orig:91 D.4966 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 2 cx [orig:91 D.4966 ] [91]))
        (nil)))
(insn 46 45 47 4 (set (reg:QI 0 ax [orig:93 D.4968 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 D.4967 ] [92]) [0 *_18+0 S1 A8])) t3.c:91 93 {*movqi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 0 ax [orig:94 D.4965 ] [94])
        (zero_extend:SI (reg:QI 0 ax [orig:93 D.4968 ] [93]))) t3.c:91 138 {*zero_extendqisi2}
     (nil))
(insn 48 47 49 4 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:90 D.4965 ] [90])) t3.c:91 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:94 D.4965 ] [94])) t3.c:91 90 {*movsi_internal}
     (nil))
(call_insn 50 49 51 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:91 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 51 50 52 4 (set (reg:SI 0 ax [orig:95 D.4965 ] [95])
        (reg:SI 0 ax)) t3.c:91 90 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:QI 0 ax [orig:96 D.4968 ] [96])
        (reg:QI 0 ax [orig:95 D.4965 ] [95])) t3.c:91 93 {*movqi_internal}
     (nil))
(insn 53 52 54 4 (set (mem:QI (reg/f:DI 3 bx [orig:89 D.4967 ] [89]) [0 *_15+0 S1 A8])
        (reg:QI 0 ax [orig:96 D.4968 ] [96])) t3.c:91 93 {*movqi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:93 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:SI 1 dx [orig:97 D.4965 ] [97])
                (ashift:SI (reg:SI 0 ax [148])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:93 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 index+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 56 55 57 4 (set (reg:SI 0 ax [orig:98 D.4965 ] [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:93 90 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg:SI 0 ax [149])
                (plus:SI (reg:SI 0 ax [orig:98 D.4965 ] [98])
                    (reg:SI 1 dx [orig:97 D.4965 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:93 217 {*addsi_1}
     (nil))
(insn 58 57 59 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])
        (reg:SI 0 ax [149])) t3.c:93 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:96 90 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DI 0 ax [orig:99 D.4969 ] [99])
        (sign_extend:DI (reg:SI 0 ax [150]))) t3.c:96 142 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [151])
        (reg:DI 0 ax [orig:99 D.4969 ] [99])) t3.c:96 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 0 ax [152])
                (ashift:DI (reg:DI 0 ax [151])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:96 512 {*ashldi3_1}
     (nil))
(insn 63 62 261 4 (set (reg:DI 0 ax [151])
        (reg:DI 0 ax [152])) t3.c:96 89 {*movdi_internal}
     (nil))
(insn 261 63 64 4 (set (reg:DI 1 dx [153])
        (reg:DI 0 ax [151])) t3.c:96 89 {*movdi_internal}
     (nil))
(insn 64 261 65 4 (parallel [
            (set (reg:DI 1 dx [153])
                (ashift:DI (reg:DI 1 dx [153])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:96 512 {*ashldi3_1}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.4969 ] [100])
                (plus:DI (reg:DI 1 dx [153])
                    (reg:DI 0 ax [151])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:96 218 {*adddi_1}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:96 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.4970 ] [101])
                (plus:DI (reg/f:DI 0 ax [154])
                    (reg:DI 1 dx [orig:100 D.4969 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:96 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.4969 ] [100]))
        (nil)))
(insn 68 67 69 4 (set (mem/j:SI (reg/f:DI 0 ax [orig:101 D.4970 ] [101]) [0 _31->type+0 S4 A64])
        (const_int 1 [0x1])) t3.c:96 90 {*movsi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:97 90 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:DI 0 ax [orig:102 D.4969 ] [102])
        (sign_extend:DI (reg:SI 0 ax [155]))) t3.c:97 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 4 (set (reg:DI 0 ax [156])
        (reg:DI 0 ax [orig:102 D.4969 ] [102])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg:DI 0 ax [157])
                (ashift:DI (reg:DI 0 ax [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:97 512 {*ashldi3_1}
     (nil))
(insn 73 72 263 4 (set (reg:DI 0 ax [156])
        (reg:DI 0 ax [157])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 263 73 74 4 (set (reg:DI 1 dx [158])
        (reg:DI 0 ax [156])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 74 263 75 4 (parallel [
            (set (reg:DI 1 dx [158])
                (ashift:DI (reg:DI 1 dx [158])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:97 512 {*ashldi3_1}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg:DI 1 dx [orig:103 D.4969 ] [103])
                (plus:DI (reg:DI 1 dx [158])
                    (reg:DI 0 ax [156])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:97 218 {*adddi_1}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.4970 ] [104])
                (plus:DI (reg/f:DI 0 ax [159])
                    (reg:DI 1 dx [orig:103 D.4969 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:97 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.4969 ] [103]))
        (nil)))
(insn 78 77 79 4 (parallel [
            (set (reg/f:DI 1 dx [orig:105 D.4971 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.4970 ] [104])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:97 218 {*adddi_1}
     (nil))
(insn 79 78 80 4 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 4 si)
        (reg:DI 0 ax [160])) t3.c:97 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:105 D.4971 ] [105])) t3.c:97 89 {*movdi_internal}
     (nil))
(call_insn 82 81 83 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fd50512d288 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) t3.c:97 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 83 82 84 4 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:98 90 {*movsi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:DI 0 ax [orig:106 D.4969 ] [106])
        (sign_extend:DI (reg:SI 0 ax [161]))) t3.c:98 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 4 (set (reg:DI 0 ax [162])
        (reg:DI 0 ax [orig:106 D.4969 ] [106])) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 0 ax [163])
                (ashift:DI (reg:DI 0 ax [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:98 512 {*ashldi3_1}
     (nil))
(insn 87 86 265 4 (set (reg:DI 0 ax [162])
        (reg:DI 0 ax [163])) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 265 87 88 4 (set (reg:DI 1 dx [164])
        (reg:DI 0 ax [162])) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 88 265 89 4 (parallel [
            (set (reg:DI 1 dx [164])
                (ashift:DI (reg:DI 1 dx [164])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:98 512 {*ashldi3_1}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:DI 1 dx [orig:107 D.4969 ] [107])
                (plus:DI (reg:DI 1 dx [164])
                    (reg:DI 0 ax [162])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:98 218 {*adddi_1}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg/f:DI 3 bx [orig:108 D.4970 ] [108])
                (plus:DI (reg:DI 1 dx [orig:107 D.4969 ] [107])
                    (reg/f:DI 0 ax [165])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.4969 ] [107]))
        (nil)))
(insn 92 91 93 4 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:98 89 {*movdi_internal}
     (nil))
(call_insn 93 92 94 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:98 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 94 93 95 4 (set (reg:DI 0 ax [orig:109 D.4972 ] [109])
        (reg:DI 0 ax)) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:108 D.4970 ] [108])
                (const_int 136 [0x88])) [0 _41->content.fd.creat_t+0 S8 A64])
        (reg:DI 0 ax [orig:109 D.4972 ] [109])) t3.c:98 89 {*movdi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:99 90 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 0 ax [orig:110 D.4969 ] [110])
        (sign_extend:DI (reg:SI 0 ax [166]))) t3.c:99 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 4 (set (reg:DI 0 ax [167])
        (reg:DI 0 ax [orig:110 D.4969 ] [110])) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (parallel [
            (set (reg:DI 0 ax [168])
                (ashift:DI (reg:DI 0 ax [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:99 512 {*ashldi3_1}
     (nil))
(insn 100 99 267 4 (set (reg:DI 0 ax [167])
        (reg:DI 0 ax [168])) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 267 100 101 4 (set (reg:DI 1 dx [169])
        (reg:DI 0 ax [167])) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 101 267 102 4 (parallel [
            (set (reg:DI 1 dx [169])
                (ashift:DI (reg:DI 1 dx [169])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:99 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (parallel [
            (set (reg:DI 1 dx [orig:111 D.4969 ] [111])
                (plus:DI (reg:DI 1 dx [169])
                    (reg:DI 0 ax [167])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:99 218 {*adddi_1}
     (nil))
(insn 103 102 104 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg/f:DI 3 bx [orig:112 D.4970 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 D.4969 ] [111])
                    (reg/f:DI 0 ax [170])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:99 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.4969 ] [111]))
        (nil)))
(insn 105 104 106 4 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:99 89 {*movdi_internal}
     (nil))
(call_insn 106 105 107 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:99 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 4 (set (reg:DI 0 ax [orig:113 D.4972 ] [113])
        (reg:DI 0 ax)) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 108 107 109 4 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:112 D.4970 ] [112])
                (const_int 144 [0x90])) [0 _47->content.fd.access_t+0 S8 A64])
        (reg:DI 0 ax [orig:113 D.4972 ] [113])) t3.c:99 89 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:SI 0 ax [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:100 90 {*movsi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:DI 0 ax [orig:114 D.4969 ] [114])
        (sign_extend:DI (reg:SI 0 ax [171]))) t3.c:100 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 4 (set (reg:DI 0 ax [172])
        (reg:DI 0 ax [orig:114 D.4969 ] [114])) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 0 ax [173])
                (ashift:DI (reg:DI 0 ax [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:100 512 {*ashldi3_1}
     (nil))
(insn 113 112 269 4 (set (reg:DI 0 ax [172])
        (reg:DI 0 ax [173])) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 269 113 114 4 (set (reg:DI 1 dx [174])
        (reg:DI 0 ax [172])) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 114 269 115 4 (parallel [
            (set (reg:DI 1 dx [174])
                (ashift:DI (reg:DI 1 dx [174])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:100 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 4 (parallel [
            (set (reg:DI 1 dx [orig:115 D.4969 ] [115])
                (plus:DI (reg:DI 1 dx [174])
                    (reg:DI 0 ax [172])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:100 218 {*adddi_1}
     (nil))
(insn 116 115 117 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 117 116 118 4 (parallel [
            (set (reg/f:DI 3 bx [orig:116 D.4970 ] [116])
                (plus:DI (reg:DI 1 dx [orig:115 D.4969 ] [115])
                    (reg/f:DI 0 ax [175])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:100 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.4969 ] [115]))
        (nil)))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:100 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:100 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 120 119 121 4 (set (reg:DI 0 ax [orig:117 D.4972 ] [117])
        (reg:DI 0 ax)) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:116 D.4970 ] [116])
                (const_int 152 [0x98])) [0 _53->content.fd.mod_t+0 S8 A64])
        (reg:DI 0 ax [orig:117 D.4972 ] [117])) t3.c:100 89 {*movdi_internal}
     (nil))
(insn 122 121 123 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 access+0 S4 A32])
            (const_int 0 [0]))) t3.c:101 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 123 122 124 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) t3.c:101 612 {*jcc_1}
     (nil)
 -> 137)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 176 177 178 179 180
(note 124 123 125 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 5 (set (reg:SI 0 ax [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:103 90 {*movsi_internal}
     (nil))
(insn 126 125 127 5 (set (reg:DI 0 ax [orig:118 D.4969 ] [118])
        (sign_extend:DI (reg:SI 0 ax [176]))) t3.c:103 142 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 5 (set (reg:DI 0 ax [177])
        (reg:DI 0 ax [orig:118 D.4969 ] [118])) t3.c:103 89 {*movdi_internal}
     (nil))
(insn 128 127 129 5 (parallel [
            (set (reg:DI 0 ax [178])
                (ashift:DI (reg:DI 0 ax [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:103 512 {*ashldi3_1}
     (nil))
(insn 129 128 271 5 (set (reg:DI 0 ax [177])
        (reg:DI 0 ax [178])) t3.c:103 89 {*movdi_internal}
     (nil))
(insn 271 129 130 5 (set (reg:DI 1 dx [179])
        (reg:DI 0 ax [177])) t3.c:103 89 {*movdi_internal}
     (nil))
(insn 130 271 131 5 (parallel [
            (set (reg:DI 1 dx [179])
                (ashift:DI (reg:DI 1 dx [179])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:103 512 {*ashldi3_1}
     (nil))
(insn 131 130 132 5 (parallel [
            (set (reg:DI 1 dx [orig:119 D.4969 ] [119])
                (plus:DI (reg:DI 1 dx [179])
                    (reg:DI 0 ax [177])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:103 218 {*adddi_1}
     (nil))
(insn 132 131 133 5 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:103 89 {*movdi_internal}
     (nil))
(insn 133 132 134 5 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.4970 ] [120])
                (plus:DI (reg/f:DI 0 ax [180])
                    (reg:DI 1 dx [orig:119 D.4969 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:103 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.4969 ] [119]))
        (nil)))
(insn 134 133 256 5 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:120 D.4970 ] [120])
                (const_int 160 [0xa0])) [0 _60->content.fd.access+0 S4 A64])
        (const_int 484 [0x1e4])) t3.c:103 90 {*movsi_internal}
     (nil))
(jump_insn 256 134 257 5 (set (pc)
        (label_ref 149)) 654 {jump}
     (nil)
 -> 149)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 257 256 137)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 181 182 183 184 185
(code_label 137 257 138 6 24 "" [1 uses])
(note 138 137 139 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 6 (set (reg:SI 0 ax [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:106 90 {*movsi_internal}
     (nil))
(insn 140 139 141 6 (set (reg:DI 0 ax [orig:121 D.4969 ] [121])
        (sign_extend:DI (reg:SI 0 ax [181]))) t3.c:106 142 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 6 (set (reg:DI 0 ax [182])
        (reg:DI 0 ax [orig:121 D.4969 ] [121])) t3.c:106 89 {*movdi_internal}
     (nil))
(insn 142 141 143 6 (parallel [
            (set (reg:DI 0 ax [183])
                (ashift:DI (reg:DI 0 ax [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:106 512 {*ashldi3_1}
     (nil))
(insn 143 142 273 6 (set (reg:DI 0 ax [182])
        (reg:DI 0 ax [183])) t3.c:106 89 {*movdi_internal}
     (nil))
(insn 273 143 144 6 (set (reg:DI 1 dx [184])
        (reg:DI 0 ax [182])) t3.c:106 89 {*movdi_internal}
     (nil))
(insn 144 273 145 6 (parallel [
            (set (reg:DI 1 dx [184])
                (ashift:DI (reg:DI 1 dx [184])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:106 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 6 (parallel [
            (set (reg:DI 1 dx [orig:122 D.4969 ] [122])
                (plus:DI (reg:DI 1 dx [184])
                    (reg:DI 0 ax [182])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:106 218 {*adddi_1}
     (nil))
(insn 146 145 147 6 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:106 89 {*movdi_internal}
     (nil))
(insn 147 146 148 6 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.4970 ] [123])
                (plus:DI (reg/f:DI 0 ax [185])
                    (reg:DI 1 dx [orig:122 D.4969 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.4969 ] [122]))
        (nil)))
(insn 148 147 149 6 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:123 D.4970 ] [123])
                (const_int 160 [0xa0])) [0 _64->content.fd.access+0 S4 A64])
        (const_int 0 [0])) t3.c:106 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124 125 126 127 128 129 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201
(code_label 149 148 150 7 25 "" [1 uses])
(note 150 149 151 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 7 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:108 90 {*movsi_internal}
     (nil))
(insn 152 151 153 7 (set (reg:DI 0 ax [orig:124 D.4969 ] [124])
        (sign_extend:DI (reg:SI 0 ax [186]))) t3.c:108 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 7 (set (reg:DI 0 ax [187])
        (reg:DI 0 ax [orig:124 D.4969 ] [124])) t3.c:108 89 {*movdi_internal}
     (nil))
(insn 154 153 155 7 (parallel [
            (set (reg:DI 0 ax [188])
                (ashift:DI (reg:DI 0 ax [187])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:108 512 {*ashldi3_1}
     (nil))
(insn 155 154 275 7 (set (reg:DI 0 ax [187])
        (reg:DI 0 ax [188])) t3.c:108 89 {*movdi_internal}
     (nil))
(insn 275 155 156 7 (set (reg:DI 1 dx [189])
        (reg:DI 0 ax [187])) t3.c:108 89 {*movdi_internal}
     (nil))
(insn 156 275 157 7 (parallel [
            (set (reg:DI 1 dx [189])
                (ashift:DI (reg:DI 1 dx [189])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:108 512 {*ashldi3_1}
     (nil))
(insn 157 156 158 7 (parallel [
            (set (reg:DI 1 dx [orig:125 D.4969 ] [125])
                (plus:DI (reg:DI 1 dx [189])
                    (reg:DI 0 ax [187])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:108 218 {*adddi_1}
     (nil))
(insn 158 157 159 7 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:108 89 {*movdi_internal}
     (nil))
(insn 159 158 160 7 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.4970 ] [126])
                (plus:DI (reg/f:DI 0 ax [190])
                    (reg:DI 1 dx [orig:125 D.4969 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:108 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.4969 ] [125]))
        (nil)))
(insn 160 159 161 7 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:126 D.4970 ] [126])
                (const_int 166 [0xa6])) [0 _68->content.fd.size+0 S2 A16])
        (const_int 0 [0])) t3.c:108 92 {*movhi_internal}
     (nil))
(insn 161 160 162 7 (set (reg:SI 0 ax [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:109 90 {*movsi_internal}
     (nil))
(insn 162 161 163 7 (set (reg:DI 1 dx [orig:127 D.4966 ] [127])
        (sign_extend:DI (reg:SI 0 ax [191]))) t3.c:109 142 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 7 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:109 89 {*movdi_internal}
     (nil))
(insn 164 163 165 7 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.4967 ] [128])
                (plus:DI (reg/f:DI 0 ax [192])
                    (reg:DI 1 dx [orig:127 D.4966 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:109 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.4966 ] [127]))
        (nil)))
(insn 165 164 166 7 (set (mem:QI (reg/f:DI 0 ax [orig:128 D.4967 ] [128]) [0 *_71+0 S1 A8])
        (const_int 0 [0])) t3.c:109 93 {*movqi_internal}
     (nil))
(insn 166 165 167 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])
        (const_int 0 [0])) t3.c:112 90 {*movsi_internal}
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg:DI 5 di [193])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:113 218 {*adddi_1}
     (nil))
(insn 168 167 169 7 (parallel [
            (set (reg:DI 2 cx [194])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:113 218 {*adddi_1}
     (nil))
(insn 169 168 170 7 (set (reg:SI 1 dx [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:113 90 {*movsi_internal}
     (nil))
(insn 170 169 171 7 (set (reg:SI 4 si [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:113 90 {*movsi_internal}
     (nil))
(insn 171 170 172 7 (set (reg:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:113 89 {*movdi_internal}
     (nil))
(insn 172 171 176 7 (set (reg:DI 37 r8)
        (reg:DI 5 di [193])) t3.c:113 89 {*movdi_internal}
     (nil))
(insn 176 172 177 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [197])) t3.c:113 89 {*movdi_internal}
     (nil))
(call_insn 177 176 178 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_zero_bit") [flags 0x3]  <function_decl 0x7fd504f2d360 find_zero_bit>) [0 find_zero_bit S1 A8])
            (const_int 0 [0]))) t3.c:113 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 178 177 179 7 (set (reg:SI 0 ax [198])
        (reg:SI 0 ax)) t3.c:113 90 {*movsi_internal}
     (nil))
(insn 179 178 180 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_index+0 S4 A32])
        (reg:SI 0 ax [198])) t3.c:113 90 {*movsi_internal}
     (nil))
(insn 180 179 181 7 (set (reg:SI 1 dx [orig:129 D.4965 ] [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 181 180 182 7 (set (reg:SI 2 cx [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_index+0 S4 A32])) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 182 181 184 7 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 184 182 185 7 (set (reg:SI 4 si)
        (reg:SI 2 cx [199])) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 185 184 186 7 (set (reg:SI 5 di)
        (reg:SI 0 ax [200])) t3.c:114 90 {*movsi_internal}
     (nil))
(call_insn 186 185 187 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_index_to_block_number") [flags 0x3]  <function_decl 0x7fd504f2d438 convert_index_to_block_number>) [0 convert_index_to_block_number S1 A8])
            (const_int 0 [0]))) t3.c:114 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 187 186 188 7 (set (reg:SI 0 ax [201])
        (reg:SI 0 ax)) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 188 187 189 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])
        (reg:SI 0 ax [201])) t3.c:114 90 {*movsi_internal}
     (nil))
(insn 189 188 190 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) t3.c:115 7 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 200)
            (pc))) t3.c:115 612 {*jcc_1}
     (nil)
 -> 200)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 202
(note 191 190 192 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 8 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:116 90 {*movsi_internal}
     (nil))
(insn 193 192 194 8 (set (reg:SI 4 si)
        (reg:SI 0 ax [202])) t3.c:116 90 {*movsi_internal}
     (nil))
(insn 194 193 195 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd504fc8360 *.LC1>)) t3.c:116 89 {*movdi_internal}
     (nil))
(insn 195 194 196 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:116 93 {*movqi_internal}
     (nil))
(call_insn 196 195 197 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:116 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 197 196 258 8 (set (reg:SI 0 ax [orig:87 D.4965 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:117 90 {*movsi_internal}
     (nil))
(jump_insn 258 197 259 8 (set (pc)
        (label_ref 238)) t3.c:117 654 {jump}
     (nil)
 -> 238)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 259 258 200)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 130 131 132 133 134 135 136 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
(code_label 200 259 201 9 26 "" [1 uses])
(note 201 200 202 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 9 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:119 90 {*movsi_internal}
     (nil))
(insn 203 202 204 9 (set (reg:DI 0 ax [orig:130 D.4969 ] [130])
        (sign_extend:DI (reg:SI 0 ax [203]))) t3.c:119 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 9 (set (reg:DI 0 ax [204])
        (reg:DI 0 ax [orig:130 D.4969 ] [130])) t3.c:119 89 {*movdi_internal}
     (nil))
(insn 205 204 206 9 (parallel [
            (set (reg:DI 0 ax [205])
                (ashift:DI (reg:DI 0 ax [204])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:119 512 {*ashldi3_1}
     (nil))
(insn 206 205 277 9 (set (reg:DI 0 ax [204])
        (reg:DI 0 ax [205])) t3.c:119 89 {*movdi_internal}
     (nil))
(insn 277 206 207 9 (set (reg:DI 1 dx [206])
        (reg:DI 0 ax [204])) t3.c:119 89 {*movdi_internal}
     (nil))
(insn 207 277 208 9 (parallel [
            (set (reg:DI 1 dx [206])
                (ashift:DI (reg:DI 1 dx [206])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:119 512 {*ashldi3_1}
     (nil))
(insn 208 207 209 9 (parallel [
            (set (reg:DI 1 dx [orig:131 D.4969 ] [131])
                (plus:DI (reg:DI 1 dx [206])
                    (reg:DI 0 ax [204])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:119 218 {*adddi_1}
     (nil))
(insn 209 208 210 9 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:119 89 {*movdi_internal}
     (nil))
(insn 210 209 211 9 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.4970 ] [132])
                (plus:DI (reg/f:DI 0 ax [207])
                    (reg:DI 1 dx [orig:131 D.4969 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:119 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.4969 ] [131]))
        (nil)))
(insn 211 210 212 9 (set (mem/j:SI (reg/f:DI 0 ax [orig:132 D.4970 ] [132]) [0 _83->type+0 S4 A64])
        (const_int 3 [0x3])) t3.c:119 90 {*movsi_internal}
     (nil))
(insn 212 211 213 9 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:122 90 {*movsi_internal}
     (nil))
(insn 213 212 214 9 (set (reg:DI 0 ax [orig:133 D.4969 ] [133])
        (sign_extend:DI (reg:SI 0 ax [208]))) t3.c:122 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 9 (set (reg:DI 0 ax [209])
        (reg:DI 0 ax [orig:133 D.4969 ] [133])) t3.c:122 89 {*movdi_internal}
     (nil))
(insn 215 214 216 9 (parallel [
            (set (reg:DI 0 ax [210])
                (ashift:DI (reg:DI 0 ax [209])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:122 512 {*ashldi3_1}
     (nil))
(insn 216 215 279 9 (set (reg:DI 0 ax [209])
        (reg:DI 0 ax [210])) t3.c:122 89 {*movdi_internal}
     (nil))
(insn 279 216 217 9 (set (reg:DI 1 dx [211])
        (reg:DI 0 ax [209])) t3.c:122 89 {*movdi_internal}
     (nil))
(insn 217 279 218 9 (parallel [
            (set (reg:DI 1 dx [211])
                (ashift:DI (reg:DI 1 dx [211])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:122 512 {*ashldi3_1}
     (nil))
(insn 218 217 219 9 (parallel [
            (set (reg:DI 1 dx [orig:134 D.4969 ] [134])
                (plus:DI (reg:DI 1 dx [211])
                    (reg:DI 0 ax [209])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:122 218 {*adddi_1}
     (nil))
(insn 219 218 220 9 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:122 89 {*movdi_internal}
     (nil))
(insn 220 219 221 9 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.4970 ] [135])
                (plus:DI (reg/f:DI 0 ax [212])
                    (reg:DI 1 dx [orig:134 D.4969 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:122 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.4969 ] [134]))
        (nil)))
(insn 221 220 222 9 (set (reg:SI 1 dx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:122 90 {*movsi_internal}
     (nil))
(insn 222 221 223 9 (set (reg:HI 1 dx [orig:136 D.4973 ] [136])
        (reg:HI 1 dx [213])) t3.c:122 92 {*movhi_internal}
     (nil))
(insn 223 222 224 9 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:135 D.4970 ] [135])
                (const_int 168 [0xa8])) [0 _87->content.fd.block_ref+0 S2 A64])
        (reg:HI 1 dx [orig:136 D.4973 ] [136])) t3.c:122 92 {*movhi_internal}
     (nil))
(insn 224 223 225 9 (set (reg:SI 4 si [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 file_offset+0 S4 A32])) t3.c:124 90 {*movsi_internal}
     (nil))
(insn 225 224 226 9 (set (reg:SI 2 cx [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:124 90 {*movsi_internal}
     (nil))
(insn 226 225 227 9 (set (reg:SI 1 dx [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:124 90 {*movsi_internal}
     (nil))
(insn 227 226 228 9 (set (reg:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])) t3.c:124 89 {*movdi_internal}
     (nil))
(insn 228 227 231 9 (set (reg:SI 37 r8)
        (reg:SI 4 si [214])) t3.c:124 90 {*movsi_internal}
     (nil))
(insn 231 228 232 9 (set (reg:DI 4 si)
        (reg:DI 0 ax [217])) t3.c:124 89 {*movdi_internal}
     (nil))
(insn 232 231 233 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd504fc83f0 *.LC2>)) t3.c:124 89 {*movdi_internal}
     (nil))
(insn 233 232 234 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:124 93 {*movqi_internal}
     (nil))
(call_insn 234 233 235 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:124 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 235 234 238 9 (set (reg:SI 0 ax [orig:87 D.4965 ] [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 file_blockNumber+0 S4 A32])) t3.c:125 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [100.0%] 
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 137
(code_label 238 235 239 10 27 "" [2 uses])
(note 239 238 240 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 240 239 244 10 (set (reg:SI 0 ax [orig:137 <retval> ] [137])
        (reg:SI 0 ax [orig:87 D.4965 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 244 240 245 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:137 <retval> ] [137])) t3.c:126 90 {*movsi_internal}
     (nil))
(insn 245 244 246 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.4974+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [220]))
        ]) t3.c:126 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 246 245 252 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 249)
            (pc))) t3.c:126 612 {*jcc_1}
     (nil)
 -> 249)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 252 246 247 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 247 252 248 11 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd504fa9288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) t3.c:126 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 248 247 249)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 249 248 253 12 28 "" [1 uses])
(note 253 249 250 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 250 253 260 12 (use (reg/i:SI 0 ax)) t3.c:126 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 260 250 0 NOTE_INSN_DELETED)

;; Function create_dir (create_dir, funcdef_no=8, decl_uid=4478, cgraph_uid=8, symbol_order=8)

      Creating newreg=226
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=227
Removing SCRATCH in insn #272 (nop 3)
rescanning insn with uid = 272.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r226
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 43:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=228 from oldreg=156, assigning class GENERAL_REGS to r228
   81: {r228:DI=r228:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  290: r228:DI=r154:DI
    Inserting insn reload after:
  291: r156:DI=r228:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=229 from oldreg=161, assigning class GENERAL_REGS to r229
   91: {r229:DI=r229:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  292: r229:DI=r159:DI
    Inserting insn reload after:
  293: r161:DI=r229:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 105:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=230 from oldreg=167, assigning class GENERAL_REGS to r230
  105: {r230:DI=r230:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  294: r230:DI=r165:DI
    Inserting insn reload after:
  295: r167:DI=r230:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=231 from oldreg=172, assigning class GENERAL_REGS to r231
  118: {r231:DI=r231:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  296: r231:DI=r170:DI
    Inserting insn reload after:
  297: r172:DI=r231:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 131:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=232 from oldreg=177, assigning class GENERAL_REGS to r232
  131: {r232:DI=r232:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  298: r232:DI=r175:DI
    Inserting insn reload after:
  299: r177:DI=r232:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 138:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 147:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=233 from oldreg=182, assigning class GENERAL_REGS to r233
  147: {r233:DI=r233:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  300: r233:DI=r180:DI
    Inserting insn reload after:
  301: r182:DI=r233:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 148
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=234 from oldreg=187, assigning class GENERAL_REGS to r234
  161: {r234:DI=r234:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  302: r234:DI=r185:DI
    Inserting insn reload after:
  303: r187:DI=r234:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=235 from oldreg=193, assigning class GENERAL_REGS to r235
  174: {r235:DI=r235:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  304: r235:DI=r191:DI
    Inserting insn reload after:
  305: r193:DI=r235:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 207:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 220:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=236 from oldreg=208, assigning class GENERAL_REGS to r236
  220: {r236:DI=r236:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  306: r236:DI=r206:DI
    Inserting insn reload after:
  307: r208:DI=r236:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 230:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=237 from oldreg=213, assigning class GENERAL_REGS to r237
  230: {r237:DI=r237:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  308: r237:DI=r211:DI
    Inserting insn reload after:
  309: r213:DI=r237:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 233
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 235:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=238 from oldreg=218, assigning class GENERAL_REGS to r238
  244: {r238:DI=r238:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  310: r238:DI=r216:DI
    Inserting insn reload after:
  311: r218:DI=r238:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) r {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 259:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r227
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 13
   Insn 274: point = 0
  BB 14
   Insn 277: point = 0
  BB 12
   Insn 273: point = 0
   Insn 272: point = 0
   Insn 271: point = 1
   Insn 267: point = 2
  BB 10
   Insn 287: point = 5
   Insn 210: point = 5
   Insn 209: point = 6
   Insn 208: point = 6
   Insn 207: point = 6
   Insn 206: point = 6
   Insn 205: point = 7
  BB 3
   Insn 281: point = 8
   Insn 49: point = 8
   Insn 48: point = 9
   Insn 47: point = 9
  BB 5
   Insn 283: point = 9
   Insn 71: point = 9
   Insn 70: point = 10
   Insn 69: point = 10
   Insn 68: point = 10
   Insn 67: point = 10
   Insn 66: point = 11
  BB 11
   Insn 262: point = 12
   Insn 261: point = 13
   Insn 260: point = 13
   Insn 259: point = 13
   Insn 258: point = 13
   Insn 257: point = 14
   Insn 256: point = 15
   Insn 255: point = 16
   Insn 254: point = 17
   Insn 253: point = 18
   Insn 252: point = 19
   Insn 251: point = 20
   Insn 250: point = 21
   Insn 249: point = 22
   Insn 248: point = 24
   Insn 247: point = 25
   Insn 246: point = 27
   Insn 245: point = 28
   Insn 311: point = 30
	Hard reg 1 is preferable by r238 with profit 1
   Insn 244: point = 32
   Insn 310: point = 32
   Insn 243: point = 33
   Insn 242: point = 35
   Insn 241: point = 37
   Insn 240: point = 39
   Insn 239: point = 41
   Insn 238: point = 42
   Insn 237: point = 42
   Insn 236: point = 43
   Insn 235: point = 43
   Insn 234: point = 43
   Insn 233: point = 45
   Insn 232: point = 47
   Insn 231: point = 48
   Insn 309: point = 50
	Hard reg 1 is preferable by r237 with profit 1
   Insn 230: point = 52
   Insn 308: point = 52
   Insn 229: point = 53
   Insn 228: point = 55
   Insn 227: point = 57
   Insn 226: point = 59
   Insn 225: point = 61
   Insn 224: point = 62
   Insn 223: point = 63
   Insn 222: point = 65
   Insn 221: point = 66
   Insn 307: point = 68
	Hard reg 1 is preferable by r236 with profit 1
   Insn 220: point = 70
   Insn 306: point = 70
   Insn 219: point = 71
   Insn 218: point = 73
   Insn 217: point = 75
   Insn 216: point = 77
   Insn 215: point = 79
  BB 9
   Insn 203: point = 80
   Insn 202: point = 80
   Insn 201: point = 80
   Insn 200: point = 81
   Insn 199: point = 82
   Insn 198: point = 82
   Insn 197: point = 83
   Insn 196: point = 84
   Insn 195: point = 85
   Insn 194: point = 86
   Insn 193: point = 87
   Insn 192: point = 88
   Insn 191: point = 89
   Insn 190: point = 90
   Insn 189: point = 90
   Insn 188: point = 91
   Insn 187: point = 92
   Insn 186: point = 93
   Insn 185: point = 94
   Insn 184: point = 95
   Insn 183: point = 96
   Insn 182: point = 97
   Insn 181: point = 98
   Insn 180: point = 99
   Insn 179: point = 100
   Insn 178: point = 100
   Insn 177: point = 101
   Insn 176: point = 103
   Insn 175: point = 104
   Insn 305: point = 106
	Hard reg 1 is preferable by r235 with profit 1
   Insn 174: point = 108
   Insn 304: point = 108
   Insn 173: point = 109
   Insn 172: point = 111
   Insn 171: point = 113
   Insn 170: point = 115
   Insn 169: point = 117
  BB 7
   Insn 285: point = 118
   Insn 151: point = 118
   Insn 150: point = 119
   Insn 149: point = 121
   Insn 148: point = 122
   Insn 301: point = 124
	Hard reg 1 is preferable by r233 with profit 1
   Insn 147: point = 126
   Insn 300: point = 126
   Insn 146: point = 127
   Insn 145: point = 129
   Insn 144: point = 131
   Insn 143: point = 133
   Insn 142: point = 135
  BB 8
   Insn 166: point = 136
   Insn 165: point = 137
   Insn 164: point = 138
   Insn 163: point = 140
   Insn 162: point = 141
   Insn 303: point = 143
	Hard reg 1 is preferable by r234 with profit 1
   Insn 161: point = 145
   Insn 302: point = 145
   Insn 160: point = 146
   Insn 159: point = 148
   Insn 158: point = 150
   Insn 157: point = 152
   Insn 156: point = 154
  BB 6
   Insn 140: point = 155
   Insn 139: point = 155
   Insn 138: point = 155
   Insn 137: point = 156
   Insn 136: point = 157
   Insn 135: point = 157
   Insn 134: point = 157
   Insn 133: point = 159
   Insn 132: point = 160
   Insn 299: point = 162
	Hard reg 1 is preferable by r232 with profit 1
   Insn 131: point = 164
   Insn 298: point = 164
   Insn 130: point = 165
   Insn 129: point = 167
   Insn 128: point = 169
   Insn 127: point = 171
   Insn 126: point = 173
   Insn 125: point = 174
   Insn 124: point = 175
   Insn 123: point = 176
   Insn 122: point = 176
   Insn 121: point = 176
   Insn 120: point = 178
   Insn 119: point = 179
   Insn 297: point = 181
	Hard reg 1 is preferable by r231 with profit 1
   Insn 118: point = 183
   Insn 296: point = 183
   Insn 117: point = 184
   Insn 116: point = 186
   Insn 115: point = 188
   Insn 114: point = 190
   Insn 113: point = 192
   Insn 112: point = 193
   Insn 111: point = 194
   Insn 110: point = 195
   Insn 109: point = 195
   Insn 108: point = 195
   Insn 107: point = 197
   Insn 106: point = 198
   Insn 295: point = 200
	Hard reg 1 is preferable by r230 with profit 1
   Insn 105: point = 202
   Insn 294: point = 202
   Insn 104: point = 203
   Insn 103: point = 205
   Insn 102: point = 207
   Insn 101: point = 209
   Insn 100: point = 211
   Insn 99: point = 212
   Insn 98: point = 212
   Insn 97: point = 213
   Insn 96: point = 214
   Insn 95: point = 215
   Insn 94: point = 217
   Insn 93: point = 219
   Insn 92: point = 220
   Insn 293: point = 222
	Hard reg 1 is preferable by r229 with profit 1
   Insn 91: point = 224
   Insn 292: point = 224
   Insn 90: point = 225
   Insn 89: point = 227
   Insn 88: point = 229
   Insn 87: point = 231
   Insn 86: point = 233
   Insn 85: point = 234
   Insn 84: point = 235
   Insn 83: point = 237
   Insn 82: point = 238
   Insn 291: point = 240
	Hard reg 1 is preferable by r228 with profit 1
   Insn 81: point = 242
   Insn 290: point = 242
   Insn 80: point = 243
   Insn 79: point = 245
   Insn 78: point = 247
   Insn 77: point = 249
   Insn 76: point = 251
  BB 4
   Insn 64: point = 252
   Insn 63: point = 252
   Insn 62: point = 252
   Insn 61: point = 253
   Insn 60: point = 254
   Insn 59: point = 254
   Insn 58: point = 255
   Insn 57: point = 256
   Insn 56: point = 257
   Insn 55: point = 258
   Insn 54: point = 259
  BB 2
   Insn 45: point = 260
   Insn 44: point = 260
   Insn 43: point = 260
   Insn 42: point = 261
   Insn 41: point = 263
   Insn 40: point = 264
   Insn 39: point = 264
   Insn 38: point = 265
   Insn 37: point = 266
   Insn 36: point = 268
   Insn 35: point = 270
   Insn 34: point = 272
   Insn 33: point = 273
   Insn 32: point = 275
   Insn 31: point = 276
   Insn 30: point = 277
   Insn 29: point = 279
   Insn 28: point = 280
   Insn 27: point = 282
   Insn 26: point = 283
   Insn 25: point = 284
   Insn 24: point = 285
   Insn 23: point = 286
   Insn 22: point = 287
   Insn 21: point = 287
   Insn 20: point = 288
   Insn 19: point = 289
   Insn 18: point = 289
   Insn 17: point = 290
   Insn 16: point = 291
   Insn 15: point = 292
   Insn 14: point = 293
   Insn 13: point = 294
   Insn 12: point = 295
   Insn 11: point = 295
   Insn 8: point = 295
   Insn 6: point = 297
   Insn 5: point = 297
   Insn 4: point = 297
   Insn 3: point = 297
   Insn 2: point = 297
 r87: [12..12] [8..9] [3..5]
 r88: [278..280]
 r89: [260..277]
 r90: [265..276]
 r91: [271..273]
 r92: [269..270]
 r93: [267..268]
 r94: [264..266]
 r95: [262..263]
 r96: [260..261]
 r97: [256..259]
 r98: [248..249]
 r99: [236..238]
 r100: [234..235]
 r101: [230..231]
 r102: [218..220]
 r103: [216..217]
 r104: [212..215]
 r105: [208..209]
 r106: [196..198]
 r107: [193..195]
 r108: [193..194]
 r109: [189..190]
 r110: [177..179]
 r111: [174..176]
 r112: [174..175]
 r113: [170..171]
 r114: [158..160]
 r115: [155..157]
 r116: [155..156]
 r117: [132..133]
 r118: [120..122]
 r119: [118..119]
 r120: [151..152]
 r121: [139..141]
 r122: [136..138]
 r123: [114..115]
 r124: [102..104]
 r125: [100..101]
 r126: [84..87]
 r127: [76..77]
 r128: [64..66]
 r129: [62..63]
 r130: [58..59]
 r131: [46..48]
 r132: [44..45]
 r133: [42..43]
 r134: [38..39]
 r135: [26..28]
 r136: [21..25]
 r137: [21..22]
 r138: [1..2]
 r139: [290..294]
 r140: [289..293]
 r141: [288..292]
 r142: [287..291]
 r143: [285..286]
 r144: [283..284]
 r145: [281..282]
 r146: [278..279]
 r147: [274..275]
 r148: [271..272]
 r149: [255..258]
 r150: [254..257]
 r151: [252..253]
 r152: [10..11]
 r153: [250..251]
 r154: [246..247] [239..243]
 r155: [244..245]
 r156: [239..240]
 r157: [236..237]
 r158: [232..233]
 r159: [228..229] [221..225]
 r160: [226..227]
 r161: [221..222]
 r162: [218..219]
 r163: [213..214]
 r164: [210..211]
 r165: [206..207] [199..203]
 r166: [204..205]
 r167: [199..200]
 r168: [196..197]
 r169: [191..192]
 r170: [187..188] [180..184]
 r171: [185..186]
 r172: [180..181]
 r173: [177..178]
 r174: [172..173]
 r175: [168..169] [161..165]
 r176: [166..167]
 r177: [161..162]
 r178: [158..159]
 r179: [134..135]
 r180: [130..131] [123..127]
 r181: [128..129]
 r182: [123..124]
 r183: [120..121]
 r184: [153..154]
 r185: [149..150] [142..146]
 r186: [147..148]
 r187: [142..143]
 r188: [139..140]
 r189: [136..137]
 r190: [116..117]
 r191: [112..113] [105..109]
 r192: [110..111]
 r193: [105..106]
 r194: [102..103]
 r195: [94..99]
 r196: [93..98]
 r197: [92..97]
 r198: [91..96]
 r199: [90..95]
 r200: [88..89]
 r201: [83..86]
 r202: [82..85]
 r203: [80..81]
 r204: [6..7]
 r205: [78..79]
 r206: [74..75] [67..71]
 r207: [72..73]
 r208: [67..68]
 r209: [64..65]
 r210: [60..61]
 r211: [56..57] [49..53]
 r212: [54..55]
 r213: [49..50]
 r214: [46..47]
 r215: [40..41]
 r216: [36..37] [29..33]
 r217: [34..35]
 r218: [29..30]
 r219: [26..27]
 r220: [23..24]
 r221: [16..20]
 r222: [15..19]
 r223: [14..18]
 r224: [13..17]
 r226: [295..296]
 r227: [0..0]
 r228: [241..242]
 r229: [223..224]
 r230: [201..202]
 r231: [182..183]
 r232: [163..164]
 r233: [125..126]
 r234: [144..145]
 r235: [107..108]
 r236: [69..70]
 r237: [51..52]
 r238: [31..32]
Compressing live ranges: from 297 to 234 - 78%
Ranges after the compression:
 r87: [11..11] [7..8] [3..4]
 r88: [222..223]
 r89: [208..221]
 r90: [212..221]
 r91: [218..219]
 r92: [216..217]
 r93: [214..215]
 r94: [212..213]
 r95: [210..211]
 r96: [208..209]
 r97: [206..207]
 r98: [200..201]
 r99: [190..191]
 r100: [188..189]
 r101: [184..185]
 r102: [174..175]
 r103: [172..173]
 r104: [170..171]
 r105: [166..167]
 r106: [156..157]
 r107: [154..155]
 r108: [154..155]
 r109: [150..151]
 r110: [140..141]
 r111: [138..139]
 r112: [138..139]
 r113: [134..135]
 r114: [124..125]
 r115: [122..123]
 r116: [122..123]
 r117: [102..103]
 r118: [92..93]
 r119: [90..91]
 r120: [118..119]
 r121: [108..109]
 r122: [106..107]
 r123: [86..87]
 r124: [76..77]
 r125: [74..75]
 r126: [68..69]
 r127: [62..63]
 r128: [52..53]
 r129: [50..51]
 r130: [46..47]
 r131: [36..37]
 r132: [34..35]
 r133: [32..33]
 r134: [28..29]
 r135: [18..19]
 r136: [14..17]
 r137: [14..15]
 r138: [1..2]
 r139: [230..231]
 r140: [230..231]
 r141: [230..231]
 r142: [230..231]
 r143: [228..229]
 r144: [226..227]
 r145: [224..225]
 r146: [222..223]
 r147: [220..221]
 r148: [218..219]
 r149: [206..207]
 r150: [206..207]
 r151: [204..205]
 r152: [9..10]
 r153: [202..203]
 r154: [198..199] [192..195]
 r155: [196..197]
 r156: [192..193]
 r157: [190..191]
 r158: [186..187]
 r159: [182..183] [176..179]
 r160: [180..181]
 r161: [176..177]
 r162: [174..175]
 r163: [170..171]
 r164: [168..169]
 r165: [164..165] [158..161]
 r166: [162..163]
 r167: [158..159]
 r168: [156..157]
 r169: [152..153]
 r170: [148..149] [142..145]
 r171: [146..147]
 r172: [142..143]
 r173: [140..141]
 r174: [136..137]
 r175: [132..133] [126..129]
 r176: [130..131]
 r177: [126..127]
 r178: [124..125]
 r179: [104..105]
 r180: [100..101] [94..97]
 r181: [98..99]
 r182: [94..95]
 r183: [92..93]
 r184: [120..121]
 r185: [116..117] [110..113]
 r186: [114..115]
 r187: [110..111]
 r188: [108..109]
 r189: [106..107]
 r190: [88..89]
 r191: [84..85] [78..81]
 r192: [82..83]
 r193: [78..79]
 r194: [76..77]
 r195: [72..73]
 r196: [72..73]
 r197: [72..73]
 r198: [72..73]
 r199: [72..73]
 r200: [70..71]
 r201: [68..69]
 r202: [68..69]
 r203: [66..67]
 r204: [5..6]
 r205: [64..65]
 r206: [60..61] [54..57]
 r207: [58..59]
 r208: [54..55]
 r209: [52..53]
 r210: [48..49]
 r211: [44..45] [38..41]
 r212: [42..43]
 r213: [38..39]
 r214: [36..37]
 r215: [30..31]
 r216: [26..27] [20..23]
 r217: [24..25]
 r218: [20..21]
 r219: [18..19]
 r220: [16..17]
 r221: [12..13]
 r222: [12..13]
 r223: [12..13]
 r224: [12..13]
 r226: [232..233]
 r227: [0..0]
 r228: [194..195]
 r229: [178..179]
 r230: [160..161]
 r231: [144..145]
 r232: [128..129]
 r233: [96..97]
 r234: [112..113]
 r235: [80..81]
 r236: [56..57]
 r237: [40..41]
 r238: [22..23]

********** Assignment #1: **********

	 Assigning to 228 (cl=GENERAL_REGS, orig=156, freq=3, tfirst=228, tfreq=3)...
	   Assign 1 to reload r228 (freq=3)
	 Assigning to 229 (cl=GENERAL_REGS, orig=161, freq=3, tfirst=229, tfreq=3)...
	   Assign 1 to reload r229 (freq=3)
	 Assigning to 230 (cl=GENERAL_REGS, orig=167, freq=3, tfirst=230, tfreq=3)...
	   Assign 1 to reload r230 (freq=3)
	 Assigning to 231 (cl=GENERAL_REGS, orig=172, freq=3, tfirst=231, tfreq=3)...
	   Assign 1 to reload r231 (freq=3)
	 Assigning to 232 (cl=GENERAL_REGS, orig=177, freq=3, tfirst=232, tfreq=3)...
	   Assign 1 to reload r232 (freq=3)
	 Assigning to 233 (cl=GENERAL_REGS, orig=182, freq=3, tfirst=233, tfreq=3)...
	   Assign 1 to reload r233 (freq=3)
	 Assigning to 234 (cl=GENERAL_REGS, orig=187, freq=3, tfirst=234, tfreq=3)...
	   Assign 1 to reload r234 (freq=3)
	 Assigning to 235 (cl=GENERAL_REGS, orig=193, freq=3, tfirst=235, tfreq=3)...
	   Assign 1 to reload r235 (freq=3)
	 Assigning to 236 (cl=GENERAL_REGS, orig=208, freq=3, tfirst=236, tfreq=3)...
	   Assign 1 to reload r236 (freq=3)
	 Assigning to 237 (cl=GENERAL_REGS, orig=213, freq=3, tfirst=237, tfreq=3)...
	   Assign 1 to reload r237 (freq=3)
	 Assigning to 238 (cl=GENERAL_REGS, orig=218, freq=3, tfirst=238, tfreq=3)...
	   Assign 1 to reload r238 (freq=3)
	 Assigning to 226 (cl=INDEX_REGS, orig=226, freq=1, tfirst=226, tfreq=1)...
	   Assign 0 to reload r226 (freq=1)
	 Assigning to 227 (cl=INDEX_REGS, orig=227, freq=1, tfirst=227, tfreq=1)...
	   Assign 3 to reload r227 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 262
changing reg in insn 210
changing reg in insn 71
changing reg in insn 49
changing reg in insn 267
changing reg in insn 28
changing reg in insn 30
changing reg in insn 30
changing reg in insn 30
changing reg in insn 43
changing reg in insn 31
changing reg in insn 38
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 54
changing reg in insn 57
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 108
changing reg in insn 112
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 121
changing reg in insn 125
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 134
changing reg in insn 138
changing reg in insn 137
changing reg in insn 138
changing reg in insn 143
changing reg in insn 144
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 157
changing reg in insn 158
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 193
changing reg in insn 196
changing reg in insn 216
changing reg in insn 217
changing reg in insn 221
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 231
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 237
changing reg in insn 240
changing reg in insn 241
changing reg in insn 245
changing reg in insn 247
changing reg in insn 247
changing reg in insn 250
changing reg in insn 249
changing reg in insn 250
changing reg in insn 267
changing reg in insn 271
changing reg in insn 13
changing reg in insn 17
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 20
changing reg in insn 16
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 127
changing reg in insn 130
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 156
changing reg in insn 157
changing reg in insn 160
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 176
changing reg in insn 180
changing reg in insn 185
changing reg in insn 181
changing reg in insn 186
changing reg in insn 182
changing reg in insn 187
changing reg in insn 183
changing reg in insn 188
changing reg in insn 184
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 197
changing reg in insn 195
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 205
changing reg in insn 206
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 222
changing reg in insn 225
changing reg in insn 226
changing reg in insn 229
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 232
changing reg in insn 239
changing reg in insn 240
changing reg in insn 243
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 248
changing reg in insn 251
changing reg in insn 255
changing reg in insn 252
changing reg in insn 256
changing reg in insn 253
changing reg in insn 257
changing reg in insn 254
changing reg in insn 258
changing reg in insn 8
changing reg in insn 272
deleting insn with uid = 20.
deleting insn with uid = 57.
deleting insn with uid = 291.
deleting insn with uid = 293.
deleting insn with uid = 295.
deleting insn with uid = 297.
deleting insn with uid = 299.
deleting insn with uid = 301.
deleting insn with uid = 303.
deleting insn with uid = 305.
deleting insn with uid = 186.
deleting insn with uid = 187.
deleting insn with uid = 188.
deleting insn with uid = 196.
deleting insn with uid = 307.
deleting insn with uid = 309.
deleting insn with uid = 311.
deleting insn with uid = 256.
deleting insn with uid = 257.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 199.
verify found no changes in insn with uid = 209.
verify found no changes in insn with uid = 238.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 274.


create_dir

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={126d,126u} r1={62d,47u,12e} r2={23d,8u,1e} r3={5d,4u} r4={27d,12u} r5={31d,16u} r6={1d,86u} r7={1d,29u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={73d,5u} r18={15d} r19={15d} r20={1d,1u,13e} r21={16d} r22={16d} r23={16d} r24={16d} r25={16d} r26={16d} r27={16d} r28={16d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={19d,4u} r38={16d} r39={15d} r40={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} 
;;    total ref usage 1717{1353d,338u,26e} in 249{234 regular + 15 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 139 140 141 142 143 144 145 146 147 148
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:128 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:128 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])
        (reg:SI 1 dx [ bitvector_len ])) t3.c:128 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])
        (reg:DI 2 cx [ name ])) t3.c:128 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 access+0 S4 A32])
        (reg:SI 37 r8 [ access ])) t3.c:128 90 {*movsi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.4988+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [226])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) t3.c:128 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])
        (const_int 0 [0])) t3.c:129 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])
        (const_int 0 [0])) t3.c:130 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 2 cx [139])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:131 218 {*adddi_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 1 dx [140])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:131 218 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg:SI 4 si [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:131 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:131 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 37 r8)
        (reg:DI 2 cx [139])) t3.c:131 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [140])) t3.c:131 89 {*movdi_internal}
     (nil))
(insn 19 18 21 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) t3.c:131 90 {*movsi_internal}
     (nil))
(insn 21 19 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [142])) t3.c:131 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_zero_bit") [flags 0x3]  <function_decl 0x7fd504f2d360 find_zero_bit>) [0 find_zero_bit S1 A8])
            (const_int 0 [0]))) t3.c:131 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 23 22 24 2 (set (reg:SI 0 ax [143])
        (reg:SI 0 ax)) t3.c:131 90 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])
        (reg:SI 0 ax [143])) t3.c:131 90 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:132 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dir_offset+0 S4 A32])
        (reg:SI 0 ax [144])) t3.c:132 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:135 90 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 1 dx [orig:88 D.4979 ] [88])
        (sign_extend:DI (reg:SI 0 ax [145]))) t3.c:135 142 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:135 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg/f:DI 3 bx [orig:89 D.4980 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 D.4979 ] [88])
                    (reg/f:DI 0 ax [146])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:135 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.4979 ] [88]))
        (nil)))
(insn 31 30 32 2 (set (reg:SI 1 dx [orig:90 D.4978 ] [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])) t3.c:135 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:135 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 2 cx [orig:91 D.4979 ] [91])
        (sign_extend:DI (reg:SI 0 ax [147]))) t3.c:135 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:135 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.4980 ] [92])
                (plus:DI (reg/f:DI 0 ax [148])
                    (reg:DI 2 cx [orig:91 D.4979 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:135 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 2 cx [orig:91 D.4979 ] [91]))
        (nil)))
(insn 36 35 37 2 (set (reg:QI 0 ax [orig:93 D.4981 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 D.4980 ] [92]) [0 *_16+0 S1 A8])) t3.c:135 93 {*movqi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 ax [orig:94 D.4978 ] [94])
        (zero_extend:SI (reg:QI 0 ax [orig:93 D.4981 ] [93]))) t3.c:135 138 {*zero_extendqisi2}
     (nil))
(insn 38 37 39 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:90 D.4978 ] [90])) t3.c:135 90 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:94 D.4978 ] [94])) t3.c:135 90 {*movsi_internal}
     (nil))
(call_insn 40 39 41 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:135 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 41 40 42 2 (set (reg:SI 0 ax [orig:95 D.4978 ] [95])
        (reg:SI 0 ax)) t3.c:135 90 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:QI 0 ax [orig:96 D.4981 ] [96])
        (reg:QI 0 ax [orig:95 D.4978 ] [95])) t3.c:135 93 {*movqi_internal}
     (nil))
(insn 43 42 44 2 (set (mem:QI (reg/f:DI 3 bx [orig:89 D.4980 ] [89]) [0 *_13+0 S1 A8])
        (reg:QI 0 ax [orig:96 D.4981 ] [96])) t3.c:135 93 {*movqi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) t3.c:136 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) t3.c:136 612 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 46 45 47 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd504fc82d0 *.LC0>)) t3.c:137 89 {*movdi_internal}
     (nil))
(call_insn 48 47 49 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:137 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 281 3 (set (reg:SI 0 ax [orig:87 D.4978 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:138 90 {*movsi_internal}
     (nil))
(jump_insn 281 49 282 3 (set (pc)
        (label_ref 265)) t3.c:138 654 {jump}
     (nil)
 -> 265)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 282 281 52)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 149 150 151
(code_label 52 282 53 4 30 "" [1 uses])
(note 53 52 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 4 (set (reg:SI 1 dx [orig:97 D.4978 ] [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:SI 2 cx [149])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 56 55 58 4 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 58 56 59 4 (set (reg:SI 4 si)
        (reg:SI 2 cx [149])) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [150])) t3.c:143 90 {*movsi_internal}
     (nil))
(call_insn 60 59 61 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_index_to_block_number") [flags 0x3]  <function_decl 0x7fd504f2d438 convert_index_to_block_number>) [0 convert_index_to_block_number S1 A8])
            (const_int 0 [0]))) t3.c:143 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 61 60 62 4 (set (reg:SI 0 ax [151])
        (reg:SI 0 ax)) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])
        (reg:SI 0 ax [151])) t3.c:143 90 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) t3.c:144 7 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) t3.c:144 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 152
(note 65 64 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:145 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [152])) t3.c:145 90 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd504fda510 *.LC3>)) t3.c:145 89 {*movdi_internal}
     (nil))
(insn 69 68 70 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:145 93 {*movqi_internal}
     (nil))
(call_insn 70 69 71 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:145 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 71 70 283 5 (set (reg:SI 0 ax [orig:87 D.4978 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:146 90 {*movsi_internal}
     (nil))
(jump_insn 283 71 284 5 (set (pc)
        (label_ref 265)) t3.c:146 654 {jump}
     (nil)
 -> 265)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 284 283 74)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178
(code_label 74 284 75 6 32 "" [1 uses])
(note 75 74 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:150 90 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 0 ax [orig:98 D.4982 ] [98])
        (sign_extend:DI (reg:SI 0 ax [153]))) t3.c:150 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 6 (set (reg:DI 0 ax [154])
        (reg:DI 0 ax [orig:98 D.4982 ] [98])) t3.c:150 89 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg:DI 0 ax [155])
                (ashift:DI (reg:DI 0 ax [154])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:150 512 {*ashldi3_1}
     (nil))
(insn 80 79 290 6 (set (reg:DI 0 ax [154])
        (reg:DI 0 ax [155])) t3.c:150 89 {*movdi_internal}
     (nil))
(insn 290 80 81 6 (set (reg:DI 1 dx [156])
        (reg:DI 0 ax [154])) t3.c:150 89 {*movdi_internal}
     (nil))
(insn 81 290 82 6 (parallel [
            (set (reg:DI 1 dx [156])
                (ashift:DI (reg:DI 1 dx [156])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:150 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 6 (parallel [
            (set (reg:DI 1 dx [orig:99 D.4982 ] [99])
                (plus:DI (reg:DI 1 dx [156])
                    (reg:DI 0 ax [154])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:150 218 {*adddi_1}
     (nil))
(insn 83 82 84 6 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:150 89 {*movdi_internal}
     (nil))
(insn 84 83 85 6 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.4983 ] [100])
                (plus:DI (reg/f:DI 0 ax [157])
                    (reg:DI 1 dx [orig:99 D.4982 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:150 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.4982 ] [99]))
        (nil)))
(insn 85 84 86 6 (set (mem/j:SI (reg/f:DI 0 ax [orig:100 D.4983 ] [100]) [0 _33->type+0 S4 A64])
        (const_int 0 [0])) t3.c:150 90 {*movsi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:151 90 {*movsi_internal}
     (nil))
(insn 87 86 88 6 (set (reg:DI 0 ax [orig:101 D.4982 ] [101])
        (sign_extend:DI (reg:SI 0 ax [158]))) t3.c:151 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 6 (set (reg:DI 0 ax [159])
        (reg:DI 0 ax [orig:101 D.4982 ] [101])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 89 88 90 6 (parallel [
            (set (reg:DI 0 ax [160])
                (ashift:DI (reg:DI 0 ax [159])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:151 512 {*ashldi3_1}
     (nil))
(insn 90 89 292 6 (set (reg:DI 0 ax [159])
        (reg:DI 0 ax [160])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 292 90 91 6 (set (reg:DI 1 dx [161])
        (reg:DI 0 ax [159])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 91 292 92 6 (parallel [
            (set (reg:DI 1 dx [161])
                (ashift:DI (reg:DI 1 dx [161])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:151 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 6 (parallel [
            (set (reg:DI 1 dx [orig:102 D.4982 ] [102])
                (plus:DI (reg:DI 1 dx [161])
                    (reg:DI 0 ax [159])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:151 218 {*adddi_1}
     (nil))
(insn 93 92 94 6 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.4983 ] [103])
                (plus:DI (reg/f:DI 0 ax [162])
                    (reg:DI 1 dx [orig:102 D.4982 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:151 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.4982 ] [102]))
        (nil)))
(insn 95 94 96 6 (parallel [
            (set (reg/f:DI 1 dx [orig:104 D.4984 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:103 D.4983 ] [103])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:151 218 {*adddi_1}
     (nil))
(insn 96 95 97 6 (set (reg:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:DI 4 si)
        (reg:DI 0 ax [163])) t3.c:151 89 {*movdi_internal}
     (nil))
(insn 98 97 99 6 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:104 D.4984 ] [104])) t3.c:151 89 {*movdi_internal}
     (nil))
(call_insn 99 98 100 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fd50512d288 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) t3.c:151 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 100 99 101 6 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:152 90 {*movsi_internal}
     (nil))
(insn 101 100 102 6 (set (reg:DI 0 ax [orig:105 D.4982 ] [105])
        (sign_extend:DI (reg:SI 0 ax [164]))) t3.c:152 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 6 (set (reg:DI 0 ax [165])
        (reg:DI 0 ax [orig:105 D.4982 ] [105])) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 103 102 104 6 (parallel [
            (set (reg:DI 0 ax [166])
                (ashift:DI (reg:DI 0 ax [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:152 512 {*ashldi3_1}
     (nil))
(insn 104 103 294 6 (set (reg:DI 0 ax [165])
        (reg:DI 0 ax [166])) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 294 104 105 6 (set (reg:DI 1 dx [167])
        (reg:DI 0 ax [165])) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 105 294 106 6 (parallel [
            (set (reg:DI 1 dx [167])
                (ashift:DI (reg:DI 1 dx [167])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:152 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 6 (parallel [
            (set (reg:DI 1 dx [orig:106 D.4982 ] [106])
                (plus:DI (reg:DI 1 dx [167])
                    (reg:DI 0 ax [165])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:152 218 {*adddi_1}
     (nil))
(insn 107 106 108 6 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (parallel [
            (set (reg/f:DI 3 bx [orig:107 D.4983 ] [107])
                (plus:DI (reg:DI 1 dx [orig:106 D.4982 ] [106])
                    (reg/f:DI 0 ax [168])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.4982 ] [106]))
        (nil)))
(insn 109 108 110 6 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:152 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:152 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 111 110 112 6 (set (reg:DI 0 ax [orig:108 D.4985 ] [108])
        (reg:DI 0 ax)) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 112 111 113 6 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:107 D.4983 ] [107])
                (const_int 136 [0x88])) [0 _43->content.fd.creat_t+0 S8 A64])
        (reg:DI 0 ax [orig:108 D.4985 ] [108])) t3.c:152 89 {*movdi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:153 90 {*movsi_internal}
     (nil))
(insn 114 113 115 6 (set (reg:DI 0 ax [orig:109 D.4982 ] [109])
        (sign_extend:DI (reg:SI 0 ax [169]))) t3.c:153 142 {*extendsidi2_rex64}
     (nil))
(insn 115 114 116 6 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [orig:109 D.4982 ] [109])) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 116 115 117 6 (parallel [
            (set (reg:DI 0 ax [171])
                (ashift:DI (reg:DI 0 ax [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:153 512 {*ashldi3_1}
     (nil))
(insn 117 116 296 6 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [171])) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 296 117 118 6 (set (reg:DI 1 dx [172])
        (reg:DI 0 ax [170])) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 118 296 119 6 (parallel [
            (set (reg:DI 1 dx [172])
                (ashift:DI (reg:DI 1 dx [172])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:153 512 {*ashldi3_1}
     (nil))
(insn 119 118 120 6 (parallel [
            (set (reg:DI 1 dx [orig:110 D.4982 ] [110])
                (plus:DI (reg:DI 1 dx [172])
                    (reg:DI 0 ax [170])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:153 218 {*adddi_1}
     (nil))
(insn 120 119 121 6 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 121 120 122 6 (parallel [
            (set (reg/f:DI 3 bx [orig:111 D.4983 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 D.4982 ] [110])
                    (reg/f:DI 0 ax [173])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:153 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.4982 ] [110]))
        (nil)))
(insn 122 121 123 6 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:153 89 {*movdi_internal}
     (nil))
(call_insn 123 122 124 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:153 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 124 123 125 6 (set (reg:DI 0 ax [orig:112 D.4985 ] [112])
        (reg:DI 0 ax)) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 125 124 126 6 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:111 D.4983 ] [111])
                (const_int 144 [0x90])) [0 _49->content.fd.access_t+0 S8 A64])
        (reg:DI 0 ax [orig:112 D.4985 ] [112])) t3.c:153 89 {*movdi_internal}
     (nil))
(insn 126 125 127 6 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:154 90 {*movsi_internal}
     (nil))
(insn 127 126 128 6 (set (reg:DI 0 ax [orig:113 D.4982 ] [113])
        (sign_extend:DI (reg:SI 0 ax [174]))) t3.c:154 142 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 6 (set (reg:DI 0 ax [175])
        (reg:DI 0 ax [orig:113 D.4982 ] [113])) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 129 128 130 6 (parallel [
            (set (reg:DI 0 ax [176])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:154 512 {*ashldi3_1}
     (nil))
(insn 130 129 298 6 (set (reg:DI 0 ax [175])
        (reg:DI 0 ax [176])) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 298 130 131 6 (set (reg:DI 1 dx [177])
        (reg:DI 0 ax [175])) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 131 298 132 6 (parallel [
            (set (reg:DI 1 dx [177])
                (ashift:DI (reg:DI 1 dx [177])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:154 512 {*ashldi3_1}
     (nil))
(insn 132 131 133 6 (parallel [
            (set (reg:DI 1 dx [orig:114 D.4982 ] [114])
                (plus:DI (reg:DI 1 dx [177])
                    (reg:DI 0 ax [175])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:154 218 {*adddi_1}
     (nil))
(insn 133 132 134 6 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 134 133 135 6 (parallel [
            (set (reg/f:DI 3 bx [orig:115 D.4983 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.4982 ] [114])
                    (reg/f:DI 0 ax [178])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:154 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.4982 ] [114]))
        (nil)))
(insn 135 134 136 6 (set (reg:DI 5 di)
        (const_int 0 [0])) t3.c:154 89 {*movdi_internal}
     (nil))
(call_insn 136 135 137 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7fd50523c000 time>) [0 time S1 A8])
            (const_int 0 [0]))) t3.c:154 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 137 136 138 6 (set (reg:DI 0 ax [orig:116 D.4985 ] [116])
        (reg:DI 0 ax)) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 138 137 139 6 (set (mem/j:DI (plus:DI (reg/f:DI 3 bx [orig:115 D.4983 ] [115])
                (const_int 152 [0x98])) [0 _55->content.fd.mod_t+0 S8 A64])
        (reg:DI 0 ax [orig:116 D.4985 ] [116])) t3.c:154 89 {*movdi_internal}
     (nil))
(insn 139 138 140 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 access+0 S4 A32])
            (const_int 0 [0]))) t3.c:155 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 140 139 141 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) t3.c:155 612 {*jcc_1}
     (nil)
 -> 154)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 179 180 181 182 183
(note 141 140 142 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 7 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:157 90 {*movsi_internal}
     (nil))
(insn 143 142 144 7 (set (reg:DI 0 ax [orig:117 D.4982 ] [117])
        (sign_extend:DI (reg:SI 0 ax [179]))) t3.c:157 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 7 (set (reg:DI 0 ax [180])
        (reg:DI 0 ax [orig:117 D.4982 ] [117])) t3.c:157 89 {*movdi_internal}
     (nil))
(insn 145 144 146 7 (parallel [
            (set (reg:DI 0 ax [181])
                (ashift:DI (reg:DI 0 ax [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:157 512 {*ashldi3_1}
     (nil))
(insn 146 145 300 7 (set (reg:DI 0 ax [180])
        (reg:DI 0 ax [181])) t3.c:157 89 {*movdi_internal}
     (nil))
(insn 300 146 147 7 (set (reg:DI 1 dx [182])
        (reg:DI 0 ax [180])) t3.c:157 89 {*movdi_internal}
     (nil))
(insn 147 300 148 7 (parallel [
            (set (reg:DI 1 dx [182])
                (ashift:DI (reg:DI 1 dx [182])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:157 512 {*ashldi3_1}
     (nil))
(insn 148 147 149 7 (parallel [
            (set (reg:DI 1 dx [orig:118 D.4982 ] [118])
                (plus:DI (reg:DI 1 dx [182])
                    (reg:DI 0 ax [180])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:157 218 {*adddi_1}
     (nil))
(insn 149 148 150 7 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:157 89 {*movdi_internal}
     (nil))
(insn 150 149 151 7 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.4983 ] [119])
                (plus:DI (reg/f:DI 0 ax [183])
                    (reg:DI 1 dx [orig:118 D.4982 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:157 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.4982 ] [118]))
        (nil)))
(insn 151 150 285 7 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:119 D.4983 ] [119])
                (const_int 160 [0xa0])) [0 _62->content.fd.access+0 S4 A64])
        (const_int 484 [0x1e4])) t3.c:157 90 {*movsi_internal}
     (nil))
(jump_insn 285 151 286 7 (set (pc)
        (label_ref 167)) 654 {jump}
     (nil)
 -> 167)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 286 285 154)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 184 185 186 187 188 189
(code_label 154 286 155 8 33 "" [1 uses])
(note 155 154 156 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 8 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:160 90 {*movsi_internal}
     (nil))
(insn 157 156 158 8 (set (reg:DI 0 ax [orig:120 D.4982 ] [120])
        (sign_extend:DI (reg:SI 0 ax [184]))) t3.c:160 142 {*extendsidi2_rex64}
     (nil))
(insn 158 157 159 8 (set (reg:DI 0 ax [185])
        (reg:DI 0 ax [orig:120 D.4982 ] [120])) t3.c:160 89 {*movdi_internal}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg:DI 0 ax [186])
                (ashift:DI (reg:DI 0 ax [185])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:160 512 {*ashldi3_1}
     (nil))
(insn 160 159 302 8 (set (reg:DI 0 ax [185])
        (reg:DI 0 ax [186])) t3.c:160 89 {*movdi_internal}
     (nil))
(insn 302 160 161 8 (set (reg:DI 1 dx [187])
        (reg:DI 0 ax [185])) t3.c:160 89 {*movdi_internal}
     (nil))
(insn 161 302 162 8 (parallel [
            (set (reg:DI 1 dx [187])
                (ashift:DI (reg:DI 1 dx [187])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:160 512 {*ashldi3_1}
     (nil))
(insn 162 161 163 8 (parallel [
            (set (reg:DI 1 dx [orig:121 D.4982 ] [121])
                (plus:DI (reg:DI 1 dx [187])
                    (reg:DI 0 ax [185])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:160 218 {*adddi_1}
     (nil))
(insn 163 162 164 8 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:160 89 {*movdi_internal}
     (nil))
(insn 164 163 165 8 (parallel [
            (set (reg/f:DI 1 dx [orig:122 D.4983 ] [122])
                (plus:DI (reg:DI 1 dx [orig:121 D.4982 ] [121])
                    (reg/f:DI 0 ax [188])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:160 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.4982 ] [121]))
        (nil)))
(insn 165 164 166 8 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 access+0 S4 A32])) t3.c:160 90 {*movsi_internal}
     (nil))
(insn 166 165 167 8 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:122 D.4983 ] [122])
                (const_int 160 [0xa0])) [0 _66->content.fd.access+0 S4 A64])
        (reg:SI 0 ax [189])) t3.c:160 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 124 125 126 190 191 192 193 194 195 196 197 198 199 200 201 202 203
(code_label 167 166 168 9 34 "" [1 uses])
(note 168 167 169 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 9 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:161 90 {*movsi_internal}
     (nil))
(insn 170 169 171 9 (set (reg:DI 0 ax [orig:123 D.4982 ] [123])
        (sign_extend:DI (reg:SI 0 ax [190]))) t3.c:161 142 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 9 (set (reg:DI 0 ax [191])
        (reg:DI 0 ax [orig:123 D.4982 ] [123])) t3.c:161 89 {*movdi_internal}
     (nil))
(insn 172 171 173 9 (parallel [
            (set (reg:DI 0 ax [192])
                (ashift:DI (reg:DI 0 ax [191])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:161 512 {*ashldi3_1}
     (nil))
(insn 173 172 304 9 (set (reg:DI 0 ax [191])
        (reg:DI 0 ax [192])) t3.c:161 89 {*movdi_internal}
     (nil))
(insn 304 173 174 9 (set (reg:DI 1 dx [193])
        (reg:DI 0 ax [191])) t3.c:161 89 {*movdi_internal}
     (nil))
(insn 174 304 175 9 (parallel [
            (set (reg:DI 1 dx [193])
                (ashift:DI (reg:DI 1 dx [193])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:161 512 {*ashldi3_1}
     (nil))
(insn 175 174 176 9 (parallel [
            (set (reg:DI 1 dx [orig:124 D.4982 ] [124])
                (plus:DI (reg:DI 1 dx [193])
                    (reg:DI 0 ax [191])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:161 218 {*adddi_1}
     (nil))
(insn 176 175 177 9 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:161 89 {*movdi_internal}
     (nil))
(insn 177 176 178 9 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.4983 ] [125])
                (plus:DI (reg/f:DI 0 ax [194])
                    (reg:DI 1 dx [orig:124 D.4982 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.4982 ] [124]))
        (nil)))
(insn 178 177 179 9 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:125 D.4983 ] [125])
                (const_int 166 [0xa6])) [0 _70->content.fd.size+0 S2 A16])
        (const_int 0 [0])) t3.c:161 92 {*movhi_internal}
     (nil))
(insn 179 178 180 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 mask+0 S4 A32])
        (const_int 0 [0])) t3.c:164 90 {*movsi_internal}
     (nil))
(insn 180 179 181 9 (parallel [
            (set (reg:DI 5 di [195])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:165 218 {*adddi_1}
     (nil))
(insn 181 180 182 9 (parallel [
            (set (reg:DI 2 cx [196])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:165 218 {*adddi_1}
     (nil))
(insn 182 181 183 9 (set (reg:SI 1 dx [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:165 90 {*movsi_internal}
     (nil))
(insn 183 182 184 9 (set (reg:SI 4 si [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:165 90 {*movsi_internal}
     (nil))
(insn 184 183 185 9 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:165 89 {*movdi_internal}
     (nil))
(insn 185 184 189 9 (set (reg:DI 37 r8)
        (reg:DI 5 di [195])) t3.c:165 89 {*movdi_internal}
     (nil))
(insn 189 185 190 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) t3.c:165 89 {*movdi_internal}
     (nil))
(call_insn 190 189 191 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_zero_bit") [flags 0x3]  <function_decl 0x7fd504f2d360 find_zero_bit>) [0 find_zero_bit S1 A8])
            (const_int 0 [0]))) t3.c:165 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 191 190 192 9 (set (reg:SI 0 ax [200])
        (reg:SI 0 ax)) t3.c:165 90 {*movsi_internal}
     (nil))
(insn 192 191 193 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 indexnode_index+0 S4 A32])
        (reg:SI 0 ax [200])) t3.c:165 90 {*movsi_internal}
     (nil))
(insn 193 192 194 9 (set (reg:SI 1 dx [orig:126 D.4978 ] [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 offset+0 S4 A64])) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 194 193 195 9 (set (reg:SI 2 cx [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 indexnode_index+0 S4 A32])) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 195 194 197 9 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 197 195 198 9 (set (reg:SI 4 si)
        (reg:SI 2 cx [201])) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 198 197 199 9 (set (reg:SI 5 di)
        (reg:SI 0 ax [202])) t3.c:166 90 {*movsi_internal}
     (nil))
(call_insn 199 198 200 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_index_to_block_number") [flags 0x3]  <function_decl 0x7fd504f2d438 convert_index_to_block_number>) [0 convert_index_to_block_number S1 A8])
            (const_int 0 [0]))) t3.c:166 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 200 199 201 9 (set (reg:SI 0 ax [203])
        (reg:SI 0 ax)) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 201 200 202 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])
        (reg:SI 0 ax [203])) t3.c:166 90 {*movsi_internal}
     (nil))
(insn 202 201 203 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) t3.c:167 7 {*cmpsi_1}
     (nil))
(jump_insn 203 202 204 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 213)
            (pc))) t3.c:167 612 {*jcc_1}
     (nil)
 -> 213)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 204
(note 204 203 205 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 205 204 206 10 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])) t3.c:168 90 {*movsi_internal}
     (nil))
(insn 206 205 207 10 (set (reg:SI 4 si)
        (reg:SI 0 ax [204])) t3.c:168 90 {*movsi_internal}
     (nil))
(insn 207 206 208 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fd504fda5a0 *.LC4>)) t3.c:168 89 {*movdi_internal}
     (nil))
(insn 208 207 209 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:168 93 {*movqi_internal}
     (nil))
(call_insn 209 208 210 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:168 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 210 209 287 10 (set (reg:SI 0 ax [orig:87 D.4978 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:169 90 {*movsi_internal}
     (nil))
(jump_insn 287 210 288 10 (set (pc)
        (label_ref 265)) t3.c:169 654 {jump}
     (nil)
 -> 265)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 288 287 213)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 127 128 129 130 131 132 133 134 135 136 137 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224
(code_label 213 288 214 11 35 "" [1 uses])
(note 214 213 215 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 216 11 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])) t3.c:171 90 {*movsi_internal}
     (nil))
(insn 216 215 217 11 (set (reg:DI 0 ax [orig:127 D.4982 ] [127])
        (sign_extend:DI (reg:SI 0 ax [205]))) t3.c:171 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 11 (set (reg:DI 0 ax [206])
        (reg:DI 0 ax [orig:127 D.4982 ] [127])) t3.c:171 89 {*movdi_internal}
     (nil))
(insn 218 217 219 11 (parallel [
            (set (reg:DI 0 ax [207])
                (ashift:DI (reg:DI 0 ax [206])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:171 512 {*ashldi3_1}
     (nil))
(insn 219 218 306 11 (set (reg:DI 0 ax [206])
        (reg:DI 0 ax [207])) t3.c:171 89 {*movdi_internal}
     (nil))
(insn 306 219 220 11 (set (reg:DI 1 dx [208])
        (reg:DI 0 ax [206])) t3.c:171 89 {*movdi_internal}
     (nil))
(insn 220 306 221 11 (parallel [
            (set (reg:DI 1 dx [208])
                (ashift:DI (reg:DI 1 dx [208])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:171 512 {*ashldi3_1}
     (nil))
(insn 221 220 222 11 (parallel [
            (set (reg:DI 1 dx [orig:128 D.4982 ] [128])
                (plus:DI (reg:DI 1 dx [208])
                    (reg:DI 0 ax [206])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:171 218 {*adddi_1}
     (nil))
(insn 222 221 223 11 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:171 89 {*movdi_internal}
     (nil))
(insn 223 222 224 11 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.4983 ] [129])
                (plus:DI (reg/f:DI 0 ax [209])
                    (reg:DI 1 dx [orig:128 D.4982 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:171 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.4982 ] [128]))
        (nil)))
(insn 224 223 225 11 (set (mem/j:SI (reg/f:DI 0 ax [orig:129 D.4983 ] [129]) [0 _82->type+0 S4 A64])
        (const_int 2 [0x2])) t3.c:171 90 {*movsi_internal}
     (nil))
(insn 225 224 226 11 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])) t3.c:172 90 {*movsi_internal}
     (nil))
(insn 226 225 227 11 (set (reg:DI 0 ax [orig:130 D.4982 ] [130])
        (sign_extend:DI (reg:SI 0 ax [210]))) t3.c:172 142 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 11 (set (reg:DI 0 ax [211])
        (reg:DI 0 ax [orig:130 D.4982 ] [130])) t3.c:172 89 {*movdi_internal}
     (nil))
(insn 228 227 229 11 (parallel [
            (set (reg:DI 0 ax [212])
                (ashift:DI (reg:DI 0 ax [211])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:172 512 {*ashldi3_1}
     (nil))
(insn 229 228 308 11 (set (reg:DI 0 ax [211])
        (reg:DI 0 ax [212])) t3.c:172 89 {*movdi_internal}
     (nil))
(insn 308 229 230 11 (set (reg:DI 1 dx [213])
        (reg:DI 0 ax [211])) t3.c:172 89 {*movdi_internal}
     (nil))
(insn 230 308 231 11 (parallel [
            (set (reg:DI 1 dx [213])
                (ashift:DI (reg:DI 1 dx [213])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:172 512 {*ashldi3_1}
     (nil))
(insn 231 230 232 11 (parallel [
            (set (reg:DI 1 dx [orig:131 D.4982 ] [131])
                (plus:DI (reg:DI 1 dx [213])
                    (reg:DI 0 ax [211])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:172 218 {*adddi_1}
     (nil))
(insn 232 231 233 11 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:172 89 {*movdi_internal}
     (nil))
(insn 233 232 234 11 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.4983 ] [132])
                (plus:DI (reg/f:DI 0 ax [214])
                    (reg:DI 1 dx [orig:131 D.4982 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:172 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.4982 ] [131]))
        (nil)))
(insn 234 233 235 11 (parallel [
            (set (reg/f:DI 0 ax [orig:133 D.4986 ] [133])
                (plus:DI (reg/f:DI 0 ax [orig:132 D.4983 ] [132])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:172 218 {*adddi_1}
     (nil))
(insn 235 234 236 11 (set (reg:DI 1 dx)
        (const_int 126 [0x7e])) t3.c:172 89 {*movdi_internal}
     (nil))
(insn 236 235 237 11 (set (reg:SI 4 si)
        (const_int 0 [0])) t3.c:172 90 {*movsi_internal}
     (nil))
(insn 237 236 238 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:133 D.4986 ] [133])) t3.c:172 89 {*movdi_internal}
     (nil))
(call_insn 238 237 239 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7fd50512a438 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) t3.c:172 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 239 238 240 11 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])) t3.c:175 90 {*movsi_internal}
     (nil))
(insn 240 239 241 11 (set (reg:DI 0 ax [orig:134 D.4982 ] [134])
        (sign_extend:DI (reg:SI 0 ax [215]))) t3.c:175 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 11 (set (reg:DI 0 ax [216])
        (reg:DI 0 ax [orig:134 D.4982 ] [134])) t3.c:175 89 {*movdi_internal}
     (nil))
(insn 242 241 243 11 (parallel [
            (set (reg:DI 0 ax [217])
                (ashift:DI (reg:DI 0 ax [216])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:175 512 {*ashldi3_1}
     (nil))
(insn 243 242 310 11 (set (reg:DI 0 ax [216])
        (reg:DI 0 ax [217])) t3.c:175 89 {*movdi_internal}
     (nil))
(insn 310 243 244 11 (set (reg:DI 1 dx [218])
        (reg:DI 0 ax [216])) t3.c:175 89 {*movdi_internal}
     (nil))
(insn 244 310 245 11 (parallel [
            (set (reg:DI 1 dx [218])
                (ashift:DI (reg:DI 1 dx [218])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:175 512 {*ashldi3_1}
     (nil))
(insn 245 244 246 11 (parallel [
            (set (reg:DI 1 dx [orig:135 D.4982 ] [135])
                (plus:DI (reg:DI 1 dx [218])
                    (reg:DI 0 ax [216])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:175 218 {*adddi_1}
     (nil))
(insn 246 245 247 11 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:175 89 {*movdi_internal}
     (nil))
(insn 247 246 248 11 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.4983 ] [136])
                (plus:DI (reg/f:DI 0 ax [219])
                    (reg:DI 1 dx [orig:135 D.4982 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:175 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.4982 ] [135]))
        (nil)))
(insn 248 247 249 11 (set (reg:SI 1 dx [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 index_blockNumber+0 S4 A32])) t3.c:175 90 {*movsi_internal}
     (nil))
(insn 249 248 250 11 (set (reg:HI 1 dx [orig:137 D.4987 ] [137])
        (reg:HI 1 dx [220])) t3.c:175 92 {*movhi_internal}
     (nil))
(insn 250 249 251 11 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:136 D.4983 ] [136])
                (const_int 168 [0xa8])) [0 _91->content.fd.block_ref+0 S2 A64])
        (reg:HI 1 dx [orig:137 D.4987 ] [137])) t3.c:175 92 {*movhi_internal}
     (nil))
(insn 251 250 252 11 (set (reg:SI 4 si [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dir_offset+0 S4 A32])) t3.c:176 90 {*movsi_internal}
     (nil))
(insn 252 251 253 11 (set (reg:SI 2 cx [222])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 index+0 S4 A32])) t3.c:176 90 {*movsi_internal}
     (nil))
(insn 253 252 254 11 (set (reg:SI 1 dx [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:176 90 {*movsi_internal}
     (nil))
(insn 254 253 255 11 (set (reg:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])) t3.c:176 89 {*movdi_internal}
     (nil))
(insn 255 254 258 11 (set (reg:SI 37 r8)
        (reg:SI 4 si [221])) t3.c:176 90 {*movsi_internal}
     (nil))
(insn 258 255 259 11 (set (reg:DI 4 si)
        (reg:DI 0 ax [224])) t3.c:176 89 {*movdi_internal}
     (nil))
(insn 259 258 260 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fd504fda630 *.LC5>)) t3.c:176 89 {*movdi_internal}
     (nil))
(insn 260 259 261 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:176 93 {*movqi_internal}
     (nil))
(call_insn 261 260 262 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:176 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 262 261 265 11 (set (reg:SI 0 ax [orig:87 D.4978 ] [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir_blockNumber+0 S4 A32])) t3.c:177 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              5 [100.0%] 
;;              3 [100.0%] 
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 138
(code_label 265 262 266 12 36 "" [3 uses])
(note 266 265 267 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 271 12 (set (reg:SI 0 ax [orig:138 <retval> ] [138])
        (reg:SI 0 ax [orig:87 D.4978 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 271 267 272 12 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:138 <retval> ] [138])) t3.c:178 90 {*movsi_internal}
     (nil))
(insn 272 271 273 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.4988+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [227]))
        ]) t3.c:178 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 273 272 279 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) t3.c:178 612 {*jcc_1}
     (nil)
 -> 276)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 279 273 274 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 274 279 275 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd504fa9288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) t3.c:178 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 275 274 276)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 276 275 280 14 37 "" [1 uses])
(note 280 276 277 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 277 280 289 14 (use (reg/i:SI 0 ax)) t3.c:178 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 289 277 0 NOTE_INSN_DELETED)

;; Function delete_file (delete_file, funcdef_no=9, decl_uid=4492, cgraph_uid=9, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=199 from oldreg=132, assigning class GENERAL_REGS to r199
   29: {r199:DI=r199:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  229: r199:DI=r130:DI
    Inserting insn reload after:
  230: r132:DI=r199:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 59:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=200 from oldreg=148, assigning class GENERAL_REGS to r200
   68: {r200:SI=r200:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  231: r200:SI=r147:SI
    Inserting insn reload after:
  232: r148:SI=r200:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 72:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) qm {*zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 105:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 112:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=201 from oldreg=162, assigning class GENERAL_REGS to r201
  123: {r201:DI=r201:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  233: r201:DI=r160:DI
    Inserting insn reload after:
  234: r162:DI=r201:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 141:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 150:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=202 from oldreg=179, assigning class GENERAL_REGS to r202
  150: {r202:SI=r202:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  235: r202:SI=r178:SI
    Inserting insn reload after:
  236: r179:SI=r202:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 151
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 154:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 166:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) qm {*zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 178
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 187:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=203 from oldreg=193, assigning class GENERAL_REGS to r203
  195: {r203:DI=r203:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  237: r203:DI=r191:DI
    Inserting insn reload after:
  238: r193:DI=r203:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 207:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
  BB 6
   Insn 220: point = 4
   Insn 40: point = 4
   Insn 39: point = 5
   Insn 38: point = 5
  BB 19
   Insn 210: point = 5
   Insn 209: point = 6
   Insn 208: point = 6
   Insn 207: point = 6
   Insn 206: point = 6
   Insn 205: point = 7
   Insn 204: point = 8
   Insn 203: point = 9
   Insn 202: point = 10
   Insn 201: point = 11
   Insn 200: point = 12
   Insn 199: point = 13
   Insn 198: point = 15
   Insn 197: point = 17
   Insn 196: point = 18
   Insn 238: point = 20
	Hard reg 1 is preferable by r203 with profit 1
   Insn 195: point = 22
   Insn 237: point = 22
   Insn 194: point = 23
   Insn 193: point = 25
   Insn 192: point = 27
   Insn 191: point = 29
   Insn 190: point = 31
  BB 18
   Insn 187: point = 32
   Insn 186: point = 33
   Insn 185: point = 35
   Insn 184: point = 36
   Insn 183: point = 36
   Insn 182: point = 37
   Insn 181: point = 38
   Insn 180: point = 39
   Insn 179: point = 41
   Insn 178: point = 43
   Insn 177: point = 45
   Insn 176: point = 46
   Insn 175: point = 48
   Insn 174: point = 49
   Insn 173: point = 51
   Insn 172: point = 52
   Insn 171: point = 54
  BB 17
   Insn 169: point = 55
   Insn 168: point = 55
   Insn 167: point = 56
   Insn 166: point = 58
   Insn 165: point = 60
   Insn 164: point = 62
   Insn 163: point = 63
   Insn 162: point = 65
  BB 16
   Insn 160: point = 66
   Insn 159: point = 66
   Insn 158: point = 67
  BB 14
   Insn 226: point = 68
   Insn 145: point = 68
   Insn 144: point = 68
   Insn 143: point = 68
   Insn 142: point = 69
   Insn 141: point = 71
   Insn 140: point = 73
   Insn 139: point = 75
   Insn 138: point = 77
   Insn 137: point = 78
   Insn 136: point = 79
   Insn 135: point = 80
   Insn 134: point = 82
   Insn 133: point = 83
   Insn 132: point = 83
   Insn 131: point = 84
   Insn 130: point = 86
   Insn 129: point = 87
   Insn 128: point = 88
   Insn 127: point = 90
   Insn 126: point = 92
   Insn 125: point = 94
   Insn 124: point = 95
   Insn 234: point = 97
	Hard reg 1 is preferable by r201 with profit 1
   Insn 123: point = 99
   Insn 233: point = 99
   Insn 122: point = 100
   Insn 121: point = 102
   Insn 120: point = 104
   Insn 119: point = 106
   Insn 118: point = 108
  BB 12
   Insn 224: point = 109
   Insn 105: point = 109
   Insn 104: point = 110
   Insn 103: point = 112
   Insn 102: point = 113
   Insn 101: point = 113
   Insn 100: point = 114
   Insn 99: point = 115
   Insn 98: point = 116
   Insn 97: point = 118
   Insn 96: point = 120
   Insn 95: point = 122
   Insn 94: point = 123
   Insn 93: point = 125
   Insn 92: point = 126
   Insn 91: point = 128
   Insn 90: point = 129
   Insn 89: point = 131
  BB 13
   Insn 115: point = 132
   Insn 114: point = 132
   Insn 113: point = 132
   Insn 112: point = 132
  BB 11
   Insn 87: point = 132
   Insn 86: point = 132
   Insn 85: point = 133
   Insn 84: point = 135
   Insn 83: point = 137
   Insn 82: point = 139
   Insn 81: point = 140
   Insn 80: point = 142
  BB 10
   Insn 78: point = 143
   Insn 77: point = 143
   Insn 76: point = 144
  BB 8
   Insn 222: point = 145
   Insn 63: point = 145
   Insn 62: point = 145
   Insn 61: point = 145
   Insn 60: point = 146
   Insn 59: point = 148
   Insn 58: point = 150
   Insn 57: point = 152
   Insn 56: point = 154
   Insn 55: point = 155
   Insn 54: point = 156
   Insn 53: point = 157
   Insn 52: point = 159
   Insn 51: point = 160
   Insn 50: point = 160
   Insn 49: point = 161
   Insn 48: point = 163
  BB 7
   Insn 46: point = 164
   Insn 45: point = 164
  BB 5
   Insn 35: point = 164
   Insn 34: point = 164
   Insn 33: point = 165
   Insn 32: point = 167
   Insn 31: point = 169
   Insn 30: point = 170
   Insn 230: point = 172
	Hard reg 1 is preferable by r199 with profit 1
   Insn 29: point = 174
   Insn 229: point = 174
   Insn 28: point = 175
   Insn 27: point = 177
   Insn 26: point = 179
   Insn 25: point = 181
   Insn 24: point = 183
  BB 4
   Insn 22: point = 184
   Insn 21: point = 184
   Insn 20: point = 185
   Insn 19: point = 187
  BB 3
   Insn 16: point = 188
   Insn 15: point = 188
   Insn 14: point = 189
   Insn 13: point = 191
  BB 2
   Insn 11: point = 192
   Insn 10: point = 192
   Insn 6: point = 192
   Insn 5: point = 192
   Insn 4: point = 192
   Insn 3: point = 192
   Insn 2: point = 192
  BB 9
   Insn 72: point = 192
   Insn 71: point = 192
   Insn 70: point = 193
   Insn 69: point = 195
   Insn 232: point = 197
	Hard reg 1 is preferable by r200 with profit 1
   Insn 68: point = 199
   Insn 231: point = 199
   Insn 67: point = 200
  BB 15
   Insn 154: point = 201
   Insn 153: point = 201
   Insn 152: point = 202
   Insn 151: point = 204
   Insn 236: point = 206
	Hard reg 1 is preferable by r202 with profit 1
   Insn 150: point = 208
   Insn 235: point = 208
   Insn 149: point = 209
 r87: [2..5]
 r88: [188..189]
 r89: [184..185]
 r90: [180..181]
 r91: [168..170]
 r92: [166..167]
 r93: [164..165]
 r94: [138..140]
 r95: [136..137]
 r96: [134..135]
 r97: [132..133]
 r98: [127..129]
 r99: [109..126]
 r100: [121..123]
 r101: [119..120]
 r102: [117..118]
 r103: [113..116]
 r104: [111..112]
 r105: [109..110]
 r106: [105..106]
 r107: [93..95]
 r108: [91..92]
 r109: [89..90]
 r110: [61..63]
 r111: [59..60]
 r112: [57..58]
 r113: [55..56]
 r114: [50..52]
 r115: [32..49]
 r116: [44..46]
 r117: [42..43]
 r118: [40..41]
 r119: [36..39]
 r120: [34..35]
 r121: [32..33]
 r122: [28..29]
 r123: [16..18]
 r124: [14..15]
 r125: [6..13]
 r126: [0..1]
 r127: [190..191]
 r128: [186..187]
 r129: [182..183]
 r130: [178..179] [171..175]
 r131: [176..177]
 r132: [171..172]
 r133: [168..169]
 r135: [162..163]
 r136: [158..161]
 r137: [159..160]
 r138: [156..157]
 r140: [151..155]
 r141: [153..154]
 r142: [147..152]
 r143: [149..150]
 r144: [147..148]
 r145: [145..146]
 r147: [196..200]
 r148: [196..197]
 r149: [194..195]
 r150: [192..193]
 r151: [143..144]
 r152: [141..142]
 r153: [138..139]
 r154: [130..131]
 r155: [127..128]
 r156: [124..125]
 r157: [121..122]
 r158: [114..115]
 r159: [107..108]
 r160: [103..104] [96..100]
 r161: [101..102]
 r162: [96..97]
 r163: [93..94]
 r164: [87..88]
 r166: [85..86]
 r167: [81..84]
 r168: [82..83]
 r169: [79..80]
 r171: [74..78]
 r172: [76..77]
 r173: [70..75]
 r174: [72..73]
 r175: [70..71]
 r176: [68..69]
 r178: [205..209]
 r179: [205..206]
 r180: [203..204]
 r181: [201..202]
 r182: [66..67]
 r183: [64..65]
 r184: [61..62]
 r185: [53..54]
 r186: [50..51]
 r187: [47..48]
 r188: [44..45]
 r189: [37..38]
 r190: [30..31]
 r191: [26..27] [19..23]
 r192: [24..25]
 r193: [19..20]
 r194: [16..17]
 r195: [9..12]
 r196: [8..11]
 r197: [7..10]
 r199: [173..174]
 r200: [198..199]
 r201: [98..99]
 r202: [207..208]
 r203: [21..22]
Compressing live ranges: from 210 to 176 - 83%
Ranges after the compression:
 r87: [2..3]
 r88: [156..157]
 r89: [152..153]
 r90: [148..149]
 r91: [138..139]
 r92: [136..137]
 r93: [134..135]
 r94: [112..113]
 r95: [110..111]
 r96: [108..109]
 r97: [106..107]
 r98: [102..103]
 r99: [88..101]
 r100: [98..99]
 r101: [96..97]
 r102: [94..95]
 r103: [92..93]
 r104: [90..91]
 r105: [88..89]
 r106: [84..85]
 r107: [74..75]
 r108: [72..73]
 r109: [70..71]
 r110: [46..47]
 r111: [44..45]
 r112: [42..43]
 r113: [40..41]
 r114: [36..37]
 r115: [22..35]
 r116: [32..33]
 r117: [30..31]
 r118: [28..29]
 r119: [26..27]
 r120: [24..25]
 r121: [22..23]
 r122: [18..19]
 r123: [8..9]
 r124: [6..7]
 r125: [4..5]
 r126: [0..1]
 r127: [158..159]
 r128: [154..155]
 r129: [150..151]
 r130: [146..147] [140..143]
 r131: [144..145]
 r132: [140..141]
 r133: [138..139]
 r135: [132..133]
 r136: [130..131]
 r137: [130..131]
 r138: [128..129]
 r140: [124..127]
 r141: [126..127]
 r142: [120..125]
 r143: [122..123]
 r144: [120..121]
 r145: [118..119]
 r147: [164..167]
 r148: [164..165]
 r149: [162..163]
 r150: [160..161]
 r151: [116..117]
 r152: [114..115]
 r153: [112..113]
 r154: [104..105]
 r155: [102..103]
 r156: [100..101]
 r157: [98..99]
 r158: [92..93]
 r159: [86..87]
 r160: [82..83] [76..79]
 r161: [80..81]
 r162: [76..77]
 r163: [74..75]
 r164: [68..69]
 r166: [66..67]
 r167: [64..65]
 r168: [64..65]
 r169: [62..63]
 r171: [58..61]
 r172: [60..61]
 r173: [54..59]
 r174: [56..57]
 r175: [54..55]
 r176: [52..53]
 r178: [172..175]
 r179: [172..173]
 r180: [170..171]
 r181: [168..169]
 r182: [50..51]
 r183: [48..49]
 r184: [46..47]
 r185: [38..39]
 r186: [36..37]
 r187: [34..35]
 r188: [32..33]
 r189: [26..27]
 r190: [20..21]
 r191: [16..17] [10..13]
 r192: [14..15]
 r193: [10..11]
 r194: [8..9]
 r195: [4..5]
 r196: [4..5]
 r197: [4..5]
 r199: [142..143]
 r200: [166..167]
 r201: [78..79]
 r202: [174..175]
 r203: [12..13]

********** Assignment #1: **********

	 Assigning to 199 (cl=GENERAL_REGS, orig=132, freq=3, tfirst=199, tfreq=3)...
	   Assign 1 to reload r199 (freq=3)
	 Assigning to 200 (cl=GENERAL_REGS, orig=148, freq=3, tfirst=200, tfreq=3)...
	   Assign 1 to reload r200 (freq=3)
	 Assigning to 201 (cl=GENERAL_REGS, orig=162, freq=3, tfirst=201, tfreq=3)...
	   Assign 1 to reload r201 (freq=3)
	 Assigning to 202 (cl=GENERAL_REGS, orig=179, freq=3, tfirst=202, tfreq=3)...
	   Assign 1 to reload r202 (freq=3)
	 Assigning to 203 (cl=GENERAL_REGS, orig=193, freq=3, tfirst=203, tfreq=3)...
	   Assign 1 to reload r203 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 210
changing reg in insn 40
changing reg in insn 213
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 92
changing reg in insn 105
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 119
changing reg in insn 120
changing reg in insn 124
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 163
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 174
changing reg in insn 187
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 191
changing reg in insn 192
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 206
changing reg in insn 213
changing reg in insn 217
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 49
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 118
changing reg in insn 119
changing reg in insn 122
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 131
changing reg in insn 135
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 142
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 200
changing reg in insn 203
changing reg in insn 201
changing reg in insn 204
changing reg in insn 202
changing reg in insn 205
deleting insn with uid = 230.
deleting insn with uid = 232.
deleting insn with uid = 234.
deleting insn with uid = 236.
deleting insn with uid = 238.
deleting insn with uid = 206.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 209.


delete_file

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={92d,99u} r1={35d,32u,9e} r2={8d,3u} r3={2d,2u} r4={9d,4u} r5={11d,6u} r6={1d,82u} r7={1d,25u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={58d,11u} r18={5d} r19={5d} r20={1d,1u,10e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,2u} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 845{559d,267u,19e} in 180{175 regular + 5 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:180 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:180 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])
        (reg:SI 1 dx [ bitvector_len ])) t3.c:180 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])
        (reg:DI 2 cx [ name ])) t3.c:180 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])
        (reg:SI 37 r8 [ blockNumber ])) t3.c:180 90 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:181 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) t3.c:181 612 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 127
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 name+0 S8 A64])) t3.c:181 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:QI 0 ax [orig:88 D.4993 ] [88])
        (mem:QI (reg/f:DI 0 ax [127]) [0 MEM[(const char *)name_14(D)]+0 S1 A8])) t3.c:181 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.4993 ] [88])
            (const_int 0 [0]))) t3.c:181 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) t3.c:181 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 128
(code_label 17 16 18 4 39 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 bitvector_len+0 S4 A32])) t3.c:182 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:SI 0 ax [orig:89 D.4992 ] [89])
                (ashift:SI (reg:SI 0 ax [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:182 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -68 [0xffffffffffffffbc])) [0 bitvector_len+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 21 20 22 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.4992 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32]))) t3.c:182 7 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) t3.c:182 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 129 130 131 132 133
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:183 90 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:DI 0 ax [orig:90 D.4994 ] [90])
        (sign_extend:DI (reg:SI 0 ax [129]))) t3.c:183 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 5 (set (reg:DI 0 ax [130])
        (reg:DI 0 ax [orig:90 D.4994 ] [90])) t3.c:183 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:DI 0 ax [131])
                (ashift:DI (reg:DI 0 ax [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:183 512 {*ashldi3_1}
     (nil))
(insn 28 27 229 5 (set (reg:DI 0 ax [130])
        (reg:DI 0 ax [131])) t3.c:183 89 {*movdi_internal}
     (nil))
(insn 229 28 29 5 (set (reg:DI 1 dx [132])
        (reg:DI 0 ax [130])) t3.c:183 89 {*movdi_internal}
     (nil))
(insn 29 229 30 5 (parallel [
            (set (reg:DI 1 dx [132])
                (ashift:DI (reg:DI 1 dx [132])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:183 512 {*ashldi3_1}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 1 dx [orig:91 D.4994 ] [91])
                (plus:DI (reg:DI 1 dx [132])
                    (reg:DI 0 ax [130])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:183 218 {*adddi_1}
     (nil))
(insn 31 30 32 5 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:183 89 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.4995 ] [92])
                (plus:DI (reg/f:DI 0 ax [133])
                    (reg:DI 1 dx [orig:91 D.4994 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:183 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.4994 ] [91]))
        (nil)))
(insn 33 32 34 5 (set (reg:SI 0 ax [orig:93 D.4996 ] [93])
        (mem/j:SI (reg/f:DI 0 ax [orig:92 D.4995 ] [92]) [0 _21->type+0 S4 A64])) t3.c:183 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.4996 ] [93])
            (const_int 1 [0x1]))) t3.c:183 7 {*cmpsi_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) t3.c:183 612 {*jcc_1}
     (nil)
 -> 43)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(code_label 36 35 37 6 40 "" [2 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fd504fef750 *.LC6>)) t3.c:185 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:185 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 40 39 220 6 (set (reg:SI 0 ax [orig:87 D.4992 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:186 90 {*movsi_internal}
     (nil))
(jump_insn 220 40 221 6 (set (pc)
        (label_ref 211)) t3.c:186 654 {jump}
     (nil)
 -> 211)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 221 220 43)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 43 221 44 7 41 "" [1 uses])
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:189 7 {*cmpsi_1}
     (nil))
(jump_insn 46 45 47 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) t3.c:189 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       8 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 138 140 141 142 143 144 145
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:191 90 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (reg:SI 0 ax [136])
        (reg:SI 0 ax [135])) t3.c:191 90 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (parallel [
            (set (reg:SI 1 dx [137])
                (plus:SI (reg:SI 0 ax [136])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:191 217 {*addsi_1}
     (nil))
(insn 51 50 52 8 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [136])
            (const_int 0 [0]))) t3.c:191 3 {*cmpsi_ccno_1}
     (nil))
(insn 52 51 53 8 (set (reg:SI 0 ax [136])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [137])
            (reg:SI 0 ax [136]))) t3.c:191 953 {*movsicc_noc}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg:SI 0 ax [138])
                (ashiftrt:SI (reg:SI 0 ax [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:191 545 {*ashrsi3_1}
     (nil))
(insn 54 53 55 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])
        (reg:SI 0 ax [138])) t3.c:191 90 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:192 90 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:SI 1 dx [141])
                (ashiftrt:SI (reg:SI 0 ax [140])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:192 538 {ashrsi3_cvt}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:SI 1 dx [142])
                (lshiftrt:SI (reg:SI 1 dx [141])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:192 544 {*lshrsi3_1}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:SI 0 ax [143])
                (plus:SI (reg:SI 0 ax [140])
                    (reg:SI 1 dx [142])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:192 217 {*addsi_1}
     (nil))
(insn 59 58 60 8 (parallel [
            (set (reg:SI 0 ax [144])
                (and:SI (reg:SI 0 ax [143])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:192 381 {*andsi_1}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:SI 0 ax [145])
                (minus:SI (reg:SI 0 ax [144])
                    (reg:SI 1 dx [142])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:192 260 {*subsi_1}
     (nil))
(insn 61 60 62 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 bitvector_offset+0 S4 A32])
        (reg:SI 0 ax [145])) t3.c:192 90 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 mask+0 S4 A32])
        (const_int 128 [0x80])) t3.c:193 90 {*movsi_internal}
     (nil))
(insn 63 62 222 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
        (const_int 0 [0])) t3.c:195 90 {*movsi_internal}
     (nil))
(jump_insn 222 63 223 8 (set (pc)
        (label_ref 73)) t3.c:195 654 {jump}
     (nil)
 -> 73)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 223 222 75)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 150
(code_label 75 223 66 9 45 "" [1 uses])
(note 66 75 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 231 9 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 mask+0 S4 A32])) t3.c:196 90 {*movsi_internal}
     (nil))
(insn 231 67 68 9 (set (reg:SI 1 dx [148])
        (reg:SI 0 ax [147])) t3.c:196 90 {*movsi_internal}
     (nil))
(insn 68 231 69 9 (parallel [
            (set (reg:SI 1 dx [148])
                (lshiftrt:SI (reg:SI 1 dx [148])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:196 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 0 ax [149])
                (plus:SI (reg:SI 0 ax [147])
                    (reg:SI 1 dx [148])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:196 217 {*addsi_1}
     (nil))
(insn 70 69 71 9 (parallel [
            (set (reg:SI 0 ax [150])
                (ashiftrt:SI (reg:SI 0 ax [149])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:196 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 mask+0 S4 A32])
        (reg:SI 0 ax [150])) t3.c:196 90 {*movsi_internal}
     (nil))
(insn 72 71 73 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:195 217 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151
(code_label 73 72 74 10 44 "" [1 uses])
(note 74 73 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 74 77 10 (set (reg:SI 0 ax [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 i+0 S4 A32])) t3.c:195 90 {*movsi_internal}
     (nil))
(insn 77 76 78 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [151])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 bitvector_offset+0 S4 A32]))) t3.c:195 7 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) t3.c:195 612 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 97 152 153
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 11 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])) t3.c:198 90 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:DI 1 dx [orig:94 D.4997 ] [94])
        (sign_extend:DI (reg:SI 0 ax [152]))) t3.c:198 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 11 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:198 89 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.4998 ] [95])
                (plus:DI (reg/f:DI 0 ax [153])
                    (reg:DI 1 dx [orig:94 D.4997 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:198 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.4997 ] [94]))
        (nil)))
(insn 84 83 85 11 (set (reg:QI 0 ax [orig:96 D.4999 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 D.4998 ] [95]) [0 *_31+0 S1 A8])) t3.c:198 93 {*movqi_internal}
     (nil))
(insn 85 84 86 11 (set (reg:SI 0 ax [orig:97 D.4992 ] [97])
        (zero_extend:SI (reg:QI 0 ax [orig:96 D.4999 ] [96]))) t3.c:198 138 {*zero_extendqisi2}
     (nil))
(insn 86 85 87 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.4992 ] [97])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 mask+0 S4 A32]))) t3.c:198 7 {*cmpsi_1}
     (nil))
(jump_insn 87 86 88 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 116)
            (pc))) t3.c:198 612 {*jcc_1}
     (nil)
 -> 116)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99 100 101 102 103 104 105 154 155 156 157 158
(note 88 87 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 12 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])) t3.c:199 90 {*movsi_internal}
     (nil))
(insn 90 89 91 12 (set (reg:DI 1 dx [orig:98 D.4997 ] [98])
        (sign_extend:DI (reg:SI 0 ax [154]))) t3.c:199 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 12 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:199 89 {*movdi_internal}
     (nil))
(insn 92 91 93 12 (parallel [
            (set (reg/f:DI 3 bx [orig:99 D.4998 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 D.4997 ] [98])
                    (reg/f:DI 0 ax [155])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.4997 ] [98]))
        (nil)))
(insn 93 92 94 12 (set (reg:SI 0 ax [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])) t3.c:199 90 {*movsi_internal}
     (nil))
(insn 94 93 95 12 (set (reg:DI 1 dx [orig:100 D.4997 ] [100])
        (sign_extend:DI (reg:SI 0 ax [156]))) t3.c:199 142 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 12 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:199 89 {*movdi_internal}
     (nil))
(insn 96 95 97 12 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.4998 ] [101])
                (plus:DI (reg/f:DI 0 ax [157])
                    (reg:DI 1 dx [orig:100 D.4997 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.4997 ] [100]))
        (nil)))
(insn 97 96 98 12 (set (reg:QI 0 ax [orig:102 D.4999 ] [102])
        (mem:QI (reg/f:DI 0 ax [orig:101 D.4998 ] [101]) [0 *_37+0 S1 A8])) t3.c:199 93 {*movqi_internal}
     (nil))
(insn 98 97 99 12 (set (reg:SI 0 ax [orig:103 D.4992 ] [103])
        (zero_extend:SI (reg:QI 0 ax [orig:102 D.4999 ] [102]))) t3.c:199 138 {*zero_extendqisi2}
     (nil))
(insn 99 98 100 12 (set (reg:SI 1 dx [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 mask+0 S4 A32])) t3.c:199 90 {*movsi_internal}
     (nil))
(insn 100 99 101 12 (set (reg:SI 4 si)
        (reg:SI 1 dx [158])) t3.c:199 90 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:103 D.4992 ] [103])) t3.c:199 90 {*movsi_internal}
     (nil))
(call_insn 102 101 103 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:199 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 103 102 104 12 (set (reg:SI 0 ax [orig:104 D.4992 ] [104])
        (reg:SI 0 ax)) t3.c:199 90 {*movsi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:QI 0 ax [orig:105 D.4999 ] [105])
        (reg:QI 0 ax [orig:104 D.4992 ] [104])) t3.c:199 93 {*movqi_internal}
     (nil))
(insn 105 104 224 12 (set (mem:QI (reg/f:DI 3 bx [orig:99 D.4998 ] [99]) [0 *_35+0 S1 A8])
        (reg:QI 0 ax [orig:105 D.4999 ] [105])) t3.c:199 93 {*movqi_internal}
     (nil))
(jump_insn 224 105 225 12 (set (pc)
        (label_ref 116)) 654 {jump}
     (nil)
 -> 116)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 225 224 110)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 110 225 111 13 43 "" [1 uses])
(note 111 110 112 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fd504fef7e0 *.LC7>)) t3.c:204 89 {*movdi_internal}
     (nil))
(call_insn 113 112 114 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:204 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 114 113 115 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])
        (const_int 0 [0])) t3.c:205 90 {*movsi_internal}
     (nil))
(insn 115 114 116 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 bitvector_offset+0 S4 A32])
        (const_int 0 [0])) t3.c:206 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              13 (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 159 160 161 162 163 164 166 167 168 169 171 172 173 174 175 176
(code_label 116 115 117 14 47 "" [2 uses])
(note 117 116 118 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 14 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:209 90 {*movsi_internal}
     (nil))
(insn 119 118 120 14 (set (reg:DI 0 ax [orig:106 D.4994 ] [106])
        (sign_extend:DI (reg:SI 0 ax [159]))) t3.c:209 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 14 (set (reg:DI 0 ax [160])
        (reg:DI 0 ax [orig:106 D.4994 ] [106])) t3.c:209 89 {*movdi_internal}
     (nil))
(insn 121 120 122 14 (parallel [
            (set (reg:DI 0 ax [161])
                (ashift:DI (reg:DI 0 ax [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:209 512 {*ashldi3_1}
     (nil))
(insn 122 121 233 14 (set (reg:DI 0 ax [160])
        (reg:DI 0 ax [161])) t3.c:209 89 {*movdi_internal}
     (nil))
(insn 233 122 123 14 (set (reg:DI 1 dx [162])
        (reg:DI 0 ax [160])) t3.c:209 89 {*movdi_internal}
     (nil))
(insn 123 233 124 14 (parallel [
            (set (reg:DI 1 dx [162])
                (ashift:DI (reg:DI 1 dx [162])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:209 512 {*ashldi3_1}
     (nil))
(insn 124 123 125 14 (parallel [
            (set (reg:DI 1 dx [orig:107 D.4994 ] [107])
                (plus:DI (reg:DI 1 dx [162])
                    (reg:DI 0 ax [160])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:209 218 {*adddi_1}
     (nil))
(insn 125 124 126 14 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:209 89 {*movdi_internal}
     (nil))
(insn 126 125 127 14 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.4995 ] [108])
                (plus:DI (reg/f:DI 0 ax [163])
                    (reg:DI 1 dx [orig:107 D.4994 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:209 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.4994 ] [107]))
        (nil)))
(insn 127 126 128 14 (set (reg:HI 0 ax [orig:109 D.5000 ] [109])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:108 D.4995 ] [108])
                (const_int 168 [0xa8])) [0 _49->content.fd.block_ref+0 S2 A64])) t3.c:209 92 {*movhi_internal}
     (nil))
(insn 128 127 129 14 (set (reg:SI 0 ax [164])
        (zero_extend:SI (reg:HI 0 ax [orig:109 D.5000 ] [109]))) t3.c:209 139 {*zero_extendhisi2}
     (nil))
(insn 129 128 130 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])
        (reg:SI 0 ax [164])) t3.c:209 90 {*movsi_internal}
     (nil))
(insn 130 129 131 14 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:210 90 {*movsi_internal}
     (nil))
(insn 131 130 132 14 (set (reg:SI 0 ax [167])
        (reg:SI 0 ax [166])) t3.c:210 90 {*movsi_internal}
     (nil))
(insn 132 131 133 14 (parallel [
            (set (reg:SI 1 dx [168])
                (plus:SI (reg:SI 0 ax [167])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:210 217 {*addsi_1}
     (nil))
(insn 133 132 134 14 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [167])
            (const_int 0 [0]))) t3.c:210 3 {*cmpsi_ccno_1}
     (nil))
(insn 134 133 135 14 (set (reg:SI 0 ax [167])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [168])
            (reg:SI 0 ax [167]))) t3.c:210 953 {*movsicc_noc}
     (nil))
(insn 135 134 136 14 (parallel [
            (set (reg:SI 0 ax [169])
                (ashiftrt:SI (reg:SI 0 ax [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:210 545 {*ashrsi3_1}
     (nil))
(insn 136 135 137 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_bitvector_index+0 S4 A32])
        (reg:SI 0 ax [169])) t3.c:210 90 {*movsi_internal}
     (nil))
(insn 137 136 138 14 (set (reg:SI 0 ax [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 data_blockNumber+0 S4 A32])) t3.c:211 90 {*movsi_internal}
     (nil))
(insn 138 137 139 14 (parallel [
            (set (reg:SI 1 dx [172])
                (ashiftrt:SI (reg:SI 0 ax [171])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:211 538 {ashrsi3_cvt}
     (nil))
(insn 139 138 140 14 (parallel [
            (set (reg:SI 1 dx [173])
                (lshiftrt:SI (reg:SI 1 dx [172])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:211 544 {*lshrsi3_1}
     (nil))
(insn 140 139 141 14 (parallel [
            (set (reg:SI 0 ax [174])
                (plus:SI (reg:SI 0 ax [171])
                    (reg:SI 1 dx [173])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:211 217 {*addsi_1}
     (nil))
(insn 141 140 142 14 (parallel [
            (set (reg:SI 0 ax [175])
                (and:SI (reg:SI 0 ax [174])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:211 381 {*andsi_1}
     (nil))
(insn 142 141 143 14 (parallel [
            (set (reg:SI 0 ax [176])
                (minus:SI (reg:SI 0 ax [175])
                    (reg:SI 1 dx [173])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:211 260 {*subsi_1}
     (nil))
(insn 143 142 144 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_bitvector_offset+0 S4 A32])
        (reg:SI 0 ax [176])) t3.c:211 90 {*movsi_internal}
     (nil))
(insn 144 143 145 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 mask+0 S4 A32])
        (const_int 128 [0x80])) t3.c:212 90 {*movsi_internal}
     (nil))
(insn 145 144 226 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
        (const_int 0 [0])) t3.c:214 90 {*movsi_internal}
     (nil))
(jump_insn 226 145 227 14 (set (pc)
        (label_ref 155)) t3.c:214 654 {jump}
     (nil)
 -> 155)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 227 226 157)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 181
(code_label 157 227 148 15 49 "" [1 uses])
(note 148 157 149 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 235 15 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 mask+0 S4 A32])) t3.c:215 90 {*movsi_internal}
     (nil))
(insn 235 149 150 15 (set (reg:SI 1 dx [179])
        (reg:SI 0 ax [178])) t3.c:215 90 {*movsi_internal}
     (nil))
(insn 150 235 151 15 (parallel [
            (set (reg:SI 1 dx [179])
                (lshiftrt:SI (reg:SI 1 dx [179])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:215 544 {*lshrsi3_1}
     (nil))
(insn 151 150 152 15 (parallel [
            (set (reg:SI 0 ax [180])
                (plus:SI (reg:SI 0 ax [178])
                    (reg:SI 1 dx [179])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:215 217 {*addsi_1}
     (nil))
(insn 152 151 153 15 (parallel [
            (set (reg:SI 0 ax [181])
                (ashiftrt:SI (reg:SI 0 ax [180])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:215 545 {*ashrsi3_1}
     (nil))
(insn 153 152 154 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 mask+0 S4 A32])
        (reg:SI 0 ax [181])) t3.c:215 90 {*movsi_internal}
     (nil))
(insn 154 153 155 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:214 217 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182
(code_label 155 154 156 16 48 "" [1 uses])
(note 156 155 158 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 158 156 159 16 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) t3.c:214 90 {*movsi_internal}
     (nil))
(insn 159 158 160 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [182])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 data_bitvector_offset+0 S4 A32]))) t3.c:214 7 {*cmpsi_1}
     (nil))
(jump_insn 160 159 161 16 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 157)
            (pc))) t3.c:214 612 {*jcc_1}
     (nil)
 -> 157)
;;  succ:       15
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 183 184
(note 161 160 162 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 17 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_bitvector_index+0 S4 A32])) t3.c:217 90 {*movsi_internal}
     (nil))
(insn 163 162 164 17 (set (reg:DI 1 dx [orig:110 D.4997 ] [110])
        (sign_extend:DI (reg:SI 0 ax [183]))) t3.c:217 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 17 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:217 89 {*movdi_internal}
     (nil))
(insn 165 164 166 17 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.4998 ] [111])
                (plus:DI (reg/f:DI 0 ax [184])
                    (reg:DI 1 dx [orig:110 D.4997 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:217 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.4997 ] [110]))
        (nil)))
(insn 166 165 167 17 (set (reg:QI 0 ax [orig:112 D.4999 ] [112])
        (mem:QI (reg/f:DI 0 ax [orig:111 D.4998 ] [111]) [0 *_59+0 S1 A8])) t3.c:217 93 {*movqi_internal}
     (nil))
(insn 167 166 168 17 (set (reg:SI 0 ax [orig:113 D.4992 ] [113])
        (zero_extend:SI (reg:QI 0 ax [orig:112 D.4999 ] [112]))) t3.c:217 138 {*zero_extendqisi2}
     (nil))
(insn 168 167 169 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.4992 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 mask+0 S4 A32]))) t3.c:217 7 {*cmpsi_1}
     (nil))
(jump_insn 169 168 170 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) t3.c:217 612 {*jcc_1}
     (nil)
 -> 188)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 115 116 117 118 119 120 121 185 186 187 188 189
(note 170 169 171 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 18 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_bitvector_index+0 S4 A32])) t3.c:218 90 {*movsi_internal}
     (nil))
(insn 172 171 173 18 (set (reg:DI 1 dx [orig:114 D.4997 ] [114])
        (sign_extend:DI (reg:SI 0 ax [185]))) t3.c:218 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 18 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:218 89 {*movdi_internal}
     (nil))
(insn 174 173 175 18 (parallel [
            (set (reg/f:DI 3 bx [orig:115 D.4998 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.4997 ] [114])
                    (reg/f:DI 0 ax [186])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:218 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.4997 ] [114]))
        (nil)))
(insn 175 174 176 18 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_bitvector_index+0 S4 A32])) t3.c:218 90 {*movsi_internal}
     (nil))
(insn 176 175 177 18 (set (reg:DI 1 dx [orig:116 D.4997 ] [116])
        (sign_extend:DI (reg:SI 0 ax [187]))) t3.c:218 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 18 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 bitvector+0 S8 A64])) t3.c:218 89 {*movdi_internal}
     (nil))
(insn 178 177 179 18 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.4998 ] [117])
                (plus:DI (reg/f:DI 0 ax [188])
                    (reg:DI 1 dx [orig:116 D.4997 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:218 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.4997 ] [116]))
        (nil)))
(insn 179 178 180 18 (set (reg:QI 0 ax [orig:118 D.4999 ] [118])
        (mem:QI (reg/f:DI 0 ax [orig:117 D.4998 ] [117]) [0 *_65+0 S1 A8])) t3.c:218 93 {*movqi_internal}
     (nil))
(insn 180 179 181 18 (set (reg:SI 0 ax [orig:119 D.4992 ] [119])
        (zero_extend:SI (reg:QI 0 ax [orig:118 D.4999 ] [118]))) t3.c:218 138 {*zero_extendqisi2}
     (nil))
(insn 181 180 182 18 (set (reg:SI 1 dx [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 mask+0 S4 A32])) t3.c:218 90 {*movsi_internal}
     (nil))
(insn 182 181 183 18 (set (reg:SI 4 si)
        (reg:SI 1 dx [189])) t3.c:218 90 {*movsi_internal}
     (nil))
(insn 183 182 184 18 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:119 D.4992 ] [119])) t3.c:218 90 {*movsi_internal}
     (nil))
(call_insn 184 183 185 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:218 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 185 184 186 18 (set (reg:SI 0 ax [orig:120 D.4992 ] [120])
        (reg:SI 0 ax)) t3.c:218 90 {*movsi_internal}
     (nil))
(insn 186 185 187 18 (set (reg:QI 0 ax [orig:121 D.4999 ] [121])
        (reg:QI 0 ax [orig:120 D.4992 ] [120])) t3.c:218 93 {*movqi_internal}
     (nil))
(insn 187 186 188 18 (set (mem:QI (reg/f:DI 3 bx [orig:115 D.4998 ] [115]) [0 *_63+0 S1 A8])
        (reg:QI 0 ax [orig:121 D.4999 ] [121])) t3.c:218 93 {*movqi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 122 123 124 125 190 191 192 193 194 195 196 197
(code_label 188 187 189 19 50 "" [1 uses])
(note 189 188 190 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 19 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:222 90 {*movsi_internal}
     (nil))
(insn 191 190 192 19 (set (reg:DI 0 ax [orig:122 D.4994 ] [122])
        (sign_extend:DI (reg:SI 0 ax [190]))) t3.c:222 142 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 19 (set (reg:DI 0 ax [191])
        (reg:DI 0 ax [orig:122 D.4994 ] [122])) t3.c:222 89 {*movdi_internal}
     (nil))
(insn 193 192 194 19 (parallel [
            (set (reg:DI 0 ax [192])
                (ashift:DI (reg:DI 0 ax [191])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:222 512 {*ashldi3_1}
     (nil))
(insn 194 193 237 19 (set (reg:DI 0 ax [191])
        (reg:DI 0 ax [192])) t3.c:222 89 {*movdi_internal}
     (nil))
(insn 237 194 195 19 (set (reg:DI 1 dx [193])
        (reg:DI 0 ax [191])) t3.c:222 89 {*movdi_internal}
     (nil))
(insn 195 237 196 19 (parallel [
            (set (reg:DI 1 dx [193])
                (ashift:DI (reg:DI 1 dx [193])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:222 512 {*ashldi3_1}
     (nil))
(insn 196 195 197 19 (parallel [
            (set (reg:DI 1 dx [orig:123 D.4994 ] [123])
                (plus:DI (reg:DI 1 dx [193])
                    (reg:DI 0 ax [191])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:222 218 {*adddi_1}
     (nil))
(insn 197 196 198 19 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 memory+0 S8 A64])) t3.c:222 89 {*movdi_internal}
     (nil))
(insn 198 197 199 19 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.4995 ] [124])
                (plus:DI (reg/f:DI 0 ax [194])
                    (reg:DI 1 dx [orig:123 D.4994 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:222 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.4994 ] [123]))
        (nil)))
(insn 199 198 200 19 (parallel [
            (set (reg/f:DI 4 si [orig:125 D.5001 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:124 D.4995 ] [124])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:222 218 {*adddi_1}
     (nil))
(insn 200 199 201 19 (set (reg:SI 2 cx [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 bitvector_offset+0 S4 A32])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 201 200 202 19 (set (reg:SI 1 dx [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 bitvector_index+0 S4 A32])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 202 201 203 19 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 blockNumber+0 S4 A32])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 203 202 204 19 (set (reg:SI 37 r8)
        (reg:SI 2 cx [195])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 204 203 205 19 (set (reg:SI 2 cx)
        (reg:SI 1 dx [196])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 205 204 207 19 (set (reg:SI 1 dx)
        (reg:SI 0 ax [197])) t3.c:221 90 {*movsi_internal}
     (nil))
(insn 207 205 208 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fd504fef870 *.LC8>)) t3.c:221 89 {*movdi_internal}
     (nil))
(insn 208 207 209 19 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:221 93 {*movqi_internal}
     (nil))
(call_insn 209 208 210 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:221 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 210 209 211 19 (set (reg:SI 0 ax [orig:87 D.4992 ] [87])
        (const_int 0 [0])) t3.c:223 90 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              6 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 126
(code_label 211 210 212 20 42 "" [1 uses])
(note 212 211 213 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 217 20 (set (reg:SI 0 ax [orig:126 <retval> ] [126])
        (reg:SI 0 ax [orig:87 D.4992 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 217 213 218 20 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:126 <retval> ] [126])) t3.c:224 90 {*movsi_internal}
     (nil))
(insn 218 217 228 20 (use (reg/i:SI 0 ax)) t3.c:224 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 228 218 0 NOTE_INSN_DELETED)

;; Function delete_dir (delete_dir, funcdef_no=10, decl_uid=4514, cgraph_uid=10, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=199 from oldreg=133, assigning class GENERAL_REGS to r199
   29: {r199:DI=r199:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  256: r199:DI=r131:DI
    Inserting insn reload after:
  257: r133:DI=r199:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*d  (1) *a {ashrsi3_cvt}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 59:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=200 from oldreg=149, assigning class GENERAL_REGS to r200
   68: {r200:SI=r200:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  258: r200:SI=r148:SI
    Inserting insn reload after:
  259: r149:SI=r200:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 72:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 102:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 110:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=201 from oldreg=164, assigning class GENERAL_REGS to r201
  132: {r201:DI=r201:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  260: r201:DI=r162:DI
    Inserting insn reload after:
  261: r164:DI=r201:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) rm {*zero_extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=202 from oldreg=172, assigning class GENERAL_REGS to r202
  149: {r202:DI=r202:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  262: r202:DI=r170:DI
    Inserting insn reload after:
  263: r172:DI=r202:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 152
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=203 from oldreg=181, assigning class GENERAL_REGS to r203
  176: {r203:DI=r203:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  264: r203:DI=r179:DI
    Inserting insn reload after:
  265: r181:DI=r203:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 179
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 196:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=204 from oldreg=190, assigning class GENERAL_REGS to r204
  208: {r204:DI=r204:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  266: r204:DI=r188:DI
    Inserting insn reload after:
  267: r190:DI=r204:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 209
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 211
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 212:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 220:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23

********** Pseudo live ranges #1: **********

  BB 23
   Insn 243: point = 0
   Insn 242: point = 0
   Insn 238: point = 1
  BB 6
   Insn 245: point = 4
   Insn 40: point = 4
   Insn 39: point = 5
   Insn 38: point = 5
  BB 22
   Insn 235: point = 5
   Insn 234: point = 6
   Insn 233: point = 6
   Insn 232: point = 6
   Insn 231: point = 6
   Insn 230: point = 7
   Insn 229: point = 8
   Insn 228: point = 9
   Insn 227: point = 11
   Insn 226: point = 13
   Insn 225: point = 15
   Insn 224: point = 16
   Insn 223: point = 18
   Insn 222: point = 19
   Insn 221: point = 19
   Insn 220: point = 19
   Insn 219: point = 19
   Insn 218: point = 20
   Insn 217: point = 21
   Insn 216: point = 22
   Insn 215: point = 23
   Insn 214: point = 24
   Insn 213: point = 25
   Insn 212: point = 26
   Insn 211: point = 28
   Insn 210: point = 30
   Insn 209: point = 31
   Insn 267: point = 33
	Hard reg 1 is preferable by r204 with profit 1
   Insn 208: point = 35
   Insn 266: point = 35
   Insn 207: point = 36
   Insn 206: point = 38
   Insn 205: point = 40
   Insn 204: point = 42
   Insn 203: point = 44
  BB 21
   Insn 201: point = 45
   Insn 200: point = 45
  BB 14
   Insn 251: point = 45
   Insn 123: point = 45
  BB 12
   Insn 249: point = 45
   Insn 110: point = 45
   Insn 109: point = 46
   Insn 108: point = 48
   Insn 107: point = 49
   Insn 106: point = 49
   Insn 105: point = 50
   Insn 104: point = 51
   Insn 103: point = 52
   Insn 102: point = 54
   Insn 101: point = 56
   Insn 100: point = 58
   Insn 99: point = 59
   Insn 98: point = 61
   Insn 97: point = 62
   Insn 96: point = 64
   Insn 95: point = 65
   Insn 94: point = 67
  BB 13
   Insn 120: point = 68
   Insn 119: point = 68
   Insn 118: point = 68
   Insn 117: point = 68
  BB 11
   Insn 92: point = 68
   Insn 91: point = 68
   Insn 90: point = 69
   Insn 89: point = 70
   Insn 88: point = 70
   Insn 87: point = 71
   Insn 86: point = 72
   Insn 85: point = 73
   Insn 84: point = 75
   Insn 83: point = 77
   Insn 82: point = 79
   Insn 81: point = 80
   Insn 80: point = 82
  BB 10
   Insn 78: point = 83
   Insn 77: point = 83
   Insn 76: point = 84
  BB 8
   Insn 247: point = 85
   Insn 63: point = 85
   Insn 62: point = 85
   Insn 61: point = 85
   Insn 60: point = 86
   Insn 59: point = 88
   Insn 58: point = 90
   Insn 57: point = 92
   Insn 56: point = 94
   Insn 55: point = 95
   Insn 54: point = 96
   Insn 53: point = 97
   Insn 52: point = 99
   Insn 51: point = 100
   Insn 50: point = 100
   Insn 49: point = 101
   Insn 48: point = 103
  BB 7
   Insn 46: point = 104
   Insn 45: point = 104
  BB 5
   Insn 35: point = 104
   Insn 34: point = 104
   Insn 33: point = 105
   Insn 32: point = 107
   Insn 31: point = 109
   Insn 30: point = 110
   Insn 257: point = 112
	Hard reg 1 is preferable by r199 with profit 1
   Insn 29: point = 114
   Insn 256: point = 114
   Insn 28: point = 115
   Insn 27: point = 117
   Insn 26: point = 119
   Insn 25: point = 121
   Insn 24: point = 123
  BB 4
   Insn 22: point = 124
   Insn 21: point = 124
   Insn 20: point = 125
   Insn 19: point = 127
  BB 3
   Insn 16: point = 128
   Insn 15: point = 128
   Insn 14: point = 129
   Insn 13: point = 131
  BB 2
   Insn 11: point = 132
   Insn 10: point = 132
   Insn 6: point = 132
   Insn 5: point = 132
   Insn 4: point = 132
   Insn 3: point = 132
   Insn 2: point = 132
  BB 9
   Insn 72: point = 132
   Insn 71: point = 132
   Insn 70: point = 133
   Insn 69: point = 135
   Insn 259: point = 137
	Hard reg 1 is preferable by r200 with profit 1
   Insn 68: point = 139
   Insn 258: point = 139
   Insn 67: point = 140
  BB 20
   Insn 196: point = 141
  BB 17
   Insn 253: point = 141
   Insn 166: point = 141
   Insn 165: point = 141
   Insn 164: point = 142
   Insn 163: point = 143
   Insn 162: point = 144
   Insn 161: point = 144
   Insn 160: point = 145
   Insn 159: point = 146
   Insn 158: point = 147
   Insn 157: point = 148
  BB 19
   Insn 193: point = 149
   Insn 192: point = 149
   Insn 191: point = 150
   Insn 190: point = 151
   Insn 189: point = 152
   Insn 188: point = 152
   Insn 187: point = 153
   Insn 186: point = 154
   Insn 185: point = 155
   Insn 184: point = 156
  BB 18
   Insn 182: point = 157
   Insn 181: point = 157
   Insn 180: point = 158
   Insn 179: point = 160
   Insn 178: point = 162
   Insn 177: point = 163
   Insn 265: point = 165
	Hard reg 1 is preferable by r203 with profit 1
   Insn 176: point = 167
   Insn 264: point = 167
   Insn 175: point = 168
   Insn 174: point = 170
   Insn 173: point = 172
   Insn 172: point = 174
   Insn 171: point = 176
  BB 16
   Insn 155: point = 177
   Insn 154: point = 177
   Insn 153: point = 178
   Insn 152: point = 180
   Insn 151: point = 182
   Insn 150: point = 183
   Insn 263: point = 185
	Hard reg 1 is preferable by r202 with profit 1
   Insn 149: point = 187
   Insn 262: point = 187
   Insn 148: point = 188
   Insn 147: point = 190
   Insn 146: point = 192
   Insn 145: point = 194
   Insn 144: point = 196
  BB 15
   Insn 142: point = 197
   Insn 141: point = 197
   Insn 140: point = 197
   Insn 139: point = 198
   Insn 138: point = 200
   Insn 137: point = 202
   Insn 136: point = 204
   Insn 135: point = 205
   Insn 134: point = 207
   Insn 133: point = 208
   Insn 261: point = 210
	Hard reg 1 is preferable by r201 with profit 1
   Insn 132: point = 212
   Insn 260: point = 212
   Insn 131: point = 213
   Insn 130: point = 215
   Insn 129: point = 217
   Insn 128: point = 219
   Insn 127: point = 221
 r87: [2..5]
 r88: [128..129]
 r89: [124..125]
 r90: [120..121]
 r91: [108..110]
 r92: [106..107]
 r93: [104..105]
 r94: [78..80]
 r95: [76..77]
 r96: [74..75]
 r97: [70..73]
 r98: [68..69]
 r99: [63..65]
 r100: [45..62]
 r101: [57..59]
 r102: [55..56]
 r103: [53..54]
 r104: [49..52]
 r105: [47..48]
 r106: [45..46]
 r107: [218..219]
 r108: [206..208]
 r109: [201..205]
 r110: [199..200]
 r111: [193..194]
 r112: [181..183]
 r113: [179..180]
 r114: [177..178]
 r115: [173..174]
 r116: [161..163]
 r117: [159..160]
 r118: [157..158]
 r119: [41..42]
 r120: [29..31]
 r121: [27..28]
 r122: [19..26]
 r123: [14..16]
 r124: [12..13]
 r125: [10..11]
 r126: [7..9]
 r127: [0..1]
 r128: [130..131]
 r129: [126..127]
 r130: [122..123]
 r131: [118..119] [111..115]
 r132: [116..117]
 r133: [111..112]
 r134: [108..109]
 r136: [102..103]
 r137: [98..101]
 r138: [99..100]
 r139: [96..97]
 r141: [91..95]
 r142: [93..94]
 r143: [87..92]
 r144: [89..90]
 r145: [87..88]
 r146: [85..86]
 r148: [136..140]
 r149: [136..137]
 r150: [134..135]
 r151: [132..133]
 r152: [83..84]
 r153: [81..82]
 r154: [78..79]
 r155: [71..72]
 r156: [66..67]
 r157: [63..64]
 r158: [60..61]
 r159: [57..58]
 r160: [50..51]
 r161: [220..221]
 r162: [216..217] [209..213]
 r163: [214..215]
 r164: [209..210]
 r165: [206..207]
 r166: [201..202]
 r167: [203..204]
 r168: [197..198]
 r169: [195..196]
 r170: [191..192] [184..188]
 r171: [189..190]
 r172: [184..185]
 r173: [181..182]
 r174: [144..148]
 r175: [143..147]
 r176: [142..146]
 r177: [141..145]
 r178: [175..176]
 r179: [171..172] [164..168]
 r180: [169..170]
 r181: [164..165]
 r182: [161..162]
 r183: [152..156]
 r184: [151..155]
 r185: [150..154]
 r186: [149..153]
 r187: [43..44]
 r188: [39..40] [32..36]
 r189: [37..38]
 r190: [32..33]
 r191: [29..30]
 r192: [22..25]
 r193: [21..24]
 r194: [20..23]
 r195: [17..18]
 r196: [14..15]
 r197: [6..8]
 r199: [113..114]
 r200: [138..139]
 r201: [211..212]
 r202: [186..187]
 r203: [166..167]
 r204: [34..35]
Compressing live ranges: from 222 to 176 - 79%
Ranges after the compression:
 r87: [2..3]
 r88: [102..103]
 r89: [98..99]
 r90: [94..95]
 r91: [84..85]
 r92: [82..83]
 r93: [80..81]
 r94: [58..59]
 r95: [56..57]
 r96: [54..55]
 r97: [52..53]
 r98: [50..51]
 r99: [46..47]
 r100: [32..45]
 r101: [42..43]
 r102: [40..41]
 r103: [38..39]
 r104: [36..37]
 r105: [34..35]
 r106: [32..33]
 r107: [172..173]
 r108: [162..163]
 r109: [158..161]
 r110: [156..157]
 r111: [150..151]
 r112: [140..141]
 r113: [138..139]
 r114: [136..137]
 r115: [132..133]
 r116: [122..123]
 r117: [120..121]
 r118: [118..119]
 r119: [28..29]
 r120: [18..19]
 r121: [16..17]
 r122: [14..15]
 r123: [10..11]
 r124: [8..9]
 r125: [6..7]
 r126: [4..5]
 r127: [0..1]
 r128: [104..105]
 r129: [100..101]
 r130: [96..97]
 r131: [92..93] [86..89]
 r132: [90..91]
 r133: [86..87]
 r134: [84..85]
 r136: [78..79]
 r137: [76..77]
 r138: [76..77]
 r139: [74..75]
 r141: [70..73]
 r142: [72..73]
 r143: [66..71]
 r144: [68..69]
 r145: [66..67]
 r146: [64..65]
 r148: [110..113]
 r149: [110..111]
 r150: [108..109]
 r151: [106..107]
 r152: [62..63]
 r153: [60..61]
 r154: [58..59]
 r155: [52..53]
 r156: [48..49]
 r157: [46..47]
 r158: [44..45]
 r159: [42..43]
 r160: [36..37]
 r161: [174..175]
 r162: [170..171] [164..167]
 r163: [168..169]
 r164: [164..165]
 r165: [162..163]
 r166: [158..159]
 r167: [160..161]
 r168: [154..155]
 r169: [152..153]
 r170: [148..149] [142..145]
 r171: [146..147]
 r172: [142..143]
 r173: [140..141]
 r174: [114..115]
 r175: [114..115]
 r176: [114..115]
 r177: [114..115]
 r178: [134..135]
 r179: [130..131] [124..127]
 r180: [128..129]
 r181: [124..125]
 r182: [122..123]
 r183: [116..117]
 r184: [116..117]
 r185: [116..117]
 r186: [116..117]
 r187: [30..31]
 r188: [26..27] [20..23]
 r189: [24..25]
 r190: [20..21]
 r191: [18..19]
 r192: [14..15]
 r193: [14..15]
 r194: [14..15]
 r195: [12..13]
 r196: [10..11]
 r197: [4..5]
 r199: [88..89]
 r200: [112..113]
 r201: [166..167]
 r202: [144..145]
 r203: [126..127]
 r204: [22..23]

********** Assignment #1: **********

	 Assigning to 199 (cl=GENERAL_REGS, orig=133, freq=3, tfirst=199, tfreq=3)...
	   Assign 1 to reload r199 (freq=3)
	 Assigning to 200 (cl=GENERAL_REGS, orig=149, freq=3, tfirst=200, tfreq=3)...
	   Assign 1 to reload r200 (freq=3)
	 Assigning to 201 (cl=GENERAL_REGS, orig=164, freq=3, tfirst=201, tfreq=3)...
	   Assign 1 to reload r201 (freq=3)
	 Assigning to 202 (cl=GENERAL_REGS, orig=172, freq=3, tfirst=202, tfreq=3)...
	   Assign 1 to reload r202 (freq=3)
	 Assigning to 203 (cl=GENERAL_REGS, orig=181, freq=3, tfirst=203, tfreq=3)...
	   Assign 1 to reload r203 (freq=3)
	 Assigning to 204 (cl=GENERAL_REGS, orig=190, freq=3, tfirst=204, tfreq=3)...
	   Assign 1 to reload r204 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 235
changing reg in insn 40
changing reg in insn 238
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 97
changing reg in insn 110
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 128
changing reg in insn 129
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 135
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 145
changing reg in insn 146
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 172
changing reg in insn 173
changing reg in insn 177
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 204
changing reg in insn 205
changing reg in insn 209
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 219
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 238
changing reg in insn 242
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 49
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 151
changing reg in insn 157
changing reg in insn 161
changing reg in insn 158
changing reg in insn 163
changing reg in insn 159
changing reg in insn 164
changing reg in insn 160
changing reg in insn 165
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 184
changing reg in insn 188
changing reg in insn 185
changing reg in insn 190
changing reg in insn 186
changing reg in insn 191
changing reg in insn 187
changing reg in insn 192
changing reg in insn 203
changing reg in insn 204
changing reg in insn 207
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 210
changing reg in insn 213
changing reg in insn 216
changing reg in insn 214
changing reg in insn 217
changing reg in insn 215
changing reg in insn 218
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 231
deleting insn with uid = 257.
deleting insn with uid = 259.
deleting insn with uid = 261.
deleting insn with uid = 263.
deleting insn with uid = 163.
deleting insn with uid = 164.
deleting insn with uid = 265.
deleting insn with uid = 190.
deleting insn with uid = 191.
deleting insn with uid = 267.
deleting insn with uid = 219.
deleting insn with uid = 230.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 222.
verify found no changes in insn with uid = 234.


delete_dir

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={95d,97u} r1={41d,34u,9e} r2={15d,7u} r3={1d,1u} r4={15d,7u} r5={17d,9u} r6={1d,86u} r7={1d,31u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={58d,12u} r18={8d} r19={8d} r20={1d,1u,10e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={12d,4u} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1094{786d,289u,19e} in 196{188 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags]
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:226 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:226 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 bitvector_len+0 S4 A32])
        (reg:SI 1 dx [ bitvector_len ])) t3.c:226 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 name+0 S8 A64])
        (reg:DI 2 cx [ name ])) t3.c:226 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])
        (reg:SI 37 r8 [ blockNumber ])) t3.c:226 90 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:227 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) t3.c:227 612 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 128
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 name+0 S8 A64])) t3.c:227 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:QI 0 ax [orig:88 D.5006 ] [88])
        (mem:QI (reg/f:DI 0 ax [128]) [0 MEM[(const char *)name_14(D)]+0 S1 A8])) t3.c:227 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.5006 ] [88])
            (const_int 0 [0]))) t3.c:227 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) t3.c:227 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 129
(code_label 17 16 18 4 52 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 bitvector_len+0 S4 A32])) t3.c:228 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:SI 0 ax [orig:89 D.5005 ] [89])
                (ashift:SI (reg:SI 0 ax [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:228 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 bitvector_len+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 21 20 22 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.5005 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32]))) t3.c:228 7 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) t3.c:228 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 130 131 132 133 134
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:229 90 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:DI 0 ax [orig:90 D.5007 ] [90])
        (sign_extend:DI (reg:SI 0 ax [130]))) t3.c:229 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 5 (set (reg:DI 0 ax [131])
        (reg:DI 0 ax [orig:90 D.5007 ] [90])) t3.c:229 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:DI 0 ax [132])
                (ashift:DI (reg:DI 0 ax [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:229 512 {*ashldi3_1}
     (nil))
(insn 28 27 256 5 (set (reg:DI 0 ax [131])
        (reg:DI 0 ax [132])) t3.c:229 89 {*movdi_internal}
     (nil))
(insn 256 28 29 5 (set (reg:DI 1 dx [133])
        (reg:DI 0 ax [131])) t3.c:229 89 {*movdi_internal}
     (nil))
(insn 29 256 30 5 (parallel [
            (set (reg:DI 1 dx [133])
                (ashift:DI (reg:DI 1 dx [133])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:229 512 {*ashldi3_1}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 1 dx [orig:91 D.5007 ] [91])
                (plus:DI (reg:DI 1 dx [133])
                    (reg:DI 0 ax [131])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:229 218 {*adddi_1}
     (nil))
(insn 31 30 32 5 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:229 89 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.5008 ] [92])
                (plus:DI (reg/f:DI 0 ax [134])
                    (reg:DI 1 dx [orig:91 D.5007 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.5007 ] [91]))
        (nil)))
(insn 33 32 34 5 (set (reg:SI 0 ax [orig:93 D.5009 ] [93])
        (mem/j:SI (reg/f:DI 0 ax [orig:92 D.5008 ] [92]) [0 _21->type+0 S4 A64])) t3.c:229 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.5009 ] [93])
            (const_int 0 [0]))) t3.c:229 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) t3.c:229 612 {*jcc_1}
     (nil)
 -> 43)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(code_label 36 35 37 6 53 "" [2 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fd504ffdd80 *.LC9>)) t3.c:231 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:231 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 40 39 245 6 (set (reg:SI 0 ax [orig:87 D.5005 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:232 90 {*movsi_internal}
     (nil))
(jump_insn 245 40 246 6 (set (pc)
        (label_ref 236)) t3.c:232 654 {jump}
     (nil)
 -> 236)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 246 245 43)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 43 246 44 7 54 "" [1 uses])
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:235 7 {*cmpsi_1}
     (nil))
(jump_insn 46 45 47 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) t3.c:235 612 {*jcc_1}
     (nil)
 -> 115)
;;  succ:       8 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 139 141 142 143 144 145 146
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:237 90 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (reg:SI 0 ax [137])
        (reg:SI 0 ax [136])) t3.c:237 90 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (parallel [
            (set (reg:SI 1 dx [138])
                (plus:SI (reg:SI 0 ax [137])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:237 217 {*addsi_1}
     (nil))
(insn 51 50 52 8 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [137])
            (const_int 0 [0]))) t3.c:237 3 {*cmpsi_ccno_1}
     (nil))
(insn 52 51 53 8 (set (reg:SI 0 ax [137])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [138])
            (reg:SI 0 ax [137]))) t3.c:237 953 {*movsicc_noc}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg:SI 0 ax [139])
                (ashiftrt:SI (reg:SI 0 ax [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:237 545 {*ashrsi3_1}
     (nil))
(insn 54 53 55 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])
        (reg:SI 0 ax [139])) t3.c:237 90 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:238 90 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:SI 1 dx [142])
                (ashiftrt:SI (reg:SI 0 ax [141])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:238 538 {ashrsi3_cvt}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:SI 1 dx [143])
                (lshiftrt:SI (reg:SI 1 dx [142])
                    (const_int 29 [0x1d])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:238 544 {*lshrsi3_1}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:SI 0 ax [144])
                (plus:SI (reg:SI 0 ax [141])
                    (reg:SI 1 dx [143])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:238 217 {*addsi_1}
     (nil))
(insn 59 58 60 8 (parallel [
            (set (reg:SI 0 ax [145])
                (and:SI (reg:SI 0 ax [144])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:238 381 {*andsi_1}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:SI 0 ax [146])
                (minus:SI (reg:SI 0 ax [145])
                    (reg:SI 1 dx [143])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:238 260 {*subsi_1}
     (nil))
(insn 61 60 62 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 bitvector_offset+0 S4 A32])
        (reg:SI 0 ax [146])) t3.c:238 90 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S4 A32])
        (const_int 128 [0x80])) t3.c:241 90 {*movsi_internal}
     (nil))
(insn 63 62 247 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) t3.c:243 90 {*movsi_internal}
     (nil))
(jump_insn 247 63 248 8 (set (pc)
        (label_ref 73)) t3.c:243 654 {jump}
     (nil)
 -> 73)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 248 247 75)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 150 151
(code_label 75 248 66 9 58 "" [1 uses])
(note 66 75 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 258 9 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S4 A32])) t3.c:244 90 {*movsi_internal}
     (nil))
(insn 258 67 68 9 (set (reg:SI 1 dx [149])
        (reg:SI 0 ax [148])) t3.c:244 90 {*movsi_internal}
     (nil))
(insn 68 258 69 9 (parallel [
            (set (reg:SI 1 dx [149])
                (lshiftrt:SI (reg:SI 1 dx [149])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:244 544 {*lshrsi3_1}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 0 ax [150])
                (plus:SI (reg:SI 0 ax [148])
                    (reg:SI 1 dx [149])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:244 217 {*addsi_1}
     (nil))
(insn 70 69 71 9 (parallel [
            (set (reg:SI 0 ax [151])
                (ashiftrt:SI (reg:SI 0 ax [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:244 545 {*ashrsi3_1}
     (nil))
(insn 71 70 72 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S4 A32])
        (reg:SI 0 ax [151])) t3.c:244 90 {*movsi_internal}
     (nil))
(insn 72 71 73 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:243 217 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152
(code_label 73 72 74 10 57 "" [1 uses])
(note 74 73 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 74 77 10 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) t3.c:243 90 {*movsi_internal}
     (nil))
(insn 77 76 78 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [152])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 bitvector_offset+0 S4 A32]))) t3.c:243 7 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) t3.c:243 612 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 97 98 153 154 155
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 11 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:246 90 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:DI 1 dx [orig:94 D.5010 ] [94])
        (sign_extend:DI (reg:SI 0 ax [153]))) t3.c:246 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 11 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:246 89 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.5011 ] [95])
                (plus:DI (reg/f:DI 0 ax [154])
                    (reg:DI 1 dx [orig:94 D.5010 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:246 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.5010 ] [94]))
        (nil)))
(insn 84 83 85 11 (set (reg:QI 0 ax [orig:96 D.5012 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 D.5011 ] [95]) [0 *_31+0 S1 A8])) t3.c:246 93 {*movqi_internal}
     (nil))
(insn 85 84 86 11 (set (reg:SI 0 ax [orig:97 D.5005 ] [97])
        (zero_extend:SI (reg:QI 0 ax [orig:96 D.5012 ] [96]))) t3.c:246 138 {*zero_extendqisi2}
     (nil))
(insn 86 85 87 11 (set (reg:SI 1 dx [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S4 A32])) t3.c:246 90 {*movsi_internal}
     (nil))
(insn 87 86 88 11 (set (reg:SI 4 si)
        (reg:SI 1 dx [155])) t3.c:246 90 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:97 D.5005 ] [97])) t3.c:246 90 {*movsi_internal}
     (nil))
(call_insn 89 88 90 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:246 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 90 89 91 11 (set (reg:SI 0 ax [orig:98 D.5005 ] [98])
        (reg:SI 0 ax)) t3.c:246 90 {*movsi_internal}
     (nil))
(insn 91 90 92 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.5005 ] [98])
            (const_int 0 [0]))) t3.c:246 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 92 91 93 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 121)
            (pc))) t3.c:246 612 {*jcc_1}
     (nil)
 -> 121)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 103 104 105 106 156 157 158 159 160
(note 93 92 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 12 (set (reg:SI 0 ax [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:247 90 {*movsi_internal}
     (nil))
(insn 95 94 96 12 (set (reg:DI 1 dx [orig:99 D.5010 ] [99])
        (sign_extend:DI (reg:SI 0 ax [156]))) t3.c:247 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 12 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:247 89 {*movdi_internal}
     (nil))
(insn 97 96 98 12 (parallel [
            (set (reg/f:DI 3 bx [orig:100 D.5011 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 D.5010 ] [99])
                    (reg/f:DI 0 ax [157])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:247 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.5010 ] [99]))
        (nil)))
(insn 98 97 99 12 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:247 90 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg:DI 1 dx [orig:101 D.5010 ] [101])
        (sign_extend:DI (reg:SI 0 ax [158]))) t3.c:247 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:247 89 {*movdi_internal}
     (nil))
(insn 101 100 102 12 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.5011 ] [102])
                (plus:DI (reg/f:DI 0 ax [159])
                    (reg:DI 1 dx [orig:101 D.5010 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:247 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.5010 ] [101]))
        (nil)))
(insn 102 101 103 12 (set (reg:QI 0 ax [orig:103 D.5012 ] [103])
        (mem:QI (reg/f:DI 0 ax [orig:102 D.5011 ] [102]) [0 *_39+0 S1 A8])) t3.c:247 93 {*movqi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 0 ax [orig:104 D.5005 ] [104])
        (zero_extend:SI (reg:QI 0 ax [orig:103 D.5012 ] [103]))) t3.c:247 138 {*zero_extendqisi2}
     (nil))
(insn 104 103 105 12 (set (reg:SI 1 dx [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mask+0 S4 A32])) t3.c:247 90 {*movsi_internal}
     (nil))
(insn 105 104 106 12 (set (reg:SI 4 si)
        (reg:SI 1 dx [160])) t3.c:247 90 {*movsi_internal}
     (nil))
(insn 106 105 107 12 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:104 D.5005 ] [104])) t3.c:247 90 {*movsi_internal}
     (nil))
(call_insn 107 106 108 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("flip_bit") [flags 0x3]  <function_decl 0x7fd504f2d5e8 flip_bit>) [0 flip_bit S1 A8])
            (const_int 0 [0]))) t3.c:247 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 108 107 109 12 (set (reg:SI 0 ax [orig:105 D.5005 ] [105])
        (reg:SI 0 ax)) t3.c:247 90 {*movsi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:QI 0 ax [orig:106 D.5012 ] [106])
        (reg:QI 0 ax [orig:105 D.5005 ] [105])) t3.c:247 93 {*movqi_internal}
     (nil))
(insn 110 109 249 12 (set (mem:QI (reg/f:DI 3 bx [orig:100 D.5011 ] [100]) [0 *_37+0 S1 A8])
        (reg:QI 0 ax [orig:106 D.5012 ] [106])) t3.c:247 93 {*movqi_internal}
     (nil))
(jump_insn 249 110 250 12 (set (pc)
        (label_ref 121)) 654 {jump}
     (nil)
 -> 121)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 250 249 115)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 115 250 116 13 56 "" [1 uses])
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fd504ffde10 *.LC10>)) t3.c:253 89 {*movdi_internal}
     (nil))
(call_insn 118 117 119 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:253 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])
        (const_int 0 [0])) t3.c:254 90 {*movsi_internal}
     (nil))
(insn 120 119 121 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 bitvector_offset+0 S4 A32])
        (const_int 0 [0])) t3.c:255 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              13 (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 121 120 122 14 60 "" [2 uses])
(note 122 121 123 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 251 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) t3.c:260 90 {*movsi_internal}
     (nil))
(jump_insn 251 123 252 14 (set (pc)
        (label_ref 197)) t3.c:260 654 {jump}
     (nil)
 -> 197)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 252 251 199)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 110 161 162 163 164 165 166 167 168
(code_label 199 252 126 15 64 "" [1 uses])
(note 126 199 127 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 15 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:261 90 {*movsi_internal}
     (nil))
(insn 128 127 129 15 (set (reg:DI 0 ax [orig:107 D.5007 ] [107])
        (sign_extend:DI (reg:SI 0 ax [161]))) t3.c:261 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 15 (set (reg:DI 0 ax [162])
        (reg:DI 0 ax [orig:107 D.5007 ] [107])) t3.c:261 89 {*movdi_internal}
     (nil))
(insn 130 129 131 15 (parallel [
            (set (reg:DI 0 ax [163])
                (ashift:DI (reg:DI 0 ax [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:261 512 {*ashldi3_1}
     (nil))
(insn 131 130 260 15 (set (reg:DI 0 ax [162])
        (reg:DI 0 ax [163])) t3.c:261 89 {*movdi_internal}
     (nil))
(insn 260 131 132 15 (set (reg:DI 1 dx [164])
        (reg:DI 0 ax [162])) t3.c:261 89 {*movdi_internal}
     (nil))
(insn 132 260 133 15 (parallel [
            (set (reg:DI 1 dx [164])
                (ashift:DI (reg:DI 1 dx [164])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:261 512 {*ashldi3_1}
     (nil))
(insn 133 132 134 15 (parallel [
            (set (reg:DI 1 dx [orig:108 D.5007 ] [108])
                (plus:DI (reg:DI 1 dx [164])
                    (reg:DI 0 ax [162])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:261 218 {*adddi_1}
     (nil))
(insn 134 133 135 15 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:261 89 {*movdi_internal}
     (nil))
(insn 135 134 136 15 (parallel [
            (set (reg/f:DI 1 dx [orig:109 D.5008 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.5007 ] [108])
                    (reg/f:DI 0 ax [165])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:261 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.5007 ] [108]))
        (nil)))
(insn 136 135 137 15 (set (reg:SI 0 ax [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) t3.c:261 90 {*movsi_internal}
     (nil))
(insn 137 136 138 15 (set (reg:DI 0 ax [166])
        (sign_extend:DI (reg:SI 0 ax [167]))) t3.c:261 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 15 (set (reg:HI 0 ax [orig:110 D.5013 ] [110])
        (mem/j:HI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [166])
                        (const_int 2 [0x2]))
                    (reg/f:DI 1 dx [orig:109 D.5008 ] [109]))
                (const_int 8 [0x8])) [0 _52->content.index S2 A16])) t3.c:261 92 {*movhi_internal}
     (nil))
(insn 139 138 140 15 (set (reg:SI 0 ax [168])
        (zero_extend:SI (reg:HI 0 ax [orig:110 D.5013 ] [110]))) t3.c:261 139 {*zero_extendhisi2}
     (nil))
(insn 140 139 141 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])
        (reg:SI 0 ax [168])) t3.c:261 90 {*movsi_internal}
     (nil))
(insn 141 140 142 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:261 7 {*cmpsi_1}
     (nil))
(jump_insn 142 141 143 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) t3.c:261 612 {*jcc_1}
     (nil)
 -> 194)
;;  succ:       16 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 169 170 171 172 173
(note 143 142 144 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 16 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])) t3.c:262 90 {*movsi_internal}
     (nil))
(insn 145 144 146 16 (set (reg:DI 0 ax [orig:111 D.5007 ] [111])
        (sign_extend:DI (reg:SI 0 ax [169]))) t3.c:262 142 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 16 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [orig:111 D.5007 ] [111])) t3.c:262 89 {*movdi_internal}
     (nil))
(insn 147 146 148 16 (parallel [
            (set (reg:DI 0 ax [171])
                (ashift:DI (reg:DI 0 ax [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:262 512 {*ashldi3_1}
     (nil))
(insn 148 147 262 16 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [171])) t3.c:262 89 {*movdi_internal}
     (nil))
(insn 262 148 149 16 (set (reg:DI 1 dx [172])
        (reg:DI 0 ax [170])) t3.c:262 89 {*movdi_internal}
     (nil))
(insn 149 262 150 16 (parallel [
            (set (reg:DI 1 dx [172])
                (ashift:DI (reg:DI 1 dx [172])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:262 512 {*ashldi3_1}
     (nil))
(insn 150 149 151 16 (parallel [
            (set (reg:DI 1 dx [orig:112 D.5007 ] [112])
                (plus:DI (reg:DI 1 dx [172])
                    (reg:DI 0 ax [170])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:262 218 {*adddi_1}
     (nil))
(insn 151 150 152 16 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:262 89 {*movdi_internal}
     (nil))
(insn 152 151 153 16 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.5008 ] [113])
                (plus:DI (reg/f:DI 0 ax [173])
                    (reg:DI 1 dx [orig:112 D.5007 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:262 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.5007 ] [112]))
        (nil)))
(insn 153 152 154 16 (set (reg:SI 0 ax [orig:114 D.5009 ] [114])
        (mem/j:SI (reg/f:DI 0 ax [orig:113 D.5008 ] [113]) [0 _57->type+0 S4 A64])) t3.c:262 90 {*movsi_internal}
     (nil))
(insn 154 153 155 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:114 D.5009 ] [114])
            (const_int 1 [0x1]))) t3.c:262 7 {*cmpsi_1}
     (nil))
(jump_insn 155 154 156 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) t3.c:262 612 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 174 175 176 177
(note 156 155 157 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 158 17 (set (reg:SI 2 cx [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])) t3.c:263 90 {*movsi_internal}
     (nil))
(insn 158 157 159 17 (set (reg:SI 1 dx [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 bitvector_len+0 S4 A32])) t3.c:263 90 {*movsi_internal}
     (nil))
(insn 159 158 160 17 (set (reg:DI 4 si [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:263 89 {*movdi_internal}
     (nil))
(insn 160 159 161 17 (set (reg:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:263 89 {*movdi_internal}
     (nil))
(insn 161 160 162 17 (set (reg:SI 37 r8)
        (reg:SI 2 cx [174])) t3.c:263 90 {*movsi_internal}
     (nil))
(insn 162 161 165 17 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:263 89 {*movdi_internal}
     (nil))
(insn 165 162 166 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [177])) t3.c:263 89 {*movdi_internal}
     (nil))
(call_insn 166 165 253 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete_file") [flags 0x3]  <function_decl 0x7fd504f2d870 delete_file>) [0 delete_file S1 A8])
            (const_int 0 [0]))) t3.c:263 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(jump_insn 253 166 254 17 (set (pc)
        (label_ref 194)) 654 {jump}
     (nil)
 -> 194)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 254 253 169)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 178 179 180 181 182
(code_label 169 254 170 18 63 "" [1 uses])
(note 170 169 171 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 18 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])) t3.c:264 90 {*movsi_internal}
     (nil))
(insn 172 171 173 18 (set (reg:DI 0 ax [orig:115 D.5007 ] [115])
        (sign_extend:DI (reg:SI 0 ax [178]))) t3.c:264 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 18 (set (reg:DI 0 ax [179])
        (reg:DI 0 ax [orig:115 D.5007 ] [115])) t3.c:264 89 {*movdi_internal}
     (nil))
(insn 174 173 175 18 (parallel [
            (set (reg:DI 0 ax [180])
                (ashift:DI (reg:DI 0 ax [179])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:264 512 {*ashldi3_1}
     (nil))
(insn 175 174 264 18 (set (reg:DI 0 ax [179])
        (reg:DI 0 ax [180])) t3.c:264 89 {*movdi_internal}
     (nil))
(insn 264 175 176 18 (set (reg:DI 1 dx [181])
        (reg:DI 0 ax [179])) t3.c:264 89 {*movdi_internal}
     (nil))
(insn 176 264 177 18 (parallel [
            (set (reg:DI 1 dx [181])
                (ashift:DI (reg:DI 1 dx [181])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:264 512 {*ashldi3_1}
     (nil))
(insn 177 176 178 18 (parallel [
            (set (reg:DI 1 dx [orig:116 D.5007 ] [116])
                (plus:DI (reg:DI 1 dx [181])
                    (reg:DI 0 ax [179])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:264 218 {*adddi_1}
     (nil))
(insn 178 177 179 18 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:264 89 {*movdi_internal}
     (nil))
(insn 179 178 180 18 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.5008 ] [117])
                (plus:DI (reg/f:DI 0 ax [182])
                    (reg:DI 1 dx [orig:116 D.5007 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:264 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.5007 ] [116]))
        (nil)))
(insn 180 179 181 18 (set (reg:SI 0 ax [orig:118 D.5009 ] [118])
        (mem/j:SI (reg/f:DI 0 ax [orig:117 D.5008 ] [117]) [0 _62->type+0 S4 A64])) t3.c:264 90 {*movsi_internal}
     (nil))
(insn 181 180 182 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 D.5009 ] [118])
            (const_int 0 [0]))) t3.c:264 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 182 181 183 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) t3.c:264 612 {*jcc_1}
     (nil)
 -> 194)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 183 184 185 186
(note 183 182 184 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 185 19 (set (reg:SI 2 cx [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 index+0 S4 A32])) t3.c:265 90 {*movsi_internal}
     (nil))
(insn 185 184 186 19 (set (reg:SI 1 dx [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 bitvector_len+0 S4 A32])) t3.c:265 90 {*movsi_internal}
     (nil))
(insn 186 185 187 19 (set (reg:DI 4 si [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:265 89 {*movdi_internal}
     (nil))
(insn 187 186 188 19 (set (reg:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:265 89 {*movdi_internal}
     (nil))
(insn 188 187 189 19 (set (reg:SI 37 r8)
        (reg:SI 2 cx [183])) t3.c:265 90 {*movsi_internal}
     (nil))
(insn 189 188 192 19 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:265 89 {*movdi_internal}
     (nil))
(insn 192 189 193 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [186])) t3.c:265 89 {*movdi_internal}
     (nil))
(call_insn 193 192 194 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete_dir") [flags 0x3]  <function_decl 0x7fd504f2d948 delete_dir>) [0 delete_dir S1 A8])
            (const_int 0 [0]))) t3.c:265 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              19 (FALLTHRU)
;;              18
;;              17 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 194 193 195 20 62 "" [3 uses])
(note 195 194 196 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:260 217 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 197 196 198 21 61 "" [1 uses])
(note 198 197 200 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 200 198 201 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
            (const_int 126 [0x7e]))) t3.c:260 7 {*cmpsi_1}
     (nil))
(jump_insn 201 200 202 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 199)
            (pc))) t3.c:260 612 {*jcc_1}
     (nil)
 -> 199)
;;  succ:       15
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 119 120 121 122 123 124 125 126 187 188 189 190 191 192 193 194 195 196 197
(note 202 201 203 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 22 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:270 90 {*movsi_internal}
     (nil))
(insn 204 203 205 22 (set (reg:DI 0 ax [orig:119 D.5007 ] [119])
        (sign_extend:DI (reg:SI 0 ax [187]))) t3.c:270 142 {*extendsidi2_rex64}
     (nil))
(insn 205 204 206 22 (set (reg:DI 0 ax [188])
        (reg:DI 0 ax [orig:119 D.5007 ] [119])) t3.c:270 89 {*movdi_internal}
     (nil))
(insn 206 205 207 22 (parallel [
            (set (reg:DI 0 ax [189])
                (ashift:DI (reg:DI 0 ax [188])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:270 512 {*ashldi3_1}
     (nil))
(insn 207 206 266 22 (set (reg:DI 0 ax [188])
        (reg:DI 0 ax [189])) t3.c:270 89 {*movdi_internal}
     (nil))
(insn 266 207 208 22 (set (reg:DI 1 dx [190])
        (reg:DI 0 ax [188])) t3.c:270 89 {*movdi_internal}
     (nil))
(insn 208 266 209 22 (parallel [
            (set (reg:DI 1 dx [190])
                (ashift:DI (reg:DI 1 dx [190])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:270 512 {*ashldi3_1}
     (nil))
(insn 209 208 210 22 (parallel [
            (set (reg:DI 1 dx [orig:120 D.5007 ] [120])
                (plus:DI (reg:DI 1 dx [190])
                    (reg:DI 0 ax [188])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:270 218 {*adddi_1}
     (nil))
(insn 210 209 211 22 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 memory+0 S8 A64])) t3.c:270 89 {*movdi_internal}
     (nil))
(insn 211 210 212 22 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.5008 ] [121])
                (plus:DI (reg/f:DI 0 ax [191])
                    (reg:DI 1 dx [orig:120 D.5007 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:270 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.5007 ] [120]))
        (nil)))
(insn 212 211 213 22 (parallel [
            (set (reg/f:DI 4 si [orig:122 D.5014 ] [122])
                (plus:DI (reg/f:DI 0 ax [orig:121 D.5008 ] [121])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:270 218 {*adddi_1}
     (nil))
(insn 213 212 214 22 (set (reg:SI 2 cx [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 bitvector_offset+0 S4 A32])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 214 213 215 22 (set (reg:SI 1 dx [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 215 214 216 22 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 blockNumber+0 S4 A32])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 216 215 217 22 (set (reg:SI 37 r8)
        (reg:SI 2 cx [192])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 217 216 218 22 (set (reg:SI 2 cx)
        (reg:SI 1 dx [193])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 218 217 220 22 (set (reg:SI 1 dx)
        (reg:SI 0 ax [194])) t3.c:269 90 {*movsi_internal}
     (nil))
(insn 220 218 221 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fd504ffdf30 *.LC12>)) t3.c:269 89 {*movdi_internal}
     (nil))
(insn 221 220 222 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:269 93 {*movqi_internal}
     (nil))
(call_insn 222 221 223 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:269 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 223 222 224 22 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:271 90 {*movsi_internal}
     (nil))
(insn 224 223 225 22 (set (reg:DI 1 dx [orig:123 D.5010 ] [123])
        (sign_extend:DI (reg:SI 0 ax [195]))) t3.c:271 142 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 22 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector+0 S8 A64])) t3.c:271 89 {*movdi_internal}
     (nil))
(insn 226 225 227 22 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.5011 ] [124])
                (plus:DI (reg/f:DI 0 ax [196])
                    (reg:DI 1 dx [orig:123 D.5010 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.5010 ] [123]))
        (nil)))
(insn 227 226 228 22 (set (reg:QI 0 ax [orig:125 D.5012 ] [125])
        (mem:QI (reg/f:DI 0 ax [orig:124 D.5011 ] [124]) [0 *_72+0 S1 A8])) t3.c:271 93 {*movqi_internal}
     (nil))
(insn 228 227 229 22 (set (reg:SI 1 dx [orig:126 D.5005 ] [126])
        (zero_extend:SI (reg:QI 0 ax [orig:125 D.5012 ] [125]))) t3.c:271 138 {*zero_extendqisi2}
     (nil))
(insn 229 228 231 22 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 bitvector_index+0 S4 A32])) t3.c:271 90 {*movsi_internal}
     (nil))
(insn 231 229 232 22 (set (reg:SI 4 si)
        (reg:SI 0 ax [197])) t3.c:271 90 {*movsi_internal}
     (nil))
(insn 232 231 233 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fd50500a000 *.LC13>)) t3.c:271 89 {*movdi_internal}
     (nil))
(insn 233 232 234 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:271 93 {*movqi_internal}
     (nil))
(call_insn 234 233 235 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:271 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 235 234 236 22 (set (reg:SI 0 ax [orig:87 D.5005 ] [87])
        (const_int 0 [0])) t3.c:272 90 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              6 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 127
(code_label 236 235 237 23 55 "" [1 uses])
(note 237 236 238 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 242 23 (set (reg:SI 0 ax [orig:127 <retval> ] [127])
        (reg:SI 0 ax [orig:87 D.5005 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 242 238 243 23 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:127 <retval> ] [127])) t3.c:273 90 {*movsi_internal}
     (nil))
(insn 243 242 255 23 (use (reg/i:SI 0 ax)) t3.c:273 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 255 243 0 NOTE_INSN_DELETED)

;; Function obtain_file_information (obtain_file_information, funcdef_no=11, decl_uid=4533, cgraph_uid=11, symbol_order=11)

      Creating newreg=212
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=213
Removing SCRATCH in insn #285 (nop 3)
rescanning insn with uid = 285.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r212
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=214 from oldreg=145, assigning class GENERAL_REGS to r214
   30: {r214:DI=r214:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  301: r214:DI=r143:DI
    Inserting insn reload after:
  302: r145:DI=r214:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=215 from oldreg=150, assigning class GENERAL_REGS to r215
   43: {r215:DI=r215:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  303: r215:DI=r148:DI
    Inserting insn reload after:
  304: r150:DI=r215:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 60:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 112:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 116:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=216 from oldreg=167, assigning class GENERAL_REGS to r216
  124: {r216:DI=r216:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  305: r216:DI=r165:DI
    Inserting insn reload after:
  306: r167:DI=r216:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 125
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 147:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=217 from oldreg=172, assigning class GENERAL_REGS to r217
  147: {r217:DI=r217:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  307: r217:DI=r170:DI
    Inserting insn reload after:
  308: r172:DI=r217:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 148
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 163:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=218 from oldreg=177, assigning class GENERAL_REGS to r218
  163: {r218:DI=r218:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  309: r218:DI=r175:DI
    Inserting insn reload after:
  310: r177:DI=r218:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 166
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 171:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 176:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 182:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 183:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=219 from oldreg=186, assigning class GENERAL_REGS to r219
  191: {r219:DI=r219:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  311: r219:DI=r184:DI
    Inserting insn reload after:
  312: r186:DI=r219:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 199:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 201:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 203:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 209:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 210:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 211:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 219:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=220 from oldreg=195, assigning class GENERAL_REGS to r220
  219: {r220:DI=r220:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  313: r220:DI=r193:DI
    Inserting insn reload after:
  314: r195:DI=r220:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 227:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 231:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 235:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 237:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 238:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 239:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 247:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=221 from oldreg=204, assigning class GENERAL_REGS to r221
  247: {r221:DI=r221:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  315: r221:DI=r202:DI
    Inserting insn reload after:
  316: r204:DI=r221:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 248
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 253:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 254:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 255:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 263:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=222 from oldreg=209, assigning class GENERAL_REGS to r222
  263: {r222:DI=r222:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  317: r222:DI=r207:DI
    Inserting insn reload after:
  318: r209:DI=r222:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 264
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 270:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 271:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 272:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r213
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 15
   Insn 287: point = 0
  BB 16
   Insn 290: point = 0
  BB 14
   Insn 286: point = 0
   Insn 285: point = 0
   Insn 284: point = 1
   Insn 280: point = 2
  BB 9
   Insn 296: point = 5
   Insn 107: point = 5
   Insn 106: point = 6
   Insn 105: point = 6
   Insn 104: point = 6
   Insn 103: point = 6
   Insn 102: point = 7
  BB 7
   Insn 294: point = 8
   Insn 54: point = 8
   Insn 53: point = 9
   Insn 52: point = 9
  BB 13
   Insn 275: point = 9
   Insn 274: point = 10
   Insn 273: point = 10
   Insn 272: point = 10
   Insn 271: point = 10
   Insn 270: point = 10
   Insn 269: point = 10
   Insn 268: point = 11
   Insn 267: point = 13
   Insn 266: point = 15
   Insn 265: point = 17
   Insn 264: point = 18
   Insn 318: point = 20
	Hard reg 1 is preferable by r222 with profit 1
   Insn 263: point = 22
   Insn 317: point = 22
   Insn 262: point = 23
   Insn 261: point = 25
   Insn 260: point = 27
   Insn 259: point = 29
   Insn 258: point = 31
   Insn 257: point = 32
   Insn 256: point = 32
   Insn 255: point = 32
   Insn 254: point = 32
   Insn 253: point = 32
   Insn 252: point = 32
   Insn 251: point = 33
   Insn 250: point = 35
   Insn 249: point = 37
   Insn 248: point = 38
   Insn 316: point = 40
	Hard reg 1 is preferable by r221 with profit 1
   Insn 247: point = 42
   Insn 315: point = 42
   Insn 246: point = 43
   Insn 245: point = 45
   Insn 244: point = 47
   Insn 243: point = 49
   Insn 242: point = 51
   Insn 241: point = 52
   Insn 240: point = 52
   Insn 239: point = 52
   Insn 238: point = 52
   Insn 237: point = 52
   Insn 236: point = 52
   Insn 235: point = 53
   Insn 234: point = 54
   Insn 233: point = 54
   Insn 232: point = 55
   Insn 231: point = 55
   Insn 230: point = 55
   Insn 229: point = 56
   Insn 228: point = 57
   Insn 227: point = 58
   Insn 226: point = 59
   Insn 225: point = 60
   Insn 224: point = 60
   Insn 223: point = 61
   Insn 222: point = 63
   Insn 221: point = 65
   Insn 220: point = 66
   Insn 314: point = 68
	Hard reg 1 is preferable by r220 with profit 1
   Insn 219: point = 70
   Insn 313: point = 70
   Insn 218: point = 71
   Insn 217: point = 73
   Insn 216: point = 75
   Insn 215: point = 77
   Insn 214: point = 79
   Insn 213: point = 80
   Insn 212: point = 80
   Insn 211: point = 80
   Insn 210: point = 80
   Insn 209: point = 80
   Insn 208: point = 80
   Insn 207: point = 81
   Insn 206: point = 82
   Insn 205: point = 82
   Insn 204: point = 83
   Insn 203: point = 83
   Insn 202: point = 83
   Insn 201: point = 84
   Insn 200: point = 85
   Insn 199: point = 86
   Insn 198: point = 87
   Insn 197: point = 88
   Insn 196: point = 88
   Insn 195: point = 89
   Insn 194: point = 91
   Insn 193: point = 93
   Insn 192: point = 94
   Insn 312: point = 96
	Hard reg 1 is preferable by r219 with profit 1
   Insn 191: point = 98
   Insn 311: point = 98
   Insn 190: point = 99
   Insn 189: point = 101
   Insn 188: point = 103
   Insn 187: point = 105
   Insn 186: point = 107
   Insn 185: point = 108
   Insn 184: point = 108
   Insn 183: point = 108
   Insn 182: point = 108
   Insn 181: point = 108
   Insn 180: point = 108
   Insn 179: point = 109
   Insn 178: point = 110
   Insn 177: point = 110
   Insn 176: point = 111
   Insn 175: point = 111
   Insn 174: point = 111
   Insn 173: point = 112
   Insn 172: point = 113
   Insn 171: point = 114
   Insn 170: point = 115
   Insn 169: point = 116
   Insn 168: point = 116
   Insn 167: point = 117
   Insn 166: point = 119
   Insn 165: point = 121
   Insn 164: point = 122
   Insn 310: point = 124
	Hard reg 1 is preferable by r218 with profit 1
   Insn 163: point = 126
   Insn 309: point = 126
   Insn 162: point = 127
   Insn 161: point = 129
   Insn 160: point = 131
   Insn 159: point = 133
   Insn 158: point = 135
   Insn 157: point = 136
   Insn 156: point = 136
   Insn 155: point = 136
   Insn 154: point = 136
   Insn 153: point = 136
   Insn 152: point = 136
   Insn 151: point = 137
   Insn 150: point = 139
   Insn 149: point = 141
   Insn 148: point = 142
   Insn 308: point = 144
	Hard reg 1 is preferable by r217 with profit 1
   Insn 147: point = 146
   Insn 307: point = 146
   Insn 146: point = 147
   Insn 145: point = 149
   Insn 144: point = 151
   Insn 143: point = 153
   Insn 142: point = 155
  BB 11
   Insn 298: point = 156
   Insn 133: point = 156
   Insn 132: point = 156
  BB 12
   Insn 139: point = 156
   Insn 138: point = 156
  BB 10
   Insn 130: point = 156
   Insn 129: point = 156
   Insn 128: point = 157
   Insn 127: point = 159
   Insn 126: point = 161
   Insn 125: point = 162
   Insn 306: point = 164
	Hard reg 1 is preferable by r216 with profit 1
   Insn 124: point = 166
   Insn 305: point = 166
   Insn 123: point = 167
   Insn 122: point = 169
   Insn 121: point = 171
   Insn 120: point = 173
   Insn 119: point = 175
   Insn 118: point = 176
   Insn 117: point = 176
   Insn 116: point = 176
   Insn 115: point = 176
   Insn 114: point = 176
   Insn 113: point = 176
   Insn 112: point = 176
  BB 8
   Insn 100: point = 176
   Insn 99: point = 176
   Insn 98: point = 177
   Insn 97: point = 178
   Insn 96: point = 180
   Insn 95: point = 181
   Insn 94: point = 183
   Insn 93: point = 185
   Insn 92: point = 187
   Insn 91: point = 188
   Insn 90: point = 190
   Insn 89: point = 191
   Insn 88: point = 191
   Insn 87: point = 191
   Insn 86: point = 191
   Insn 85: point = 192
   Insn 84: point = 193
   Insn 83: point = 194
   Insn 82: point = 196
   Insn 81: point = 198
   Insn 80: point = 200
   Insn 79: point = 201
   Insn 78: point = 203
   Insn 77: point = 204
   Insn 76: point = 204
   Insn 75: point = 204
   Insn 74: point = 204
   Insn 73: point = 205
   Insn 72: point = 206
   Insn 71: point = 207
   Insn 70: point = 208
   Insn 69: point = 209
   Insn 68: point = 210
   Insn 67: point = 211
   Insn 66: point = 212
   Insn 65: point = 212
   Insn 64: point = 213
   Insn 63: point = 214
   Insn 62: point = 215
   Insn 61: point = 216
   Insn 60: point = 217
   Insn 59: point = 218
  BB 6
   Insn 49: point = 218
   Insn 48: point = 218
   Insn 47: point = 219
   Insn 46: point = 221
   Insn 45: point = 223
   Insn 44: point = 224
   Insn 304: point = 226
	Hard reg 1 is preferable by r215 with profit 1
   Insn 43: point = 228
   Insn 303: point = 228
   Insn 42: point = 229
   Insn 41: point = 231
   Insn 40: point = 233
   Insn 39: point = 235
   Insn 38: point = 237
  BB 5
   Insn 36: point = 238
   Insn 35: point = 238
   Insn 34: point = 239
   Insn 33: point = 241
   Insn 32: point = 243
   Insn 31: point = 244
   Insn 302: point = 246
	Hard reg 1 is preferable by r214 with profit 1
   Insn 30: point = 248
   Insn 301: point = 248
   Insn 29: point = 249
   Insn 28: point = 251
   Insn 27: point = 253
   Insn 26: point = 255
   Insn 25: point = 257
  BB 4
   Insn 23: point = 258
   Insn 22: point = 258
   Insn 21: point = 259
   Insn 20: point = 261
  BB 3
   Insn 17: point = 262
   Insn 16: point = 262
   Insn 15: point = 263
   Insn 14: point = 265
  BB 2
   Insn 12: point = 266
   Insn 11: point = 266
   Insn 8: point = 266
   Insn 6: point = 268
   Insn 5: point = 268
   Insn 4: point = 268
   Insn 3: point = 268
   Insn 2: point = 268
 r87: [8..9] [3..5]
 r88: [262..263]
 r89: [258..259]
 r90: [254..255]
 r91: [242..244]
 r92: [240..241]
 r93: [238..239]
 r94: [234..235]
 r95: [222..224]
 r96: [220..221]
 r97: [218..219]
 r98: [206..209]
 r99: [199..201]
 r100: [197..198]
 r101: [195..196]
 r102: [192..194]
 r103: [186..188]
 r104: [184..185]
 r105: [182..183]
 r106: [179..181]
 r107: [179..180]
 r108: [176..178]
 r109: [176..177]
 r110: [172..173]
 r111: [160..162]
 r112: [158..159]
 r113: [156..157]
 r114: [152..153]
 r115: [140..142]
 r116: [138..139]
 r117: [136..137]
 r118: [132..133]
 r119: [120..122]
 r120: [118..119]
 r121: [116..117]
 r122: [104..105]
 r123: [92..94]
 r124: [90..91]
 r125: [88..89]
 r126: [76..77]
 r127: [64..66]
 r128: [62..63]
 r129: [60..61]
 r130: [48..49]
 r131: [36..38]
 r132: [34..35]
 r133: [32..33]
 r134: [28..29]
 r135: [16..18]
 r136: [14..15]
 r137: [12..13]
 r138: [10..11]
 r139: [1..2]
 r140: [264..265]
 r141: [260..261]
 r142: [256..257]
 r143: [252..253] [245..249]
 r144: [250..251]
 r145: [245..246]
 r146: [242..243]
 r147: [236..237]
 r148: [232..233] [225..229]
 r149: [230..231]
 r150: [225..226]
 r151: [222..223]
 r152: [214..217]
 r153: [213..216]
 r154: [212..215]
 r155: [210..211]
 r156: [205..208]
 r157: [204..207]
 r158: [202..203]
 r159: [199..200]
 r160: [191..193]
 r161: [189..190]
 r162: [186..187]
 r163: [6..7]
 r164: [174..175]
 r165: [170..171] [163..167]
 r166: [168..169]
 r167: [163..164]
 r168: [160..161]
 r169: [154..155]
 r170: [150..151] [143..147]
 r171: [148..149]
 r172: [143..144]
 r173: [140..141]
 r174: [134..135]
 r175: [130..131] [123..127]
 r176: [128..129]
 r177: [123..124]
 r178: [120..121]
 r179: [114..115]
 r180: [111..113]
 r181: [110..112]
 r182: [108..109]
 r183: [106..107]
 r184: [102..103] [95..99]
 r185: [100..101]
 r186: [95..96]
 r187: [92..93]
 r188: [86..87]
 r189: [83..85]
 r190: [82..84]
 r191: [80..81]
 r192: [78..79]
 r193: [74..75] [67..71]
 r194: [72..73]
 r195: [67..68]
 r196: [64..65]
 r197: [58..59]
 r198: [55..57]
 r199: [54..56]
 r200: [52..53]
 r201: [50..51]
 r202: [46..47] [39..43]
 r203: [44..45]
 r204: [39..40]
 r205: [36..37]
 r206: [30..31]
 r207: [26..27] [19..23]
 r208: [24..25]
 r209: [19..20]
 r210: [16..17]
 r212: [266..267]
 r213: [0..0]
 r214: [247..248]
 r215: [227..228]
 r216: [165..166]
 r217: [145..146]
 r218: [125..126]
 r219: [97..98]
 r220: [69..70]
 r221: [41..42]
 r222: [21..22]
Compressing live ranges: from 268 to 229 - 85%
Ranges after the compression:
 r87: [7..8] [3..4]
 r88: [223..224]
 r89: [219..220]
 r90: [215..216]
 r91: [205..206]
 r92: [203..204]
 r93: [201..202]
 r94: [197..198]
 r95: [187..188]
 r96: [185..186]
 r97: [183..184]
 r98: [177..178]
 r99: [173..174]
 r100: [171..172]
 r101: [169..170]
 r102: [167..168]
 r103: [163..164]
 r104: [161..162]
 r105: [159..160]
 r106: [157..158]
 r107: [157..158]
 r108: [155..156]
 r109: [155..156]
 r110: [151..152]
 r111: [141..142]
 r112: [139..140]
 r113: [137..138]
 r114: [133..134]
 r115: [123..124]
 r116: [121..122]
 r117: [119..120]
 r118: [115..116]
 r119: [105..106]
 r120: [103..104]
 r121: [101..102]
 r122: [91..92]
 r123: [81..82]
 r124: [79..80]
 r125: [77..78]
 r126: [67..68]
 r127: [57..58]
 r128: [55..56]
 r129: [53..54]
 r130: [43..44]
 r131: [33..34]
 r132: [31..32]
 r133: [29..30]
 r134: [25..26]
 r135: [15..16]
 r136: [13..14]
 r137: [11..12]
 r138: [9..10]
 r139: [1..2]
 r140: [225..226]
 r141: [221..222]
 r142: [217..218]
 r143: [213..214] [207..210]
 r144: [211..212]
 r145: [207..208]
 r146: [205..206]
 r147: [199..200]
 r148: [195..196] [189..192]
 r149: [193..194]
 r150: [189..190]
 r151: [187..188]
 r152: [181..182]
 r153: [181..182]
 r154: [181..182]
 r155: [179..180]
 r156: [177..178]
 r157: [177..178]
 r158: [175..176]
 r159: [173..174]
 r160: [167..168]
 r161: [165..166]
 r162: [163..164]
 r163: [5..6]
 r164: [153..154]
 r165: [149..150] [143..146]
 r166: [147..148]
 r167: [143..144]
 r168: [141..142]
 r169: [135..136]
 r170: [131..132] [125..128]
 r171: [129..130]
 r172: [125..126]
 r173: [123..124]
 r174: [117..118]
 r175: [113..114] [107..110]
 r176: [111..112]
 r177: [107..108]
 r178: [105..106]
 r179: [99..100]
 r180: [97..98]
 r181: [97..98]
 r182: [95..96]
 r183: [93..94]
 r184: [89..90] [83..86]
 r185: [87..88]
 r186: [83..84]
 r187: [81..82]
 r188: [75..76]
 r189: [73..74]
 r190: [73..74]
 r191: [71..72]
 r192: [69..70]
 r193: [65..66] [59..62]
 r194: [63..64]
 r195: [59..60]
 r196: [57..58]
 r197: [51..52]
 r198: [49..50]
 r199: [49..50]
 r200: [47..48]
 r201: [45..46]
 r202: [41..42] [35..38]
 r203: [39..40]
 r204: [35..36]
 r205: [33..34]
 r206: [27..28]
 r207: [23..24] [17..20]
 r208: [21..22]
 r209: [17..18]
 r210: [15..16]
 r212: [227..228]
 r213: [0..0]
 r214: [209..210]
 r215: [191..192]
 r216: [145..146]
 r217: [127..128]
 r218: [109..110]
 r219: [85..86]
 r220: [61..62]
 r221: [37..38]
 r222: [19..20]

********** Assignment #1: **********

	 Assigning to 214 (cl=GENERAL_REGS, orig=145, freq=3, tfirst=214, tfreq=3)...
	   Assign 1 to reload r214 (freq=3)
	 Assigning to 215 (cl=GENERAL_REGS, orig=150, freq=3, tfirst=215, tfreq=3)...
	   Assign 1 to reload r215 (freq=3)
	 Assigning to 216 (cl=GENERAL_REGS, orig=167, freq=3, tfirst=216, tfreq=3)...
	   Assign 1 to reload r216 (freq=3)
	 Assigning to 217 (cl=GENERAL_REGS, orig=172, freq=3, tfirst=217, tfreq=3)...
	   Assign 1 to reload r217 (freq=3)
	 Assigning to 218 (cl=GENERAL_REGS, orig=177, freq=3, tfirst=218, tfreq=3)...
	   Assign 1 to reload r218 (freq=3)
	 Assigning to 219 (cl=GENERAL_REGS, orig=186, freq=3, tfirst=219, tfreq=3)...
	   Assign 1 to reload r219 (freq=3)
	 Assigning to 220 (cl=GENERAL_REGS, orig=195, freq=3, tfirst=220, tfreq=3)...
	   Assign 1 to reload r220 (freq=3)
	 Assigning to 221 (cl=GENERAL_REGS, orig=204, freq=3, tfirst=221, tfreq=3)...
	   Assign 1 to reload r221 (freq=3)
	 Assigning to 222 (cl=GENERAL_REGS, orig=209, freq=3, tfirst=222, tfreq=3)...
	   Assign 1 to reload r222 (freq=3)
	 Assigning to 212 (cl=INDEX_REGS, orig=212, freq=1, tfirst=212, tfreq=1)...
	   Assign 0 to reload r212 (freq=1)
	 Assigning to 213 (cl=INDEX_REGS, orig=213, freq=1, tfirst=213, tfreq=1)...
	   Assign 2 to reload r213 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 275
changing reg in insn 107
changing reg in insn 54
changing reg in insn 280
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 69
changing reg in insn 72
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 99
changing reg in insn 120
changing reg in insn 121
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 143
changing reg in insn 144
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 159
changing reg in insn 160
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 187
changing reg in insn 188
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 215
changing reg in insn 216
changing reg in insn 220
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 243
changing reg in insn 244
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 259
changing reg in insn 260
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 280
changing reg in insn 284
changing reg in insn 14
changing reg in insn 15
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 64
changing reg in insn 62
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 71
changing reg in insn 74
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 102
changing reg in insn 103
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 158
changing reg in insn 159
changing reg in insn 162
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 165
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 173
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 193
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 201
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 214
changing reg in insn 215
changing reg in insn 218
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 221
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 229
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 258
changing reg in insn 259
changing reg in insn 262
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 265
changing reg in insn 8
changing reg in insn 285
deleting insn with uid = 302.
deleting insn with uid = 304.
deleting insn with uid = 63.
deleting insn with uid = 72.
deleting insn with uid = 73.
deleting insn with uid = 85.
deleting insn with uid = 306.
deleting insn with uid = 308.
deleting insn with uid = 310.
deleting insn with uid = 312.
deleting insn with uid = 314.
deleting insn with uid = 316.
deleting insn with uid = 318.
starting the processing of deferred insns
ending the processing of deferred insns


obtain_file_information

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={140d,128u} r1={70d,48u,11e} r2={35d,12u} r4={37d,15u} r5={44d,22u} r6={1d,73u} r7={1d,38u} r8={22d} r9={22d} r10={22d} r11={22d} r12={22d} r13={22d} r14={22d} r15={22d} r17={82d,8u} r18={22d} r19={22d} r20={1d,1u,12e} r21={23d} r22={23d} r23={23d} r24={23d} r25={23d} r26={23d} r27={23d} r28={23d} r29={22d} r30={22d} r31={22d} r32={22d} r33={22d} r34={22d} r35={22d} r36={22d} r37={23d,1u} r38={23d} r39={22d} r40={22d} r45={22d} r46={22d} r47={22d} r48={22d} r49={22d} r50={22d} r51={22d} r52={22d} r53={22d} r54={22d} r55={22d} r56={22d} r57={22d} r58={22d} r59={22d} r60={22d} r61={22d} r62={22d} r63={22d} r64={22d} r65={22d} r66={22d} r67={22d} r68={22d} r69={22d} r70={22d} r71={22d} r72={22d} r73={22d} r74={22d} r75={22d} r76={22d} r77={22d} r78={22d} r79={22d} r80={22d} 
;;    total ref usage 2242{1873d,346u,23e} in 262{240 regular + 22 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
        (reg:DI 5 di [ memory ])) t3.c:275 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 bitvector+0 S8 A64])
        (reg:DI 4 si [ bitvector ])) t3.c:275 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [0 bitvector_len+0 S4 A32])
        (reg:SI 1 dx [ bitvector_len ])) t3.c:275 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 name+0 S8 A64])
        (reg:DI 2 cx [ name ])) t3.c:275 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])
        (reg:SI 37 r8 [ blockNumber ])) t3.c:275 90 {*movsi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5032+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [212])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) t3.c:275 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])
            (const_int 1 [0x1]))) t3.c:276 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) t3.c:276 612 {*jcc_1}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 140
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 name+0 S8 A64])) t3.c:276 89 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:QI 0 ax [orig:88 D.5021 ] [88])
        (mem:QI (reg/f:DI 0 ax [140]) [0 MEM[(const char *)name_6(D)]+0 S1 A8])) t3.c:276 93 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.5021 ] [88])
            (const_int 0 [0]))) t3.c:276 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) t3.c:276 612 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 141
(code_label 18 17 19 4 66 "" [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [0 bitvector_len+0 S4 A32])) t3.c:277 90 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:SI 0 ax [orig:89 D.5020 ] [89])
                (ashift:SI (reg:SI 0 ax [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:277 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -132 [0xffffffffffffff7c])) [0 bitvector_len+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 22 21 23 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.5020 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32]))) t3.c:277 7 {*cmpsi_1}
     (nil))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) t3.c:277 612 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 142 143 144 145 146
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg:SI 0 ax [142])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:278 90 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:DI 0 ax [orig:90 D.5022 ] [90])
        (sign_extend:DI (reg:SI 0 ax [142]))) t3.c:278 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 5 (set (reg:DI 0 ax [143])
        (reg:DI 0 ax [orig:90 D.5022 ] [90])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (reg:DI 0 ax [144])
                (ashift:DI (reg:DI 0 ax [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 512 {*ashldi3_1}
     (nil))
(insn 29 28 301 5 (set (reg:DI 0 ax [143])
        (reg:DI 0 ax [144])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 301 29 30 5 (set (reg:DI 1 dx [145])
        (reg:DI 0 ax [143])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 30 301 31 5 (parallel [
            (set (reg:DI 1 dx [145])
                (ashift:DI (reg:DI 1 dx [145])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 512 {*ashldi3_1}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 1 dx [orig:91 D.5022 ] [91])
                (plus:DI (reg:DI 1 dx [145])
                    (reg:DI 0 ax [143])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 218 {*adddi_1}
     (nil))
(insn 32 31 33 5 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.5023 ] [92])
                (plus:DI (reg/f:DI 0 ax [146])
                    (reg:DI 1 dx [orig:91 D.5022 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.5022 ] [91]))
        (nil)))
(insn 34 33 35 5 (set (reg:SI 0 ax [orig:93 D.5024 ] [93])
        (mem/j:SI (reg/f:DI 0 ax [orig:92 D.5023 ] [92]) [0 _13->type+0 S4 A64])) t3.c:278 90 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.5024 ] [93])
            (const_int 0 [0]))) t3.c:278 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) t3.c:278 612 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 97 147 148 149 150 151
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:278 90 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 0 ax [orig:94 D.5022 ] [94])
        (sign_extend:DI (reg:SI 0 ax [147]))) t3.c:278 142 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 6 (set (reg:DI 0 ax [148])
        (reg:DI 0 ax [orig:94 D.5022 ] [94])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 0 ax [149])
                (ashift:DI (reg:DI 0 ax [148])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 512 {*ashldi3_1}
     (nil))
(insn 42 41 303 6 (set (reg:DI 0 ax [148])
        (reg:DI 0 ax [149])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 303 42 43 6 (set (reg:DI 1 dx [150])
        (reg:DI 0 ax [148])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 43 303 44 6 (parallel [
            (set (reg:DI 1 dx [150])
                (ashift:DI (reg:DI 1 dx [150])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 512 {*ashldi3_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 1 dx [orig:95 D.5022 ] [95])
                (plus:DI (reg:DI 1 dx [150])
                    (reg:DI 0 ax [148])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 218 {*adddi_1}
     (nil))
(insn 45 44 46 6 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:278 89 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.5023 ] [96])
                (plus:DI (reg/f:DI 0 ax [151])
                    (reg:DI 1 dx [orig:95 D.5022 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.5022 ] [95]))
        (nil)))
(insn 47 46 48 6 (set (reg:SI 0 ax [orig:97 D.5024 ] [97])
        (mem/j:SI (reg/f:DI 0 ax [orig:96 D.5023 ] [96]) [0 _17->type+0 S4 A64])) t3.c:278 90 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.5024 ] [97])
            (const_int 1 [0x1]))) t3.c:278 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 50 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) t3.c:278 612 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(code_label 50 49 51 7 67 "" [2 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fd505010900 *.LC14>)) t3.c:280 89 {*movdi_internal}
     (nil))
(call_insn 53 52 54 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:280 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 294 7 (set (reg:SI 0 ax [orig:87 D.5020 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:281 90 {*movsi_internal}
     (nil))
(jump_insn 294 54 295 7 (set (pc)
        (label_ref 278)) t3.c:281 654 {jump}
     (nil)
 -> 278)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 295 294 57)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99 100 101 102 103 104 105 106 107 108 109 152 153 154 155 156 157 158 159 160 161 162
(code_label 57 295 58 8 68 "" [2 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 mask+0 S4 A64])
        (const_int 0 [0])) t3.c:284 90 {*movsi_internal}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 1 dx [152])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:285 218 {*adddi_1}
     (nil))
(insn 61 60 62 8 (set (reg:SI 2 cx [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:285 90 {*movsi_internal}
     (nil))
(insn 62 61 64 8 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -132 [0xffffffffffffff7c])) [0 bitvector_len+0 S4 A32])) t3.c:285 90 {*movsi_internal}
     (nil))
(insn 64 62 65 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [153])) t3.c:285 90 {*movsi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:SI 5 di)
        (reg:SI 0 ax [154])) t3.c:285 90 {*movsi_internal}
     (nil))
(call_insn 66 65 67 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("convert_block_number_to_index") [flags 0x3]  <function_decl 0x7fd504f2d510 convert_block_number_to_index>) [0 convert_block_number_to_index S1 A8])
            (const_int 0 [0]))) t3.c:285 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 67 66 68 8 (set (reg:SI 0 ax [155])
        (reg:SI 0 ax)) t3.c:285 90 {*movsi_internal}
     (nil))
(insn 68 67 69 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 bitvector_index+0 S4 A32])
        (reg:SI 0 ax [155])) t3.c:285 90 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (set (reg:SI 2 cx [orig:98 D.5020 ] [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 mask+0 S4 A64])) t3.c:286 90 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 bitvector_index+0 S4 A32])) t3.c:286 90 {*movsi_internal}
     (nil))
(insn 71 70 74 8 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:286 90 {*movsi_internal}
     (nil))
(insn 74 71 75 8 (set (reg:SI 4 si)
        (reg:SI 0 ax [157])) t3.c:286 90 {*movsi_internal}
     (nil))
(insn 75 74 76 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fd505010990 *.LC15>)) t3.c:286 89 {*movdi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:286 93 {*movqi_internal}
     (nil))
(call_insn 77 76 78 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:286 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 78 77 79 8 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 bitvector_index+0 S4 A32])) t3.c:287 90 {*movsi_internal}
     (nil))
(insn 79 78 80 8 (set (reg:DI 1 dx [orig:99 D.5025 ] [99])
        (sign_extend:DI (reg:SI 0 ax [158]))) t3.c:287 142 {*extendsidi2_rex64}
     (nil))
(insn 80 79 81 8 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 bitvector+0 S8 A64])) t3.c:287 89 {*movdi_internal}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.5026 ] [100])
                (plus:DI (reg/f:DI 0 ax [159])
                    (reg:DI 1 dx [orig:99 D.5025 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:287 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.5025 ] [99]))
        (nil)))
(insn 82 81 83 8 (set (reg:QI 0 ax [orig:101 D.5027 ] [101])
        (mem:QI (reg/f:DI 0 ax [orig:100 D.5026 ] [100]) [0 *_26+0 S1 A8])) t3.c:287 93 {*movqi_internal}
     (nil))
(insn 83 82 84 8 (set (reg:SI 1 dx [orig:102 D.5020 ] [102])
        (zero_extend:SI (reg:QI 0 ax [orig:101 D.5027 ] [101]))) t3.c:287 138 {*zero_extendqisi2}
     (nil))
(insn 84 83 86 8 (set (reg:SI 0 ax [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 bitvector_index+0 S4 A32])) t3.c:287 90 {*movsi_internal}
     (nil))
(insn 86 84 87 8 (set (reg:SI 4 si)
        (reg:SI 0 ax [160])) t3.c:287 90 {*movsi_internal}
     (nil))
(insn 87 86 88 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fd505010a20 *.LC16>)) t3.c:287 89 {*movdi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:287 93 {*movqi_internal}
     (nil))
(call_insn 89 88 90 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:287 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 90 89 91 8 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 bitvector_index+0 S4 A32])) t3.c:288 90 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 1 dx [orig:103 D.5025 ] [103])
        (sign_extend:DI (reg:SI 0 ax [161]))) t3.c:288 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 8 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 bitvector+0 S8 A64])) t3.c:288 89 {*movdi_internal}
     (nil))
(insn 93 92 94 8 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.5026 ] [104])
                (plus:DI (reg/f:DI 0 ax [162])
                    (reg:DI 1 dx [orig:103 D.5025 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:288 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 bitvector+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.5025 ] [103]))
        (nil)))
(insn 94 93 95 8 (set (reg:QI 0 ax [orig:105 D.5027 ] [105])
        (mem:QI (reg/f:DI 0 ax [orig:104 D.5026 ] [104]) [0 *_31+0 S1 A8])) t3.c:288 93 {*movqi_internal}
     (nil))
(insn 95 94 96 8 (set (reg:SI 1 dx [orig:106 D.5020 ] [106])
        (zero_extend:SI (reg:QI 0 ax [orig:105 D.5027 ] [105]))) t3.c:288 138 {*zero_extendqisi2}
     (nil))
(insn 96 95 97 8 (set (reg:SI 0 ax [orig:107 D.5020 ] [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 mask+0 S4 A64])) t3.c:288 90 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (parallel [
            (set (reg:SI 1 dx [orig:108 D.5020 ] [108])
                (and:SI (reg:SI 1 dx [orig:106 D.5020 ] [106])
                    (reg:SI 0 ax [orig:107 D.5020 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:288 381 {*andsi_1}
     (nil))
(insn 98 97 99 8 (set (reg:SI 0 ax [orig:109 D.5020 ] [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 mask+0 S4 A64])) t3.c:288 90 {*movsi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:108 D.5020 ] [108])
            (reg:SI 0 ax [orig:109 D.5020 ] [109]))) t3.c:288 7 {*cmpsi_1}
     (nil))
(jump_insn 100 99 101 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) t3.c:288 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 163
(note 101 100 102 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 9 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:289 90 {*movsi_internal}
     (nil))
(insn 103 102 104 9 (set (reg:SI 4 si)
        (reg:SI 0 ax [163])) t3.c:289 90 {*movsi_internal}
     (nil))
(insn 104 103 105 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fd505010ab0 *.LC17>)) t3.c:289 89 {*movdi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:289 93 {*movqi_internal}
     (nil))
(call_insn 106 105 107 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:289 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 107 106 296 9 (set (reg:SI 0 ax [orig:87 D.5020 ] [87])
        (const_int -1 [0xffffffffffffffff])) t3.c:290 90 {*movsi_internal}
     (nil))
(jump_insn 296 107 297 9 (set (pc)
        (label_ref 278)) t3.c:290 654 {jump}
     (nil)
 -> 278)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 297 296 110)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111 112 113 164 165 166 167 168
(code_label 110 297 111 10 70 "" [1 uses])
(note 111 110 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fd505010b40 *.LC18>)) t3.c:293 89 {*movdi_internal}
     (nil))
(call_insn 113 112 114 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:293 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 114 113 115 10 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fd505010bd0 *.LC19>)) t3.c:294 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:294 89 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fd505010c60 *.LC20>)) t3.c:294 89 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:294 93 {*movqi_internal}
     (nil))
(call_insn 118 117 119 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:294 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 119 118 120 10 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:295 90 {*movsi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 0 ax [orig:110 D.5022 ] [110])
        (sign_extend:DI (reg:SI 0 ax [164]))) t3.c:295 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 10 (set (reg:DI 0 ax [165])
        (reg:DI 0 ax [orig:110 D.5022 ] [110])) t3.c:295 89 {*movdi_internal}
     (nil))
(insn 122 121 123 10 (parallel [
            (set (reg:DI 0 ax [166])
                (ashift:DI (reg:DI 0 ax [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:295 512 {*ashldi3_1}
     (nil))
(insn 123 122 305 10 (set (reg:DI 0 ax [165])
        (reg:DI 0 ax [166])) t3.c:295 89 {*movdi_internal}
     (nil))
(insn 305 123 124 10 (set (reg:DI 1 dx [167])
        (reg:DI 0 ax [165])) t3.c:295 89 {*movdi_internal}
     (nil))
(insn 124 305 125 10 (parallel [
            (set (reg:DI 1 dx [167])
                (ashift:DI (reg:DI 1 dx [167])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:295 512 {*ashldi3_1}
     (nil))
(insn 125 124 126 10 (parallel [
            (set (reg:DI 1 dx [orig:111 D.5022 ] [111])
                (plus:DI (reg:DI 1 dx [167])
                    (reg:DI 0 ax [165])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:295 218 {*adddi_1}
     (nil))
(insn 126 125 127 10 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:295 89 {*movdi_internal}
     (nil))
(insn 127 126 128 10 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.5023 ] [112])
                (plus:DI (reg/f:DI 0 ax [168])
                    (reg:DI 1 dx [orig:111 D.5022 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:295 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.5022 ] [111]))
        (nil)))
(insn 128 127 129 10 (set (reg:SI 0 ax [orig:113 D.5024 ] [113])
        (mem/j:SI (reg/f:DI 0 ax [orig:112 D.5023 ] [112]) [0 _43->type+0 S4 A64])) t3.c:295 90 {*movsi_internal}
     (nil))
(insn 129 128 130 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.5024 ] [113])
            (const_int 0 [0]))) t3.c:295 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 130 129 131 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 136)
            (pc))) t3.c:295 612 {*jcc_1}
     (nil)
 -> 136)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 131 130 132 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 133 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fd505010cf0 *.LC21>)) t3.c:296 89 {*movdi_internal}
     (nil))
(call_insn 133 132 298 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:296 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 298 133 299 11 (set (pc)
        (label_ref 140)) 654 {jump}
     (nil)
 -> 140)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 299 298 136)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 136 299 137 12 71 "" [1 uses])
(note 137 136 138 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 138 137 139 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fd505010d80 *.LC22>)) t3.c:298 89 {*movdi_internal}
     (nil))
(call_insn 139 138 140 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd505136360 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) t3.c:298 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210
(code_label 140 139 141 13 72 "" [1 uses])
(note 141 140 142 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 13 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:299 90 {*movsi_internal}
     (nil))
(insn 143 142 144 13 (set (reg:DI 0 ax [orig:114 D.5022 ] [114])
        (sign_extend:DI (reg:SI 0 ax [169]))) t3.c:299 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 13 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [orig:114 D.5022 ] [114])) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 145 144 146 13 (parallel [
            (set (reg:DI 0 ax [171])
                (ashift:DI (reg:DI 0 ax [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:299 512 {*ashldi3_1}
     (nil))
(insn 146 145 307 13 (set (reg:DI 0 ax [170])
        (reg:DI 0 ax [171])) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 307 146 147 13 (set (reg:DI 1 dx [172])
        (reg:DI 0 ax [170])) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 147 307 148 13 (parallel [
            (set (reg:DI 1 dx [172])
                (ashift:DI (reg:DI 1 dx [172])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:299 512 {*ashldi3_1}
     (nil))
(insn 148 147 149 13 (parallel [
            (set (reg:DI 1 dx [orig:115 D.5022 ] [115])
                (plus:DI (reg:DI 1 dx [172])
                    (reg:DI 0 ax [170])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:299 218 {*adddi_1}
     (nil))
(insn 149 148 150 13 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 150 149 151 13 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.5023 ] [116])
                (plus:DI (reg/f:DI 0 ax [173])
                    (reg:DI 1 dx [orig:115 D.5022 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:299 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.5022 ] [115]))
        (nil)))
(insn 151 150 152 13 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.5028 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:116 D.5023 ] [116])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:299 218 {*adddi_1}
     (nil))
(insn 152 151 153 13 (set (reg:DI 2 cx)
        (reg/f:DI 0 ax [orig:117 D.5028 ] [117])) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 153 152 154 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fd505010e10 *.LC23>)) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 154 153 155 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 155 154 156 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fd505010ea0 *.LC24>)) t3.c:299 89 {*movdi_internal}
     (nil))
(insn 156 155 157 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:299 93 {*movqi_internal}
     (nil))
(call_insn 157 156 158 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:299 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 158 157 159 13 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:300 90 {*movsi_internal}
     (nil))
(insn 159 158 160 13 (set (reg:DI 0 ax [orig:118 D.5022 ] [118])
        (sign_extend:DI (reg:SI 0 ax [174]))) t3.c:300 142 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 13 (set (reg:DI 0 ax [175])
        (reg:DI 0 ax [orig:118 D.5022 ] [118])) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 161 160 162 13 (parallel [
            (set (reg:DI 0 ax [176])
                (ashift:DI (reg:DI 0 ax [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:300 512 {*ashldi3_1}
     (nil))
(insn 162 161 309 13 (set (reg:DI 0 ax [175])
        (reg:DI 0 ax [176])) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 309 162 163 13 (set (reg:DI 1 dx [177])
        (reg:DI 0 ax [175])) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 163 309 164 13 (parallel [
            (set (reg:DI 1 dx [177])
                (ashift:DI (reg:DI 1 dx [177])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:300 512 {*ashldi3_1}
     (nil))
(insn 164 163 165 13 (parallel [
            (set (reg:DI 1 dx [orig:119 D.5022 ] [119])
                (plus:DI (reg:DI 1 dx [177])
                    (reg:DI 0 ax [175])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:300 218 {*adddi_1}
     (nil))
(insn 165 164 166 13 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 166 165 167 13 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.5023 ] [120])
                (plus:DI (reg/f:DI 0 ax [178])
                    (reg:DI 1 dx [orig:119 D.5022 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:300 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.5022 ] [119]))
        (nil)))
(insn 167 166 168 13 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.5029 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.5023 ] [120])
                    (const_int 136 [0x88])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:300 218 {*adddi_1}
     (nil))
(insn 168 167 169 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:121 D.5029 ] [121])) t3.c:300 89 {*movdi_internal}
     (nil))
(call_insn 169 168 170 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("localtime") [flags 0x41]  <function_decl 0x7fd50523c510 localtime>) [0 localtime S1 A8])
            (const_int 0 [0]))) t3.c:300 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 170 169 171 13 (set (reg:DI 0 ax [179])
        (reg:DI 0 ax)) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 171 170 172 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 create+0 S8 A64])
        (reg:DI 0 ax [179])) t3.c:300 89 {*movdi_internal}
     (nil))
(insn 172 171 173 13 (set (reg:DI 1 dx [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 create+0 S8 A64])) t3.c:302 89 {*movdi_internal}
     (nil))
(insn 173 172 174 13 (parallel [
            (set (reg:DI 0 ax [181])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:302 218 {*adddi_1}
     (nil))
(insn 174 173 175 13 (set (reg:DI 2 cx)
        (reg:DI 1 dx [180])) t3.c:302 89 {*movdi_internal}
     (nil))
(insn 175 174 176 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fd505010f30 *.LC25>)) t3.c:302 89 {*movdi_internal}
     (nil))
(insn 176 175 177 13 (set (reg:DI 4 si)
        (const_int 64 [0x40])) t3.c:302 89 {*movdi_internal}
     (nil))
(insn 177 176 178 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) t3.c:302 89 {*movdi_internal}
     (nil))
(call_insn 178 177 179 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strftime") [flags 0x41]  <function_decl 0x7fd5051576c0 strftime>) [0 __builtin_strftime S1 A8])
            (const_int 0 [0]))) t3.c:302 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 179 178 180 13 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:303 218 {*adddi_1}
     (nil))
(insn 180 179 181 13 (set (reg:DI 2 cx)
        (reg:DI 0 ax [182])) t3.c:303 89 {*movdi_internal}
     (nil))
(insn 181 180 182 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7fd505019000 *.LC26>)) t3.c:303 89 {*movdi_internal}
     (nil))
(insn 182 181 183 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:303 89 {*movdi_internal}
     (nil))
(insn 183 182 184 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fd505019090 *.LC27>)) t3.c:303 89 {*movdi_internal}
     (nil))
(insn 184 183 185 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:303 93 {*movqi_internal}
     (nil))
(call_insn 185 184 186 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:303 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 186 185 187 13 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:304 90 {*movsi_internal}
     (nil))
(insn 187 186 188 13 (set (reg:DI 0 ax [orig:122 D.5022 ] [122])
        (sign_extend:DI (reg:SI 0 ax [183]))) t3.c:304 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 13 (set (reg:DI 0 ax [184])
        (reg:DI 0 ax [orig:122 D.5022 ] [122])) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 189 188 190 13 (parallel [
            (set (reg:DI 0 ax [185])
                (ashift:DI (reg:DI 0 ax [184])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:304 512 {*ashldi3_1}
     (nil))
(insn 190 189 311 13 (set (reg:DI 0 ax [184])
        (reg:DI 0 ax [185])) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 311 190 191 13 (set (reg:DI 1 dx [186])
        (reg:DI 0 ax [184])) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 191 311 192 13 (parallel [
            (set (reg:DI 1 dx [186])
                (ashift:DI (reg:DI 1 dx [186])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:304 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 13 (parallel [
            (set (reg:DI 1 dx [orig:123 D.5022 ] [123])
                (plus:DI (reg:DI 1 dx [186])
                    (reg:DI 0 ax [184])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:304 218 {*adddi_1}
     (nil))
(insn 193 192 194 13 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 194 193 195 13 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.5023 ] [124])
                (plus:DI (reg/f:DI 0 ax [187])
                    (reg:DI 1 dx [orig:123 D.5022 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:304 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.5022 ] [123]))
        (nil)))
(insn 195 194 196 13 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.5029 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:124 D.5023 ] [124])
                    (const_int 144 [0x90])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:304 218 {*adddi_1}
     (nil))
(insn 196 195 197 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 D.5029 ] [125])) t3.c:304 89 {*movdi_internal}
     (nil))
(call_insn 197 196 198 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("localtime") [flags 0x41]  <function_decl 0x7fd50523c510 localtime>) [0 localtime S1 A8])
            (const_int 0 [0]))) t3.c:304 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 198 197 199 13 (set (reg:DI 0 ax [188])
        (reg:DI 0 ax)) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 199 198 200 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 access+0 S8 A64])
        (reg:DI 0 ax [188])) t3.c:304 89 {*movdi_internal}
     (nil))
(insn 200 199 201 13 (set (reg:DI 1 dx [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 access+0 S8 A64])) t3.c:305 89 {*movdi_internal}
     (nil))
(insn 201 200 202 13 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:305 218 {*adddi_1}
     (nil))
(insn 202 201 203 13 (set (reg:DI 2 cx)
        (reg:DI 1 dx [189])) t3.c:305 89 {*movdi_internal}
     (nil))
(insn 203 202 204 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fd505010f30 *.LC25>)) t3.c:305 89 {*movdi_internal}
     (nil))
(insn 204 203 205 13 (set (reg:DI 4 si)
        (const_int 64 [0x40])) t3.c:305 89 {*movdi_internal}
     (nil))
(insn 205 204 206 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) t3.c:305 89 {*movdi_internal}
     (nil))
(call_insn 206 205 207 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strftime") [flags 0x41]  <function_decl 0x7fd5051576c0 strftime>) [0 __builtin_strftime S1 A8])
            (const_int 0 [0]))) t3.c:305 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 207 206 208 13 (parallel [
            (set (reg:DI 0 ax [191])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:306 218 {*adddi_1}
     (nil))
(insn 208 207 209 13 (set (reg:DI 2 cx)
        (reg:DI 0 ax [191])) t3.c:306 89 {*movdi_internal}
     (nil))
(insn 209 208 210 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7fd505019120 *.LC28>)) t3.c:306 89 {*movdi_internal}
     (nil))
(insn 210 209 211 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:306 89 {*movdi_internal}
     (nil))
(insn 211 210 212 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fd505019090 *.LC27>)) t3.c:306 89 {*movdi_internal}
     (nil))
(insn 212 211 213 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:306 93 {*movqi_internal}
     (nil))
(call_insn 213 212 214 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:306 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 214 213 215 13 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:307 90 {*movsi_internal}
     (nil))
(insn 215 214 216 13 (set (reg:DI 0 ax [orig:126 D.5022 ] [126])
        (sign_extend:DI (reg:SI 0 ax [192]))) t3.c:307 142 {*extendsidi2_rex64}
     (nil))
(insn 216 215 217 13 (set (reg:DI 0 ax [193])
        (reg:DI 0 ax [orig:126 D.5022 ] [126])) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 217 216 218 13 (parallel [
            (set (reg:DI 0 ax [194])
                (ashift:DI (reg:DI 0 ax [193])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:307 512 {*ashldi3_1}
     (nil))
(insn 218 217 313 13 (set (reg:DI 0 ax [193])
        (reg:DI 0 ax [194])) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 313 218 219 13 (set (reg:DI 1 dx [195])
        (reg:DI 0 ax [193])) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 219 313 220 13 (parallel [
            (set (reg:DI 1 dx [195])
                (ashift:DI (reg:DI 1 dx [195])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:307 512 {*ashldi3_1}
     (nil))
(insn 220 219 221 13 (parallel [
            (set (reg:DI 1 dx [orig:127 D.5022 ] [127])
                (plus:DI (reg:DI 1 dx [195])
                    (reg:DI 0 ax [193])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:307 218 {*adddi_1}
     (nil))
(insn 221 220 222 13 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 222 221 223 13 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.5023 ] [128])
                (plus:DI (reg/f:DI 0 ax [196])
                    (reg:DI 1 dx [orig:127 D.5022 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.5022 ] [127]))
        (nil)))
(insn 223 222 224 13 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.5029 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:128 D.5023 ] [128])
                    (const_int 152 [0x98])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:307 218 {*adddi_1}
     (nil))
(insn 224 223 225 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:129 D.5029 ] [129])) t3.c:307 89 {*movdi_internal}
     (nil))
(call_insn 225 224 226 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("localtime") [flags 0x41]  <function_decl 0x7fd50523c510 localtime>) [0 localtime S1 A8])
            (const_int 0 [0]))) t3.c:307 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 226 225 227 13 (set (reg:DI 0 ax [197])
        (reg:DI 0 ax)) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 227 226 228 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mod+0 S8 A64])
        (reg:DI 0 ax [197])) t3.c:307 89 {*movdi_internal}
     (nil))
(insn 228 227 229 13 (set (reg:DI 1 dx [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mod+0 S8 A64])) t3.c:308 89 {*movdi_internal}
     (nil))
(insn 229 228 230 13 (parallel [
            (set (reg:DI 0 ax [199])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:308 218 {*adddi_1}
     (nil))
(insn 230 229 231 13 (set (reg:DI 2 cx)
        (reg:DI 1 dx [198])) t3.c:308 89 {*movdi_internal}
     (nil))
(insn 231 230 232 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fd505010f30 *.LC25>)) t3.c:308 89 {*movdi_internal}
     (nil))
(insn 232 231 233 13 (set (reg:DI 4 si)
        (const_int 64 [0x40])) t3.c:308 89 {*movdi_internal}
     (nil))
(insn 233 232 234 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) t3.c:308 89 {*movdi_internal}
     (nil))
(call_insn 234 233 235 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strftime") [flags 0x41]  <function_decl 0x7fd5051576c0 strftime>) [0 __builtin_strftime S1 A8])
            (const_int 0 [0]))) t3.c:308 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 235 234 236 13 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:309 218 {*adddi_1}
     (nil))
(insn 236 235 237 13 (set (reg:DI 2 cx)
        (reg:DI 0 ax [200])) t3.c:309 89 {*movdi_internal}
     (nil))
(insn 237 236 238 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7fd5050191b0 *.LC29>)) t3.c:309 89 {*movdi_internal}
     (nil))
(insn 238 237 239 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:309 89 {*movdi_internal}
     (nil))
(insn 239 238 240 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fd505019090 *.LC27>)) t3.c:309 89 {*movdi_internal}
     (nil))
(insn 240 239 241 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:309 93 {*movqi_internal}
     (nil))
(call_insn 241 240 242 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:309 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 242 241 243 13 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:310 90 {*movsi_internal}
     (nil))
(insn 243 242 244 13 (set (reg:DI 0 ax [orig:130 D.5022 ] [130])
        (sign_extend:DI (reg:SI 0 ax [201]))) t3.c:310 142 {*extendsidi2_rex64}
     (nil))
(insn 244 243 245 13 (set (reg:DI 0 ax [202])
        (reg:DI 0 ax [orig:130 D.5022 ] [130])) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 245 244 246 13 (parallel [
            (set (reg:DI 0 ax [203])
                (ashift:DI (reg:DI 0 ax [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:310 512 {*ashldi3_1}
     (nil))
(insn 246 245 315 13 (set (reg:DI 0 ax [202])
        (reg:DI 0 ax [203])) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 315 246 247 13 (set (reg:DI 1 dx [204])
        (reg:DI 0 ax [202])) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 247 315 248 13 (parallel [
            (set (reg:DI 1 dx [204])
                (ashift:DI (reg:DI 1 dx [204])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:310 512 {*ashldi3_1}
     (nil))
(insn 248 247 249 13 (parallel [
            (set (reg:DI 1 dx [orig:131 D.5022 ] [131])
                (plus:DI (reg:DI 1 dx [204])
                    (reg:DI 0 ax [202])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:310 218 {*adddi_1}
     (nil))
(insn 249 248 250 13 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 250 249 251 13 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.5023 ] [132])
                (plus:DI (reg/f:DI 0 ax [205])
                    (reg:DI 1 dx [orig:131 D.5022 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:310 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.5022 ] [131]))
        (nil)))
(insn 251 250 252 13 (set (reg:SI 0 ax [orig:133 D.5030 ] [133])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:132 D.5023 ] [132])
                (const_int 160 [0xa0])) [0 _78->content.fd.access+0 S4 A64])) t3.c:310 90 {*movsi_internal}
     (nil))
(insn 252 251 253 13 (set (reg:SI 2 cx)
        (reg:SI 0 ax [orig:133 D.5030 ] [133])) t3.c:310 90 {*movsi_internal}
     (nil))
(insn 253 252 254 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7fd505019240 *.LC30>)) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 254 253 255 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 255 254 256 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7fd5050192d0 *.LC31>)) t3.c:310 89 {*movdi_internal}
     (nil))
(insn 256 255 257 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:310 93 {*movqi_internal}
     (nil))
(call_insn 257 256 258 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:310 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 258 257 259 13 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 blockNumber+0 S4 A32])) t3.c:311 90 {*movsi_internal}
     (nil))
(insn 259 258 260 13 (set (reg:DI 0 ax [orig:134 D.5022 ] [134])
        (sign_extend:DI (reg:SI 0 ax [206]))) t3.c:311 142 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 13 (set (reg:DI 0 ax [207])
        (reg:DI 0 ax [orig:134 D.5022 ] [134])) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 261 260 262 13 (parallel [
            (set (reg:DI 0 ax [208])
                (ashift:DI (reg:DI 0 ax [207])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:311 512 {*ashldi3_1}
     (nil))
(insn 262 261 317 13 (set (reg:DI 0 ax [207])
        (reg:DI 0 ax [208])) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 317 262 263 13 (set (reg:DI 1 dx [209])
        (reg:DI 0 ax [207])) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 263 317 264 13 (parallel [
            (set (reg:DI 1 dx [209])
                (ashift:DI (reg:DI 1 dx [209])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:311 512 {*ashldi3_1}
     (nil))
(insn 264 263 265 13 (parallel [
            (set (reg:DI 1 dx [orig:135 D.5022 ] [135])
                (plus:DI (reg:DI 1 dx [209])
                    (reg:DI 0 ax [207])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:311 218 {*adddi_1}
     (nil))
(insn 265 264 266 13 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 266 265 267 13 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.5023 ] [136])
                (plus:DI (reg/f:DI 0 ax [210])
                    (reg:DI 1 dx [orig:135 D.5022 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:311 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 memory+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.5022 ] [135]))
        (nil)))
(insn 267 266 268 13 (set (reg:HI 0 ax [orig:137 D.5031 ] [137])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:136 D.5023 ] [136])
                (const_int 164 [0xa4])) [0 _83->content.fd.owner+0 S2 A32])) t3.c:311 92 {*movhi_internal}
     (nil))
(insn 268 267 269 13 (set (reg:SI 0 ax [orig:138 D.5020 ] [138])
        (zero_extend:SI (reg:HI 0 ax [orig:137 D.5031 ] [137]))) t3.c:311 139 {*zero_extendhisi2}
     (nil))
(insn 269 268 270 13 (set (reg:SI 2 cx)
        (reg:SI 0 ax [orig:138 D.5020 ] [138])) t3.c:311 90 {*movsi_internal}
     (nil))
(insn 270 269 271 13 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7fd505019360 *.LC32>)) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 271 270 272 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 272 271 273 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7fd5050192d0 *.LC31>)) t3.c:311 89 {*movdi_internal}
     (nil))
(insn 273 272 274 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) t3.c:311 93 {*movqi_internal}
     (nil))
(call_insn 274 273 275 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd505133ca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) t3.c:311 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 275 274 278 13 (set (reg:SI 0 ax [orig:87 D.5020 ] [87])
        (const_int 0 [0])) t3.c:313 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              7 [100.0%] 
;;              9 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 139
(code_label 278 275 279 14 73 "" [2 uses])
(note 279 278 280 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 284 14 (set (reg:SI 0 ax [orig:139 <retval> ] [139])
        (reg:SI 0 ax [orig:87 D.5020 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 284 280 285 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:139 <retval> ] [139])) t3.c:314 90 {*movsi_internal}
     (nil))
(insn 285 284 286 14 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5032+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [213]))
        ]) t3.c:314 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 286 285 292 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 289)
            (pc))) t3.c:314 612 {*jcc_1}
     (nil)
 -> 289)
;;  succ:       16
;;              15 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 292 286 287 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(call_insn 287 292 288 15 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd504fa9288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) t3.c:314 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 288 287 289)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 289 288 293 16 74 "" [1 uses])
(note 293 289 290 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 290 293 300 16 (use (reg/i:SI 0 ax)) t3.c:314 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 300 290 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=12, decl_uid=4543, cgraph_uid=12, symbol_order=12)

      Creating newreg=147
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=148
Removing SCRATCH in insn #163 (nop 3)
rescanning insn with uid = 163.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r147
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 11:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 147:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r148
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 165: point = 0
  BB 4
   Insn 168: point = 0
  BB 2
   Insn 164: point = 0
   Insn 163: point = 0
   Insn 162: point = 1
   Insn 158: point = 2
   Insn 155: point = 4
   Insn 154: point = 5
   Insn 153: point = 5
   Insn 152: point = 6
   Insn 151: point = 7
   Insn 150: point = 7
   Insn 149: point = 8
   Insn 148: point = 9
   Insn 147: point = 10
   Insn 146: point = 10
   Insn 145: point = 11
   Insn 144: point = 12
   Insn 143: point = 13
   Insn 142: point = 14
   Insn 141: point = 15
   Insn 140: point = 15
   Insn 139: point = 16
   Insn 138: point = 17
   Insn 137: point = 18
   Insn 136: point = 18
   Insn 135: point = 19
   Insn 134: point = 20
   Insn 133: point = 21
   Insn 132: point = 22
   Insn 131: point = 23
   Insn 130: point = 23
   Insn 129: point = 24
   Insn 128: point = 25
   Insn 127: point = 26
   Insn 126: point = 26
   Insn 125: point = 27
   Insn 124: point = 28
   Insn 123: point = 29
   Insn 122: point = 30
   Insn 121: point = 31
   Insn 120: point = 32
   Insn 119: point = 33
   Insn 118: point = 33
   Insn 117: point = 34
   Insn 116: point = 35
   Insn 115: point = 36
   Insn 114: point = 36
   Insn 113: point = 36
   Insn 112: point = 37
   Insn 111: point = 38
   Insn 110: point = 39
   Insn 109: point = 40
   Insn 108: point = 41
   Insn 107: point = 41
   Insn 106: point = 42
   Insn 105: point = 43
   Insn 104: point = 44
   Insn 103: point = 44
   Insn 102: point = 44
   Insn 101: point = 45
   Insn 100: point = 46
   Insn 99: point = 47
   Insn 98: point = 48
   Insn 97: point = 49
   Insn 96: point = 49
   Insn 95: point = 50
   Insn 94: point = 51
   Insn 93: point = 52
   Insn 92: point = 52
   Insn 91: point = 52
   Insn 90: point = 53
   Insn 89: point = 54
   Insn 88: point = 55
   Insn 87: point = 56
   Insn 86: point = 57
   Insn 85: point = 57
   Insn 84: point = 58
   Insn 83: point = 59
   Insn 82: point = 60
   Insn 81: point = 60
   Insn 80: point = 60
   Insn 79: point = 61
   Insn 78: point = 62
   Insn 77: point = 63
   Insn 76: point = 64
   Insn 75: point = 65
   Insn 74: point = 65
   Insn 73: point = 66
   Insn 72: point = 67
   Insn 71: point = 68
   Insn 70: point = 68
   Insn 69: point = 68
   Insn 68: point = 69
   Insn 67: point = 70
   Insn 66: point = 71
   Insn 65: point = 72
   Insn 64: point = 73
   Insn 63: point = 73
   Insn 62: point = 74
   Insn 61: point = 75
   Insn 60: point = 76
   Insn 59: point = 76
   Insn 58: point = 76
   Insn 57: point = 77
   Insn 56: point = 78
   Insn 55: point = 79
   Insn 54: point = 80
   Insn 53: point = 81
   Insn 52: point = 81
   Insn 51: point = 82
   Insn 50: point = 83
   Insn 49: point = 84
   Insn 48: point = 84
   Insn 47: point = 84
   Insn 46: point = 85
   Insn 45: point = 86
   Insn 44: point = 87
   Insn 43: point = 88
   Insn 42: point = 89
   Insn 41: point = 89
   Insn 40: point = 90
   Insn 39: point = 91
   Insn 38: point = 92
   Insn 37: point = 92
   Insn 36: point = 92
   Insn 35: point = 93
   Insn 34: point = 94
   Insn 33: point = 95
   Insn 32: point = 96
   Insn 31: point = 97
   Insn 30: point = 97
   Insn 29: point = 98
   Insn 28: point = 99
   Insn 27: point = 100
   Insn 26: point = 100
   Insn 25: point = 100
   Insn 24: point = 101
   Insn 23: point = 102
   Insn 22: point = 103
   Insn 21: point = 103
   Insn 20: point = 104
   Insn 19: point = 105
   Insn 18: point = 106
   Insn 17: point = 107
   Insn 16: point = 108
   Insn 15: point = 109
   Insn 14: point = 110
   Insn 13: point = 112
   Insn 12: point = 113
   Insn 11: point = 113
   Insn 10: point = 114
   Insn 9: point = 116
   Insn 8: point = 117
   Insn 5: point = 117
   Insn 3: point = 119
   Insn 2: point = 119
 r87: [98..102]
 r88: [97..101]
 r89: [90..94]
 r90: [89..93]
 r91: [82..86]
 r92: [81..85]
 r93: [74..78]
 r94: [73..77]
 r95: [66..70]
 r96: [65..69]
 r97: [58..62]
 r98: [57..61]
 r99: [50..54]
 r100: [49..53]
 r101: [42..46]
 r102: [41..45]
 r103: [34..38]
 r104: [33..37]
 r105: [24..30]
 r106: [23..29]
 r107: [16..22]
 r108: [15..21]
 r109: [8..14]
 r110: [7..13]
 r111: [5..6]
 r112: [3..4]
 r113: [1..2]
 r115: [115..116]
 r116: [111..114]
 r117: [112..113]
 r118: [109..110]
 r119: [105..108]
 r120: [104..107]
 r121: [103..106]
 r122: [99..100]
 r123: [95..96]
 r124: [91..92]
 r125: [87..88]
 r126: [83..84]
 r127: [79..80]
 r128: [75..76]
 r129: [71..72]
 r130: [67..68]
 r131: [63..64]
 r132: [59..60]
 r133: [55..56]
 r134: [51..52]
 r135: [47..48]
 r136: [43..44]
 r137: [39..40]
 r138: [35..36]
 r139: [31..32]
 r140: [26..28]
 r141: [25..27]
 r142: [18..20]
 r143: [17..19]
 r144: [10..12]
 r145: [9..11]
 r147: [117..118]
 r148: [0..0]
Compressing live ranges: from 119 to 59 - 49%
Ranges after the compression:
 r87: [47..48]
 r88: [47..48]
 r89: [43..44]
 r90: [43..44]
 r91: [39..40]
 r92: [39..40]
 r93: [35..36]
 r94: [35..36]
 r95: [31..32]
 r96: [31..32]
 r97: [27..28]
 r98: [27..28]
 r99: [23..24]
 r100: [23..24]
 r101: [19..20]
 r102: [19..20]
 r103: [15..16]
 r104: [15..16]
 r105: [11..12]
 r106: [11..12]
 r107: [9..10]
 r108: [9..10]
 r109: [7..8]
 r110: [7..8]
 r111: [5..6]
 r112: [3..4]
 r113: [1..2]
 r115: [55..56]
 r116: [53..54]
 r117: [53..54]
 r118: [51..52]
 r119: [49..50]
 r120: [49..50]
 r121: [49..50]
 r122: [47..48]
 r123: [45..46]
 r124: [43..44]
 r125: [41..42]
 r126: [39..40]
 r127: [37..38]
 r128: [35..36]
 r129: [33..34]
 r130: [31..32]
 r131: [29..30]
 r132: [27..28]
 r133: [25..26]
 r134: [23..24]
 r135: [21..22]
 r136: [19..20]
 r137: [17..18]
 r138: [15..16]
 r139: [13..14]
 r140: [11..12]
 r141: [11..12]
 r142: [9..10]
 r143: [9..10]
 r144: [7..8]
 r145: [7..8]
 r147: [57..58]
 r148: [0..0]

********** Assignment #1: **********

	 Assigning to 147 (cl=INDEX_REGS, orig=147, freq=1, tfirst=147, tfreq=1)...
	   Assign 0 to reload r147 (freq=1)
	 Assigning to 148 (cl=INDEX_REGS, orig=148, freq=1, tfirst=148, tfreq=1)...
	   Assign 5 to reload r148 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 29
changing reg in insn 24
changing reg in insn 30
changing reg in insn 34
changing reg in insn 40
changing reg in insn 35
changing reg in insn 41
changing reg in insn 45
changing reg in insn 51
changing reg in insn 46
changing reg in insn 52
changing reg in insn 56
changing reg in insn 62
changing reg in insn 57
changing reg in insn 63
changing reg in insn 67
changing reg in insn 73
changing reg in insn 68
changing reg in insn 74
changing reg in insn 78
changing reg in insn 84
changing reg in insn 79
changing reg in insn 85
changing reg in insn 89
changing reg in insn 95
changing reg in insn 90
changing reg in insn 96
changing reg in insn 100
changing reg in insn 106
changing reg in insn 101
changing reg in insn 107
changing reg in insn 111
changing reg in insn 117
changing reg in insn 112
changing reg in insn 118
changing reg in insn 122
changing reg in insn 129
changing reg in insn 123
changing reg in insn 130
changing reg in insn 132
changing reg in insn 139
changing reg in insn 133
changing reg in insn 140
changing reg in insn 142
changing reg in insn 149
changing reg in insn 143
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 158
changing reg in insn 158
changing reg in insn 162
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 10
changing reg in insn 14
changing reg in insn 13
changing reg in insn 12
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 21
changing reg in insn 25
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 128
changing reg in insn 134
changing reg in insn 136
changing reg in insn 135
changing reg in insn 138
changing reg in insn 144
changing reg in insn 146
changing reg in insn 145
changing reg in insn 148
changing reg in insn 5
changing reg in insn 163
deleting insn with uid = 19.
deleting insn with uid = 28.
deleting insn with uid = 29.
deleting insn with uid = 39.
deleting insn with uid = 40.
deleting insn with uid = 50.
deleting insn with uid = 51.
deleting insn with uid = 61.
deleting insn with uid = 62.
deleting insn with uid = 72.
deleting insn with uid = 73.
deleting insn with uid = 83.
deleting insn with uid = 84.
deleting insn with uid = 94.
deleting insn with uid = 95.
deleting insn with uid = 105.
deleting insn with uid = 106.
deleting insn with uid = 116.
deleting insn with uid = 117.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 148.
deleting insn with uid = 149.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={47d,42u} r1={30d,14u} r2={32d,16u} r4={29d,14u} r5={31d,15u} r6={1d,63u} r7={1d,19u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={22d,2u} r18={15d} r19={15d} r20={1d,1u} r21={16d} r22={16d} r23={16d} r24={16d} r25={16d} r26={16d} r27={16d} r28={16d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={28d,12u} r38={16d} r39={15d} r40={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} 
;;    total ref usage 1404{1206d,198u,0e} in 132{117 regular + 15 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) t3.c:316 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) t3.c:316 89 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5055+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [147])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) t3.c:316 986 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 num_of_blocks+0 S4 A32])
        (const_int 256 [0x100])) t3.c:317 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 num_of_blocks+0 S4 A32])) t3.c:319 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [116])
        (reg:SI 0 ax [115])) t3.c:319 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 1 dx [117])
                (plus:SI (reg:SI 0 ax [116])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:319 217 {*addsi_1}
     (nil))
(insn 12 11 13 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [116])
            (const_int 0 [0]))) t3.c:319 3 {*cmpsi_ccno_1}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [116])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [117])
            (reg:SI 0 ax [116]))) t3.c:319 953 {*movsicc_noc}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [118])
                (ashiftrt:SI (reg:SI 0 ax [116])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:319 545 {*ashrsi3_1}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])
        (reg:SI 0 ax [118])) t3.c:319 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 num_of_blocks+0 S4 A32])) t3.c:322 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 2 cx [120])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:322 218 {*adddi_1}
     (nil))
(insn 18 17 20 2 (parallel [
            (set (reg:DI 0 ax [121])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) t3.c:322 218 {*adddi_1}
     (nil))
(insn 20 18 21 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [120])) t3.c:322 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [121])) t3.c:322 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (call (mem:QI (symbol_ref:DI ("init") [flags 0x3]  <function_decl 0x7fd504f2d288 init>) [0 init S1 A8])
        (const_int 0 [0])) t3.c:322 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 23 22 24 2 (set (reg/f:DI 4 si [orig:87 D.5052 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:324 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg/f:DI 0 ax [orig:88 D.5053 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:324 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 1 dx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:324 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:324 90 {*movsi_internal}
     (nil))
(insn 27 26 30 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7fd505025240 *.LC33>)) t3.c:324 89 {*movdi_internal}
     (nil))
(insn 30 27 31 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 D.5053 ] [88])) t3.c:324 89 {*movdi_internal}
     (nil))
(call_insn 31 30 32 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_file") [flags 0x3]  <function_decl 0x7fd504f2d6c0 create_file>) [0 create_file S1 A8])
            (const_int 0 [0]))) t3.c:324 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 32 31 33 2 (set (reg:SI 0 ax [123])
        (reg:SI 0 ax)) t3.c:324 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 file1+0 S4 A32])
        (reg:SI 0 ax [123])) t3.c:324 90 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 4 si [orig:89 D.5052 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:325 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg/f:DI 0 ax [orig:90 D.5053 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:325 89 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:SI 1 dx [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:325 90 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:325 90 {*movsi_internal}
     (nil))
(insn 38 37 41 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fd5050252d0 *.LC34>)) t3.c:325 89 {*movdi_internal}
     (nil))
(insn 41 38 42 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.5053 ] [90])) t3.c:325 89 {*movdi_internal}
     (nil))
(call_insn 42 41 43 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_file") [flags 0x3]  <function_decl 0x7fd504f2d6c0 create_file>) [0 create_file S1 A8])
            (const_int 0 [0]))) t3.c:325 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 43 42 44 2 (set (reg:SI 0 ax [125])
        (reg:SI 0 ax)) t3.c:325 90 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 file2+0 S4 A32])
        (reg:SI 0 ax [125])) t3.c:325 90 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg/f:DI 4 si [orig:91 D.5052 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:327 89 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg/f:DI 0 ax [orig:92 D.5053 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:327 89 {*movdi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:SI 1 dx [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:327 90 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:327 90 {*movsi_internal}
     (nil))
(insn 49 48 52 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7fd505025360 *.LC35>)) t3.c:327 89 {*movdi_internal}
     (nil))
(insn 52 49 53 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 D.5053 ] [92])) t3.c:327 89 {*movdi_internal}
     (nil))
(call_insn 53 52 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_file") [flags 0x3]  <function_decl 0x7fd504f2d6c0 create_file>) [0 create_file S1 A8])
            (const_int 0 [0]))) t3.c:327 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 54 53 55 2 (set (reg:SI 0 ax [127])
        (reg:SI 0 ax)) t3.c:327 90 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 file3+0 S4 A32])
        (reg:SI 0 ax [127])) t3.c:327 90 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 4 si [orig:93 D.5052 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:329 89 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [orig:94 D.5053 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:329 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:329 90 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:329 90 {*movsi_internal}
     (nil))
(insn 60 59 63 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7fd5050253f0 *.LC36>)) t3.c:329 89 {*movdi_internal}
     (nil))
(insn 63 60 64 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.5053 ] [94])) t3.c:329 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:329 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 65 64 66 2 (set (reg:SI 0 ax [129])
        (reg:SI 0 ax)) t3.c:329 90 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dir1+0 S4 A32])
        (reg:SI 0 ax [129])) t3.c:329 90 {*movsi_internal}
     (nil))
(insn 67 66 68 2 (set (reg/f:DI 4 si [orig:95 D.5052 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:330 89 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg/f:DI 0 ax [orig:96 D.5053 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:330 89 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:SI 1 dx [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:330 90 {*movsi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:330 90 {*movsi_internal}
     (nil))
(insn 71 70 74 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7fd505025480 *.LC37>)) t3.c:330 89 {*movdi_internal}
     (nil))
(insn 74 71 75 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.5053 ] [96])) t3.c:330 89 {*movdi_internal}
     (nil))
(call_insn 75 74 76 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:330 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 76 75 77 2 (set (reg:SI 0 ax [131])
        (reg:SI 0 ax)) t3.c:330 90 {*movsi_internal}
     (nil))
(insn 77 76 78 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 dir2+0 S4 A32])
        (reg:SI 0 ax [131])) t3.c:330 90 {*movsi_internal}
     (nil))
(insn 78 77 79 2 (set (reg/f:DI 4 si [orig:97 D.5052 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:331 89 {*movdi_internal}
     (nil))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [orig:98 D.5053 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:331 89 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:SI 1 dx [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:331 90 {*movsi_internal}
     (nil))
(insn 81 80 82 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:331 90 {*movsi_internal}
     (nil))
(insn 82 81 85 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7fd505025510 *.LC38>)) t3.c:331 89 {*movdi_internal}
     (nil))
(insn 85 82 86 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:98 D.5053 ] [98])) t3.c:331 89 {*movdi_internal}
     (nil))
(call_insn 86 85 87 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:331 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 87 86 88 2 (set (reg:SI 0 ax [133])
        (reg:SI 0 ax)) t3.c:331 90 {*movsi_internal}
     (nil))
(insn 88 87 89 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dir3+0 S4 A32])
        (reg:SI 0 ax [133])) t3.c:331 90 {*movsi_internal}
     (nil))
(insn 89 88 90 2 (set (reg/f:DI 4 si [orig:99 D.5052 ] [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:332 89 {*movdi_internal}
     (nil))
(insn 90 89 91 2 (set (reg/f:DI 0 ax [orig:100 D.5053 ] [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:332 89 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (set (reg:SI 1 dx [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:332 90 {*movsi_internal}
     (nil))
(insn 92 91 93 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:332 90 {*movsi_internal}
     (nil))
(insn 93 92 96 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7fd5050255a0 *.LC39>)) t3.c:332 89 {*movdi_internal}
     (nil))
(insn 96 93 97 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 D.5053 ] [100])) t3.c:332 89 {*movdi_internal}
     (nil))
(call_insn 97 96 98 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:332 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 98 97 99 2 (set (reg:SI 0 ax [135])
        (reg:SI 0 ax)) t3.c:332 90 {*movsi_internal}
     (nil))
(insn 99 98 100 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 dir4+0 S4 A32])
        (reg:SI 0 ax [135])) t3.c:332 90 {*movsi_internal}
     (nil))
(insn 100 99 101 2 (set (reg/f:DI 4 si [orig:101 D.5052 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:333 89 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (set (reg/f:DI 0 ax [orig:102 D.5053 ] [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:333 89 {*movdi_internal}
     (nil))
(insn 102 101 103 2 (set (reg:SI 1 dx [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:333 90 {*movsi_internal}
     (nil))
(insn 103 102 104 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:333 90 {*movsi_internal}
     (nil))
(insn 104 103 107 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7fd505025630 *.LC40>)) t3.c:333 89 {*movdi_internal}
     (nil))
(insn 107 104 108 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 D.5053 ] [102])) t3.c:333 89 {*movdi_internal}
     (nil))
(call_insn 108 107 109 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:333 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 109 108 110 2 (set (reg:SI 0 ax [137])
        (reg:SI 0 ax)) t3.c:333 90 {*movsi_internal}
     (nil))
(insn 110 109 111 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 dir5+0 S4 A32])
        (reg:SI 0 ax [137])) t3.c:333 90 {*movsi_internal}
     (nil))
(insn 111 110 112 2 (set (reg/f:DI 4 si [orig:103 D.5052 ] [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:334 89 {*movdi_internal}
     (nil))
(insn 112 111 113 2 (set (reg/f:DI 0 ax [orig:104 D.5053 ] [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:334 89 {*movdi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:SI 1 dx [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:334 90 {*movsi_internal}
     (nil))
(insn 114 113 115 2 (set (reg:SI 37 r8)
        (const_int 0 [0])) t3.c:334 90 {*movsi_internal}
     (nil))
(insn 115 114 118 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x7fd5050256c0 *.LC41>)) t3.c:334 89 {*movdi_internal}
     (nil))
(insn 118 115 119 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 D.5053 ] [104])) t3.c:334 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("create_dir") [flags 0x3]  <function_decl 0x7fd504f2d798 create_dir>) [0 create_dir S1 A8])
            (const_int 0 [0]))) t3.c:334 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 120 119 121 2 (set (reg:SI 0 ax [139])
        (reg:SI 0 ax)) t3.c:334 90 {*movsi_internal}
     (nil))
(insn 121 120 122 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 dir6+0 S4 A32])
        (reg:SI 0 ax [139])) t3.c:334 90 {*movsi_internal}
     (nil))
(insn 122 121 123 2 (set (reg/f:DI 4 si [orig:105 D.5052 ] [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:336 89 {*movdi_internal}
     (nil))
(insn 123 122 124 2 (set (reg/f:DI 0 ax [orig:106 D.5053 ] [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:336 89 {*movdi_internal}
     (nil))
(insn 124 123 125 2 (set (reg:SI 2 cx [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dir1+0 S4 A32])) t3.c:336 90 {*movsi_internal}
     (nil))
(insn 125 124 126 2 (set (reg:SI 1 dx [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:336 90 {*movsi_internal}
     (nil))
(insn 126 125 127 2 (set (reg:SI 37 r8)
        (reg:SI 2 cx [140])) t3.c:336 90 {*movsi_internal}
     (nil))
(insn 127 126 130 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:336 89 {*movdi_internal}
     (nil))
(insn 130 127 131 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:106 D.5053 ] [106])) t3.c:336 89 {*movdi_internal}
     (nil))
(call_insn 131 130 132 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("obtain_file_information") [flags 0x3]  <function_decl 0x7fd504f2da20 obtain_file_information>) [0 obtain_file_information S1 A8])
            (const_int 0 [0]))) t3.c:336 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 132 131 133 2 (set (reg/f:DI 4 si [orig:107 D.5052 ] [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:337 89 {*movdi_internal}
     (nil))
(insn 133 132 134 2 (set (reg/f:DI 0 ax [orig:108 D.5053 ] [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:337 89 {*movdi_internal}
     (nil))
(insn 134 133 135 2 (set (reg:SI 2 cx [142])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dir1+0 S4 A32])) t3.c:337 90 {*movsi_internal}
     (nil))
(insn 135 134 136 2 (set (reg:SI 1 dx [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:337 90 {*movsi_internal}
     (nil))
(insn 136 135 137 2 (set (reg:SI 37 r8)
        (reg:SI 2 cx [142])) t3.c:337 90 {*movsi_internal}
     (nil))
(insn 137 136 140 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:337 89 {*movdi_internal}
     (nil))
(insn 140 137 141 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:108 D.5053 ] [108])) t3.c:337 89 {*movdi_internal}
     (nil))
(call_insn 141 140 142 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("delete_dir") [flags 0x3]  <function_decl 0x7fd504f2d948 delete_dir>) [0 delete_dir S1 A8])
            (const_int 0 [0]))) t3.c:337 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 142 141 143 2 (set (reg/f:DI 4 si [orig:109 D.5052 ] [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 bitvector+0 S8 A64])) t3.c:338 89 {*movdi_internal}
     (nil))
(insn 143 142 144 2 (set (reg/f:DI 0 ax [orig:110 D.5053 ] [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:338 89 {*movdi_internal}
     (nil))
(insn 144 143 145 2 (set (reg:SI 2 cx [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dir1+0 S4 A32])) t3.c:338 90 {*movsi_internal}
     (nil))
(insn 145 144 146 2 (set (reg:SI 1 dx [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 bitvector_len+0 S4 A32])) t3.c:338 90 {*movsi_internal}
     (nil))
(insn 146 145 147 2 (set (reg:SI 37 r8)
        (reg:SI 2 cx [144])) t3.c:338 90 {*movsi_internal}
     (nil))
(insn 147 146 150 2 (set (reg:DI 2 cx)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd504ffdea0 *.LC11>)) t3.c:338 89 {*movdi_internal}
     (nil))
(insn 150 147 151 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:110 D.5053 ] [110])) t3.c:338 89 {*movdi_internal}
     (nil))
(call_insn 151 150 152 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("obtain_file_information") [flags 0x3]  <function_decl 0x7fd504f2da20 obtain_file_information>) [0 obtain_file_information S1 A8])
            (const_int 0 [0]))) t3.c:338 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 152 151 153 2 (set (reg/f:DI 0 ax [orig:111 D.5053 ] [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 memory+0 S8 A64])) t3.c:341 89 {*movdi_internal}
     (nil))
(insn 153 152 154 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 D.5053 ] [111])) t3.c:341 89 {*movdi_internal}
     (nil))
(call_insn 154 153 155 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fd505149e58 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) t3.c:341 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 155 154 158 2 (set (reg:SI 0 ax [orig:112 D.5054 ] [112])
        (const_int 0 [0])) t3.c:342 90 {*movsi_internal}
     (nil))
(insn 158 155 162 2 (set (reg:SI 0 ax [orig:113 <retval> ] [113])
        (reg:SI 0 ax [orig:112 D.5054 ] [112])) 90 {*movsi_internal}
     (nil))
(insn 162 158 163 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:113 <retval> ] [113])) t3.c:343 90 {*movsi_internal}
     (nil))
(insn 163 162 164 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5055+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 5 di [148]))
        ]) t3.c:343 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 164 163 170 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 167)
            (pc))) t3.c:343 612 {*jcc_1}
     (nil)
 -> 167)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 170 164 165 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 165 170 166 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd504fa9288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) t3.c:343 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 166 165 167)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 167 166 171 4 77 "" [1 uses])
(note 171 167 168 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 168 171 172 4 (use (reg/i:SI 0 ax)) t3.c:343 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 172 168 0 NOTE_INSN_DELETED)
